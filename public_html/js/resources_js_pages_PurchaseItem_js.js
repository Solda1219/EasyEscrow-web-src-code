(self["webpackChunk"] = self["webpackChunk"] || []).push([["resources_js_pages_PurchaseItem_js"],{

/***/ "./node_modules/@bloks/constants/dist/constants.esm.js":
/*!*************************************************************!*\
  !*** ./node_modules/@bloks/constants/dist/constants.esm.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ANCHOR": () => (/* binding */ ANCHOR),
/* harmony export */   "CLEOS": () => (/* binding */ CLEOS),
/* harmony export */   "CLIO": () => (/* binding */ CLIO),
/* harmony export */   "Constants": () => (/* binding */ Constants),
/* harmony export */   "DEFAULT_CHAIN": () => (/* binding */ DEFAULT_CHAIN),
/* harmony export */   "DEFAULT_SYMBOL": () => (/* binding */ DEFAULT_SYMBOL),
/* harmony export */   "DEFAULT_SYSTEM_DOMAIN": () => (/* binding */ DEFAULT_SYSTEM_DOMAIN),
/* harmony export */   "EOSAUTH": () => (/* binding */ EOSAUTH),
/* harmony export */   "EOSC": () => (/* binding */ EOSC),
/* harmony export */   "KEYCAT": () => (/* binding */ KEYCAT),
/* harmony export */   "LEDGER": () => (/* binding */ LEDGER),
/* harmony export */   "LEDGER_BLE": () => (/* binding */ LEDGER_BLE),
/* harmony export */   "LEDGER_USB": () => (/* binding */ LEDGER_USB),
/* harmony export */   "LEDGER_WEBHID": () => (/* binding */ LEDGER_WEBHID),
/* harmony export */   "LEDGER_WEBUSB": () => (/* binding */ LEDGER_WEBUSB),
/* harmony export */   "LYNX": () => (/* binding */ LYNX),
/* harmony export */   "PROTON": () => (/* binding */ PROTON),
/* harmony export */   "PROTON_WEB": () => (/* binding */ PROTON_WEB),
/* harmony export */   "SCATTER_DESKTOP": () => (/* binding */ SCATTER_DESKTOP),
/* harmony export */   "SCATTER_DESKTOP_MANUAL": () => (/* binding */ SCATTER_DESKTOP_MANUAL),
/* harmony export */   "SCATTER_EXTENSION": () => (/* binding */ SCATTER_EXTENSION),
/* harmony export */   "SIMPLEOS": () => (/* binding */ SIMPLEOS),
/* harmony export */   "SQRL": () => (/* binding */ SQRL),
/* harmony export */   "TREZOR": () => (/* binding */ TREZOR),
/* harmony export */   "WAX_CLOUD_WALLET": () => (/* binding */ WAX_CLOUD_WALLET),
/* harmony export */   "WOMBAT": () => (/* binding */ WOMBAT),
/* harmony export */   "chainInfo": () => (/* binding */ chainInfo),
/* harmony export */   "chainToNetworkConstantsMap": () => (/* binding */ chainToNetworkConstantsMap),
/* harmony export */   "constants": () => (/* binding */ constants$c),
/* harmony export */   "dapps": () => (/* binding */ dapps),
/* harmony export */   "exchanges": () => (/* binding */ exchanges),
/* harmony export */   "getContractConstants": () => (/* binding */ getContractConstants),
/* harmony export */   "historyTypesFeatures": () => (/* binding */ historyTypesFeatures)
/* harmony export */ });
var DEFAULT_SYMBOL = 'EOS';
var DEFAULT_SYSTEM_DOMAIN = 'eosio';
var DEFAULT_CHAIN = 'eos';

var getContractConstants = function getContractConstants(chain, systemDomain) {
  if (chain === void 0) {
    chain = DEFAULT_CHAIN;
  }

  if (systemDomain === void 0) {
    systemDomain = DEFAULT_SYSTEM_DOMAIN;
  }

  // Proxy Information Account
  var proxyInfo;

  if (['eos', 'bos', 'wax'].includes(chain)) {
    proxyInfo = 'regproxyinfo';
  } else if (chain === 'telos') {
    proxyInfo = 'tlsproxyinfo';
  }

  return {
    // Accounts
    EOSIO: systemDomain,
    EOSIO_TOKEN: !['fio', 'fio-test'].includes(chain) ? systemDomain + ".token" : 'fio.token',
    ACCOUNT_INFO: 'account.info',
    PROXY_INFO_ACCOUNT: proxyInfo,
    EOSIO_MSIG: systemDomain + ".msig",
    EOSIO_RAM: systemDomain + ".ram",
    EOSIO_STAKE: systemDomain + ".stake",
    EOSIO_PRODS: systemDomain + ".prods",
    EOSIO_NULL: systemDomain + ".null",
    EOSIO_RAMFEE: systemDomain + ".ramfee",
    EOSIO_VPAY: systemDomain + ".vpay",
    EOSIO_BPAY: systemDomain + ".bpay",
    EOSIO_REX: systemDomain + ".rex",
    // Params
    NEWACCOUNT_NAME_PARAM: chain.indexOf('bos') === -1 ? 'name' : 'newact',
    // Tables
    EOSIO_MSIG_APPROVALS_TABLE: 'approvals2',
    EOSIO_MSIG_PROPOSALS_TABLE: 'proposal',
    // Actions
    TRANSFER_ACTION: 'transfer',
    DELEGATE_BW_ACTION: 'delegatebw',
    UNDELEGATE_BW_ACTION: 'undelegatebw',
    VOTE_PRODUCER_ACTION: 'voteproducer',
    BUY_RAM_ACTION: 'buyram',
    BUY_RAM_BYTES_ACTION: 'buyrambyes',
    SELL_RAM_ACTION: 'sellram'
  };
};

var dapps = [{
  name: 'Alcor.exchange',
  description: 'The first self-listing DEX. With Alcor you can trade any EOS.IO tokens for system EOS tokens, atomically, without the participation of third parties! Create markets in one click, list your dapp token for one click, trade whatever you want.',
  shortDescription: 'The first self-listing DEX. With Alcor you can trade any EOS.IO tokens for system EOS tokens.',
  symbol: '',
  statistics: true,
  accounts: ['eostokensdex'],
  logo: 'https://i.ibb.co/dKDYDMc/vectorpaint.png',
  website: 'https://alcor.exchange/',
  app: 'https://alcor.exchange/',
  telegram: 'https://t.me/alcorexchange',
  medium: 'https://medium.com/@avral',
  twitter: 'https://twitter.com/avral_pro',
  github: 'https://github.com/avral/alcor-ui',
  chains: ['eos', 'wax', 'telos']
}, {
  name: 'SX',
  description: 'Building secure & reliable financial blockchain instruments',
  shortDescription: 'DeFi Swap & Flashloan',
  symbol: 'SX',
  accounts: ['swap.sx', 'vigor.sx', 'stable.sx', 'flash.sx', 'push.sx', 'network.sx', 'registry.sx', 'miner.sx', 'cross.sx', 'nav.sx', 'fee.sx', 'trade.sx', 'vaults.sx', 'proxy.sx', 'dust.sx', 'curve.sx'],
  logo: 'https://raw.githubusercontent.com/eoscafe/eos-airdrops/master/logos/sx.png',
  website: 'https://github.com/stableex',
  app: 'https://xnation.io',
  telegram: 'https://t.me/xnationio',
  medium: '',
  twitter: '',
  github: 'https://github.com/stableex',
  chains: ['eos']
}, {
  name: 'EOSNameService',
  description: 'EOS Name Service is the most comprehensive platform to register premium/base EOS/WAX account names.',
  shortDescription: 'EOS/WAX Name Service',
  symbol: '',
  partner: false,
  accounts: ['names'],
  logo: 'https://avatars1.githubusercontent.com/u/73891041',
  website: 'http://eosnameservice.io',
  app: 'http://eosnameservice.io',
  telegram: 'https://t.me/eosnameservice',
  medium: '',
  twitter: 'https://twitter.com/eosnameservice',
  github: 'https://github.com/eosnameservice',
  chains: ['eos', 'wax']
}, {
  name: 'Prospectors',
  description: 'Massive Multiplayer Online Real-Time Economic Strategy Game  MINE GOLD - BUILD YOUR WORLD',
  shortDescription: 'Massive Multiplayer Online Real-Time Economic Strategy Game',
  symbol: '',
  accounts: ['prospectorsc'],
  logo: 'https://bloks.io/img/dapps/prospectors.png',
  website: 'https://prospectors.io',
  app: 'https://prospectors.io',
  telegram: 'https://t.me/prospectorsgame',
  medium: 'https://medium.com/@prospectorsgame',
  twitter: 'https://twitter.com/prospectorsgame',
  github: 'https://github.com/prospectors/public/issues',
  chains: ['eos']
}, {
  name: 'APPICS',
  description: 'APPICS is the most engaged social media dApp that makes it easy to get rewarded with cryptocurrency for your social media activity like creating & curating content. The mobile interface is intuitive to use without any prior blockchain knowledge. Get rewarded for your passion!',
  shortDescription: 'APPICS is the most engaged social media dApp - earn APX Tokens for posting, commenting, and up-voting photos & videos!',
  symbol: 'APX',
  statistics: true,
  accounts: ['appicsappics'],
  logo: 'https://i.imgur.com/Ts9CNN5.png',
  website: 'https://appics.com',
  app: 'https://appics.com',
  telegram: 'https://t.me/appics_official',
  medium: 'https://medium.com/@appics',
  twitter: 'https://twitter.com/appics_official',
  github: 'https://github.com/phenom-company/appics_eos_token',
  chains: ['eos']
}, {
  name: 'Boid',
  description: 'Contribute your excess computing resources towards important causes while earning rewards. Join a team and rank up on the social leaderboards.',
  shortDescription: 'The Social Supercomputer. Contribute your excess computing resources towards important causes.',
  symbol: '',
  accounts: ['boidcomtoken', 'boidcompower', 'boidcommint1', 'boidcompromo'],
  logo: 'https://raw.githubusercontent.com/boid-com/assets/master/boidLogo-lg.png',
  website: 'https://boid.com',
  app: 'https://app.boid.com',
  telegram: 'https://t.me/Boidcom_official',
  medium: 'https://medium.com/@boidcom',
  twitter: 'https://twitter.com/boidcom',
  github: 'https://github.com/boid-com',
  chains: ['eos']
}, {
  name: 'The Billionaire Token',
  description: 'Most other coins or tokens have some sort of mining system. Billionaire Token has the exact opposite: It features a deflationary mechanism that destroys 30% of the gambled coins. Thus the tokens become more and more rare as more and more people gamble.',
  shortDescription: 'Billionaire Token has the opposite of a mining system: It features a deflationary mechanism that destroys 30% of the gambled coins.',
  symbol: 'XBL',
  accounts: ['billionairet', 'billionraffl', 'billionburnr', 'billionbot11', 'billionbot12', 'billionbot13', 'billionbot14'],
  app: 'https://BillionaireToken.com/',
  logo: 'https://BillionaireToken.com/images/logo_big.png',
  website: 'https://BillionaireToken.com/',
  telegram: 'https://t.me/BillionaireToken',
  medium: 'https://medium.com/@billionaire_3373',
  twitter: 'https://twitter.com/BillionaireTkn',
  github: 'https://github.com/BillionaireToken',
  chains: ['eos']
}, {
  name: 'Crypto Sword & Magic',
  description: 'Crypto Sword & Magic is the first blockbuster RPG on EOS blockchain, traditional turn-based RPG raising heroes to challenge new dungeons. Game assets are recorded on Blockchain and transactions run on smart contracts',
  shortDescription: 'Crypto Sword & Magic is the first blockbuster RPG on EOS blockchain.',
  symbol: 'CSM',
  accounts: ['swordnmagicm'],
  app: 'https://www.cryptoswordandmagic.com',
  logo: 'https://bloks.io/img/dapps/cryptosnm.png',
  website: 'https://www.cryptoswordandmagic.com',
  telegram: 'https://t.me/cryptosnm_comm_en',
  medium: 'https://medium.com/@cryptoswordandmagic',
  twitter: 'https://twitter.com/sword_and_magic',
  github: '',
  chains: ['eos']
}, {
  name: 'dmail',
  description: 'Welcome to dmail Beta! We are so excited to have you participate as we launch our Beta platform. In the early stages we are covering the simplest of functionality, which is sending and receiving messages. In the very near future, we will be adding a bunch of new features which we know the community is going to ask for.',
  shortDescription: 'dmail is the first decentralized email on the blockchain',
  symbol: 'MAIL',
  statistics: true,
  accounts: ['dmaildotcobp'],
  logo: 'https://www.dmail.co/logosym_256.png',
  website: 'https://dmail.co',
  app: '',
  telegram: 'https://t.me/dmailcommunity',
  medium: 'https://medium.com/@dmail',
  twitter: 'https://twitter.com/dmaildotco',
  github: '',
  chains: ['eos', 'telos']
}, {
  name: 'Murmur',
  description: 'Murmur is a new age decentralized microblogging platform on EOS that is censorship-resistant, spam-proof and rewarding to use.',
  shortDescription: 'Murmur is a new age decentralized microblogging platform on EOS that is censorship-resistant, spam-proof and rewarding to use.',
  symbol: 'MUR',
  partner: true,
  accounts: ['murmurdappco', 'murmurtokens', 'murmurfreeac'],
  app: 'https://play.google.com/store/apps/details?id=com.murmurdapp',
  logo: 'https://bloks.io/img/dapps/murmur.png',
  website: 'http://murmurdapp.com',
  telegram: 'http://t.me/murmurdapp',
  medium: '',
  twitter: 'http://twitter.com/murmurdapp',
  github: '',
  chains: ['eos']
}, {
  name: 'Emanate',
  description: 'Emanate is EOS for the music industry. An automated, realtime music collaboration and monetisation platform.',
  shortDescription: 'Emanate is decentralised technology for the future of music',
  symbol: 'EMT',
  partner: true,
  accounts: ['emanateoneos', 'emanateissue'],
  app: 'https://emanate.live/',
  logo: 'https://bloks.io/img/dapps/emanate.png',
  website: 'https://emanate.live',
  telegram: 'https://t.me/emanateofficial',
  medium: '',
  twitter: 'https://twitter.com/emanateofficial',
  github: '',
  chains: ['eos']
}, {
  name: 'pixEOS',
  description: 'pixEOS is the first tokenized smart economy for gamers, artists and art enthusiasts.',
  shortDescription: 'pixEOS is the first tokenized smart economy for gamers, artists and art enthusiasts.',
  symbol: 'PIXEOS',
  partner: true,
  accounts: ['pixeos1token', 'pixeos1admin', 'pixeos1start'],
  app: 'https://pixeos.io',
  logo: 'https://bloks.io/img/dapps/pixeos.png',
  website: 'https://pixeos.io',
  telegram: 'https://t.me/PIXEOS',
  medium: '',
  twitter: 'https://twitter.com/eos_pix',
  github: '',
  chains: ['eos']
}, {
  name: 'Everipedia',
  description: 'The Everipedia team plans to build a modern, convenient and decentralized new encyclopedia website, and this goal will be realized with the development of blockchain technology. The new version of Everipedia under development will be based on the EOS network, which will have features such as community autonomy, shielding preventation, and contribution incentives compared to the current version of Everipedia. Founded in 2014, the business network encyclopedia Everipedia, whose name derives from the English words Everything and Encyclopedia, is owned by Everipedia.Inc and has not yet adopted blockchain technology. As of December 2017, Everipedia is the largest English encyclopedia with more than six million entries, including all English entries of Wikipedia. Everipedias requirements for attention are more relaxed, so it has more entries than Wikipedia.',
  shortDescription: 'The Everipedia team plans to build a modern, convenient and decentralized new encyclopedia.',
  symbol: 'IQ',
  partner: true,
  statistics: false,
  accounts: ['everipediaiq', 'eparticlectr'],
  logo: 'https://bloks.io/img/dapps/everipedia.jpg',
  website: '',
  app: 'https://everipedia.org',
  telegram: 'https://t.me/everipedia',
  medium: '',
  twitter: '',
  github: '',
  chains: ['eos']
}, {
  name: 'eosDAC',
  description: 'eosDAC is a Community Owned Blockproducer and a DAC enabler, born out of Dan Larimers concept of Decentralized Autonomous Communities or DACs, around which Block.one developed EOS software.  The vision of eosDAC is that EOS.IO block production should be open for everyone to contribute and benefit. To realize this vision, eosDAC is an evolving Decentralised Autonomous Community (DAC) focused on EOS.IO Block Production serving the EOS communities worldwide. In doing this, eosDAC is creating the tools and smart contracts it needs to function. It will share these with the EOS communities to help other DACs thrive on the EOS.IO blockchains.  In order to function as a DAC, eosDAC is creating open source tools and will be sharing them as a DAC Toolkit, that anyone can use, modify to setup and run a DAC.',
  shortDescription: 'eosDAC is creating open source tools and will be sharing them as a DAC Toolkit to enable DACs',
  symbol: 'EOSDAC',
  partner: false,
  statistics: false,
  accounts: ['eosdactokens', 'eosdacserver', 'eosdacthedac', 'daccustodian'],
  logo: 'https://raw.githubusercontent.com/eoscafe/eos-dapps/master/logos/eosdac.png',
  website: '',
  app: 'members.eosdac.io',
  discord: 'https://discord.io/eosdac',
  telegram: 'https://t.me/eosdacio',
  medium: '',
  twitter: '',
  github: 'https://github.com/eosdac',
  chains: ['eos']
}, {
  name: 'DEOS Games',
  description: 'Deos Games are casino games built on EOS blockchain. Play zero edge games with our DEOS token and participate in bankroll staking.',
  shortDescription: 'Deos Games are casino games built on the EOS blockchain. Play zero edge games with DEOS token.',
  symbol: 'DEOS',
  statistics: false,
  accounts: ['thedeosgames', 'deosgameissu'],
  logo: 'https://bloks.io/img/dapps/deosgames.png',
  website: 'https://deosgames.com',
  app: 'https://app.deosgames.com',
  telegram: 'https://t.me/deosgameschat',
  medium: 'https://medium.com/deos-games',
  twitter: '',
  github: '',
  chains: ['eos']
}, {
  name: 'Chintai',
  description: 'Chintai is a community-owned, feeless, 100% on-chain, multisig decentralized token leasing platform where users can lend their EOS on the market to earn interest from other users to borrow who need access to CPU/NET bandwidth.',
  shortDescription: 'Chintai is a community-owned, feeless, 100% on-chain, multisig decentralized token leasing platform.',
  symbol: '',
  statistics: false,
  accounts: ['chintailease', 'chintaiproxy', 'bidchextoken', 'chexchexchex'],
  logo: 'https://bloks.io/img/dapps/chintai.png',
  website: 'http://chintai.io',
  app: 'https://eos.chintai.io/exchange/EOS28D',
  telegram: 'https://t.me/ChintaiEOS',
  medium: 'https://medium.com/@ChintaiEOS',
  twitter: 'https://twitter.com/chintaieos',
  github: 'https://github.com/chintai-platform',
  chains: ['eos']
}, {
  name: 'Newdex',
  description: 'Newdex is the first EOS based decentralized exchange in the world, upholding the characteristics of safe, fast and transparent, devoting to create a new-generation platform for digital assets exchange, leading the industry into an ideal new era.',
  shortDescription: 'Newdex is the first EOS based decentralized exchange in the world.',
  symbol: '',
  accounts: ['newdexpocket'],
  logo: 'https://bloks.io/img/dapps/newdex.png',
  website: 'https://newdex.io',
  app: 'https://newdex.io',
  telegram: '',
  medium: '',
  twitter: 'https://twitter.com/NewdexOfficial',
  github: '',
  chains: ['eos']
}, {
  name: 'EOS Name Swaps',
  description: 'An open-source EOS account exchange that puts the security of its users first.',
  shortDescription: 'An open-source EOS account exchange that puts the security of its users first.',
  symbol: '',
  statistics: false,
  accounts: ['eosnameswaps'],
  logo: 'https://bloks.io/img/dapps/eosnameswaps.png',
  website: 'https://www.eosnameswaps.com/',
  app: 'https://www.eosnameswaps.com/',
  telegram: 'https://t.me/eosnameswaps',
  medium: '',
  twitter: 'https://twitter.com/Starry3017Night',
  github: 'https://github.com/StarryJapanNight/eosnameswaps',
  chains: ['eos']
}];

var exchanges = {
  'Bithumb': {
    'name': 'Bithumb',
    'description': '비트코인, 이더리움, 비트코인캐시, 리플, 라이트코인, 대시, 모네로, 비트코인골드, 이오스, 이더리움클래식, 퀀텀, 제트캐시, 실시간 시세, 쉽고 안전한 거래.',
    'accounts': ['bithumbshiny'],
    'logo': 'https://raw.githubusercontent.com/eoscafe/eos-dapps/master/logos/placeholder.png',
    'website': 'https://www.bithumb.com/'
  },
  'OKEx': {
    'name': 'OKEx',
    'description': 'OKEx is the leading global bitcoin exchange. Secured with bank-level SSL encryption and cold storage.',
    'accounts': ['okexoffiline'],
    'logo': 'https://raw.githubusercontent.com/eoscafe/eos-dapps/master/logos/placeholder.png',
    'website': 'https://www.okex.com/'
  },
  'Bitfinex': {
    'name': 'Bitfinex',
    'description': 'Bitfinex is a full-featured spot trading platform for major digital assets & cryptocurrencies, including Bitcoin, Ethereum, EOS, Litecoin, Ripple, NEO, Monero and many more.',
    'accounts': ['bitfinexcw55', 'bitfinexcw13', 'bitfinexcw11', 'bitfinexcw24', 'bitfinexcw15', 'bitfinexcw32', 'bitfinexcw21', 'bitfinexcw31', 'bitfinexcw25', 'bitfinexcw23', 'bitfinexcw33', 'bitfinexcw22', 'bitfinexcw12', 'bitfinexcw14'],
    'logo': 'https://raw.githubusercontent.com/eoscafe/eos-dapps/master/logos/placeholder.png',
    'website': 'https://bitfinex.com/'
  },
  'Gate.io': {
    'name': 'Gate.io',
    'description': 'Gate.io is a bitcoin exchange platform which supports BTC, LTC, Ethereum, Qtum and more blockchain assets trading.',
    'accounts': ['gateiowallet'],
    'logo': 'https://raw.githubusercontent.com/eoscafe/eos-dapps/master/logos/placeholder.png',
    'website': 'https://www.gate.io/'
  },
  'Kraken': {
    'name': 'Kraken',
    'description': 'Buy, sell and margin trade Bitcoin (BTC) and Etherum (ETH) in exchange with EUR, USD, CAD, GBP, and JPY.',
    'accounts': ['krakenkraken'],
    'logo': 'https://raw.githubusercontent.com/eoscafe/eos-dapps/master/logos/placeholder.png',
    'website': 'https://www.kraken.com/'
  },
  'Newdex': {
    'name': 'Newdex',
    'description': 'The first EOS based decentralized exchange in the world.',
    'accounts': ['newdexpocket'],
    'logo': '/img/exchanges/newdex.png',
    'website': 'https://newdex.io/',
    linkGenerator: function linkGenerator(token, pair) {
      return "https://newdex.io/trade/" + token.account + "-" + pair.pair_base.toLowerCase() + "-" + pair.pair_quote.toLowerCase();
    }
  },
  'DefiBox': {
    'name': 'DefiBox',
    'description': 'One-stop DeFi application platform on EOS..',
    'accounts': ['token.defi', 'swap.defi'],
    'logo': 'https://raw.githubusercontent.com/eoscafe/eos-airdrops/master/logos/token.defi-box.png',
    'website': 'https://defibox.io/',
    linkGenerator: function linkGenerator(_, __) {
      return "https://defibox.io/";
    }
  },
  'Chaince': {
    'name': 'Chaince',
    'description': 'A Superior Blockchain Asset Trading Platform Focusing on EOS Projects',
    'accounts': ['chainceoneos'],
    'logo': '/img/exchanges/chaince.png',
    'website': 'https://chaince.com/',
    linkGenerator: function linkGenerator(_, pair) {
      return "https://chaince.com/trade/" + pair.pair_base.toLowerCase() + pair.pair_quote.toLowerCase();
    }
  },
  'Dexeos': {
    'name': 'Dexeos',
    'description': 'The World\'s First EOS-based Decentralized Exchange',
    'accounts': ['dexeoswallet'],
    'logo': '/img/exchanges/dexeos.svg',
    'website': 'https://dexeos.io/',
    linkGenerator: function linkGenerator(_, pair) {
      return "https://dexeos.io/trade/" + pair.pair_base.toUpperCase();
    }
  },
  'Hoo': {
    'name': 'Hoo',
    'description': 'One-stop blockchain asset service platform',
    'accounts': ['hoo.com'],
    'logo': '/img/exchanges/hoo.jpg',
    'website': 'https://hoo.com/',
    linkGenerator: function linkGenerator(_, pair) {
      return "https://hoo.com/trade/" + pair.pair_base.toLowerCase() + "-" + pair.pair_quote.toLowerCase();
    }
  },
  'Whaleex': {
    'name': 'Whaleex',
    'description': '#1 Decentralized Exchange in the World',
    'accounts': ['whaleextrust'],
    'logo': '/img/exchanges/whaleex.png',
    'website': 'https://www.whaleex.com',
    linkGenerator: function linkGenerator(_, pair) {
      return "https://www.whaleex.com/trade/" + pair.pair_base + "_" + pair.pair_quote;
    }
  },
  'Chainrift': {
    'name': 'Chainrift',
    'description': 'A marketplace for digital currencies',
    'accounts': [],
    'logo': '/img/exchanges/chainrift.png',
    'website': 'https://www.chainrift.com/',
    linkGenerator: function linkGenerator(_, pair) {
      return "https://www.chainrift.com/trading?coinpair=" + pair.pair_base + "/" + pair.pair_quote;
    }
  },
  'Eosdaq': {
    'name': 'EOSDAQ',
    'description': 'A Standard of On-Chain DEX',
    'accounts': [],
    'logo': '/img/exchanges/eosdaq.png',
    'website': 'https://www.eosdaq.com/',
    linkGenerator: function linkGenerator(_, pair) {
      return "https://eosdaq.com/exchange/" + pair.pair_base + "_" + pair.pair_quote;
    }
  },
  'BigONE': {
    'name': 'BigONE',
    'description': 'A Standard of On-Chain DEX',
    'accounts': [],
    'logo': '/img/exchanges/bigONE.jpg',
    'website': 'https://big.one',
    linkGenerator: function linkGenerator(_, pair) {
      return "https://big.one/trade/" + pair.pair_base + "-" + pair.pair_quote;
    }
  },
  'YOLO': {
    'name': 'YOLO',
    'description': 'Instant Token Swaps on EOS',
    'accounts': [],
    'logo': '/img/exchanges/yolo.png',
    'website': 'https://yoloswap.com',
    linkGenerator: function linkGenerator(_, pair) {
      return "https://yoloswap.com/swap/" + pair.pair_quote.toLowerCase() + "-" + pair.pair_base.toLowerCase();
    }
  },
  'Bancor': {
    'name': 'Bancor',
    'description': 'Instant Liquidity.',
    'accounts': [],
    'logo': '/img/exchanges/bancor.png',
    'website': 'https://bancor.network',
    linkGenerator: function linkGenerator(_, pair) {
      return "https://www.bancor.network/token/" + pair.pair_base;
    }
  },
  'Alcor': {
    'name': 'Alcor',
    'description': 'The first self-listing decentralized exchange',
    'accounts': [],
    'logo': '/img/exchanges/alcor.png',
    'website': 'https://alcor.exchange',
    linkGenerator: function linkGenerator(_, __) {
      return "https://www.alcor.exchange/markets";
    }
  },
  'Defis.Network': {
    'name': 'Defis.Network',
    'description': 'An open finance network that integrates a series of DeFi protocols',
    'accounts': [],
    'logo': '/img/exchanges/defis-uncache.png',
    'website': 'https://defis.network',
    linkGenerator: function linkGenerator(_, __) {
      return "https://apps.defis.network/";
    }
  },
  'DolphinSwap': {
    'name': 'DolphinSwap',
    'description': 'DolphinSwap',
    'accounts': [],
    'logo': '/img/exchanges/dolphinswap.png',
    'website': 'https://dolphinswap.io/exchange',
    linkGenerator: function linkGenerator(_, __) {
      return 'https://dolphinswap.io/exchange';
    }
  },
  'Proton': {
    'name': 'ProtonSwap',
    'description': 'ProtonSwap',
    'accounts': [],
    'logo': '/img/exchanges/protonswap.png',
    'website': 'https://protonswap.com',
    linkGenerator: function linkGenerator(_, __) {
      return 'https://protonswap.com';
    }
  },
  'Coingecko': {
    'name': 'CoinGecko',
    'description': 'CoinGecko',
    'accounts': [],
    'logo': '/img/exchanges/coingecko.png',
    'website': 'https://coingecko.com',
    linkGenerator: function linkGenerator(_, __) {
      return 'https://coingecko.com';
    }
  }
};

var SCATTER_DESKTOP = 'ScatterSockets';
var SCATTER_DESKTOP_MANUAL = 'ScatterSocketsManual';
var SCATTER_EXTENSION = 'ScatterExtension';
var LEDGER = 'ledger';
var LEDGER_USB = 'TransportU2F';
var LEDGER_BLE = 'TransportWebBLE';
var LEDGER_WEBUSB = 'TransportWebusb';
var LEDGER_WEBHID = 'TransportWebHID';
var LYNX = 'lynx';
var PROTON = 'proton';
var PROTON_WEB = 'protonweb';
var ANCHOR = 'anchor';
var SIMPLEOS = 'simpleos';
var EOSAUTH = 'eosauth';
var CLEOS = 'cleos';
var EOSC = 'eosc';
var CLIO = 'clio';
var KEYCAT = 'keycat';
var TREZOR = 'trezor';
var SQRL = 'sqrl';
var WOMBAT = 'wombat';
var WAX_CLOUD_WALLET = 'WaxCW';

var historyTypesFeatures = {
  "native": {
    name: 'native',
    actionFilter: false,
    tokenFilter: false,
    dateFilter: false,
    contractActionFilter: false,
    total: 0
  },
  dfuse: {
    name: 'dfuse',
    actionFilter: true,
    tokenFilter: true,
    dateFilter: true,
    contractActionFilter: true,
    total: 4
  },
  hyperion: {
    name: 'hyperion',
    actionFilter: true,
    tokenFilter: true,
    dateFilter: true,
    contractActionFilter: true,
    total: 3
  }
};

var _chainInfo;

var chainInfo = (_chainInfo = {}, _chainInfo['proton-test'] = {
  key: 'proton-test',
  text: 'Proton Testnet',
  value: 'https://testnet.protonscan.io',
  image: '/img/chains/proton.png',
  testnet: true
}, _chainInfo.local = {
  key: 'local',
  text: 'Local Testnet',
  value: 'https://local.bloks.io',
  image: '/img/chains/local.png',
  testnet: true
}, _chainInfo['wax-test'] = {
  key: 'wax-test',
  text: 'WAX Testnet',
  value: 'https://wax-test.bloks.io',
  image: '/img/chains/wax.png',
  testnet: true
}, _chainInfo['fio-test'] = {
  key: 'fio-test',
  text: 'FIO Testnet',
  value: 'https://fio-test.bloks.io',
  image: '/img/chains/fio.png',
  testnet: true
}, _chainInfo.jungle3 = {
  key: 'jungle3',
  text: 'Jungle3 Testnet',
  value: 'https://jungle3.bloks.io',
  image: '/img/chains/jungle.png',
  testnet: true
}, _chainInfo.kylin = {
  key: 'kylin',
  text: 'Kylin Testnet',
  value: 'https://kylin.bloks.io',
  image: '/img/chains/kylin.png',
  testnet: true
}, _chainInfo.proton = {
  key: 'proton',
  text: 'Proton',
  value: 'https://protonscan.io',
  image: '/img/chains/proton.png'
}, _chainInfo.eos = {
  key: 'eos',
  text: 'EOS',
  value: 'https://bloks.io',
  image: '/img/chains/eos.png'
}, _chainInfo.wax = {
  key: 'wax',
  text: 'WAX',
  value: 'https://wax.bloks.io',
  image: '/img/chains/wax.png'
}, _chainInfo.fio = {
  key: 'fio',
  text: 'FIO',
  value: 'https://fio.bloks.io',
  image: '/img/chains/fio.png'
}, _chainInfo);

var getCommonConstants = function getCommonConstants(chain) {
  return {
    MAX_RPC_SYNC_SECONDS_BEHIND: 20,
    IMAGE_PROXY: 'https://www.api.bloks.io/image-proxy',
    WRAP_CONTRACT: 'proton.wrap',
    BLOKS_API: 'https://www.api.bloks.io',
    ESR_PROTOCOL: chain === 'proton' ? 'proton' : 'proton-dev',
    METAL_PROTON_ENDPOINT: chain === 'proton' ? 'https://api.protonchain.com' : 'https://api-dev.protonchain.com',
    SWAP_URL: chain === 'proton' ? 'https://otc.protonswap.com' : 'https://otc-test.protonswap.com',
    WRAP_SERVER_URL: chain === 'proton' ? 'https://www.api.bloks.io/proton-wrap-public2' : 'https://www.api.bloks.io/proton-wrap-testnet-public2'
  };
};

var generateProviderEndpoints = function generateProviderEndpoints(chainId, actionEndpoints) {
  return [{
    chainId: chainId,
    port: 443,
    protocol: 'https',
    host: actionEndpoints[0].substr(8),
    httpEndpoint: actionEndpoints[0],
    blockchain: 'eos'
  }];
};

var DEFAULT_ENDPOINTS = ['https://eos.greymass.com', 'https://eos.eoscafeblock.com', 'https://api.main.alohaeos.com', 'https://api.eossweden.org'];
var ACTIONS_ENDPOINTS = ['https://eos.greymass.com'];
var TRANSACTIONS_ENDPOINTS = ['https://eos.greymass.com', 'https://api.eossweden.org'];
var ALOHA_PROXY_URL = 'https://www.alohaeos.com/vote/proxy';
var API_URL = 'https://www.api.bloks.io';
var ATOMICASSETS_API = 'https://eos.api.atomicassets.io';
var BLOKS_PROXY = 'bloksioproxy';
var CHAIN = 'eos';
var CHAIN_ID = 'aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906';
var CHAIN_START_DATE = /*#__PURE__*/new Date('2018-06-08');
var CORE_PRECISION = 4;
var CORE_SYMBOL = 'EOS';
var DISPLAY_CHAIN = 'EOS';
var DOMAIN_TITLE = 'EOS Bloks.io';
var HISTORY_TYPES = ['native', 'hyperion'];
var HYPERION_URL = 'https://eos.hyperion.eosrio.io';
var KEY_PREFIX = 'EOS';
var LIGHT_API = 'https://api.light.xeos.me';
var NFTS_ENABLED = true;
var PROVIDER_ENDPOINTS = /*#__PURE__*/generateProviderEndpoints(CHAIN_ID, ACTIONS_ENDPOINTS);
var REX_ENABLED = true;
var SIMPLEASSETS_API = 'https://eos.api.simpleassets.io';
var SUPPORTS_FREE_CPU = true;
var SUPPORTS_RENTBW = true;
var VOTING_ENABLED = true;
var constants = {
  ACTIONS_ENDPOINTS: ACTIONS_ENDPOINTS,
  ALOHA_PROXY_URL: ALOHA_PROXY_URL,
  API_URL: API_URL,
  ATOMICASSETS_API: ATOMICASSETS_API,
  BLOKS_PROXY: BLOKS_PROXY,
  CHAIN: CHAIN,
  CHAIN_ID: CHAIN_ID,
  CHAIN_START_DATE: CHAIN_START_DATE,
  CORE_PRECISION: CORE_PRECISION,
  CORE_SYMBOL: CORE_SYMBOL,
  DEFAULT_ENDPOINTS: DEFAULT_ENDPOINTS,
  DISPLAY_CHAIN: DISPLAY_CHAIN,
  DOMAIN_TITLE: DOMAIN_TITLE,
  HISTORY_TYPES: HISTORY_TYPES,
  HYPERION_URL: HYPERION_URL,
  KEY_PREFIX: KEY_PREFIX,
  LIGHT_API: LIGHT_API,
  NFTS_ENABLED: NFTS_ENABLED,
  PROVIDER_ENDPOINTS: PROVIDER_ENDPOINTS,
  REX_ENABLED: REX_ENABLED,
  SIMPLEASSETS_API: SIMPLEASSETS_API,
  SUPPORTS_FREE_CPU: SUPPORTS_FREE_CPU,
  SUPPORTS_RENTBW: SUPPORTS_RENTBW,
  TRANSACTIONS_ENDPOINTS: TRANSACTIONS_ENDPOINTS,
  VOTING_ENABLED: VOTING_ENABLED
};

var DEFAULT_ENDPOINTS$1 = ['https://wax.greymass.com', 'https://wax.eoscafeblock.com', 'https://api.waxsweden.org', 'https://chain.wax.io', 'https://wax.eosrio.io'];
var ACTIONS_ENDPOINTS$1 = ['https://wax.greymass.com', 'https://api.waxsweden.org', 'https://wax.eosrio.io', 'https://chain.wax.io'];
var TRANSACTIONS_ENDPOINTS$1 = ['https://wax.greymass.com', 'https://api.waxsweden.org', 'https://wax.eosrio.io', 'https://chain.wax.io'];
var ALOHA_PROXY_URL$1 = 'https://www.alohaeos.com/vote/proxy/waxmain';
var API_URL$1 = 'https://www.api.bloks.io/wax';
var ATOMICASSETS_API$1 = 'https://wax.api.atomicassets.io';
var BLOKS_PROXY$1 = 'bloksioproxy';
var CHAIN$1 = 'wax';
var CHAIN_ID$1 = '1064487b3cd1a897ce03ae5b6a865651747e2e152090f99c1d19d44e01aea5a4';
var CHAIN_START_DATE$1 = /*#__PURE__*/new Date('2019-06-24');
var CORE_PRECISION$1 = 8;
var CORE_SYMBOL$1 = 'WAX';
var DISPLAY_CHAIN$1 = 'WAX';
var DOMAIN_TITLE$1 = 'WAX | Bloks.io';
var HISTORY_TYPES$1 = ['native', 'hyperion'];
var HYPERION_URL$1 = 'https://wax.eosrio.io';
var KEY_PREFIX$1 = 'EOS';
var LIGHT_API$1 = 'https://lightapi.eosamsterdam.net';
var NFTS_ENABLED$1 = true;
var PROVIDER_ENDPOINTS$1 = /*#__PURE__*/generateProviderEndpoints(CHAIN_ID$1, ACTIONS_ENDPOINTS$1);
var SIMPLEASSETS_API$1 = 'https://wax.api.simpleassets.io';
var VOTING_ENABLED$1 = true;
var constants$1 = {
  ACTIONS_ENDPOINTS: ACTIONS_ENDPOINTS$1,
  ALOHA_PROXY_URL: ALOHA_PROXY_URL$1,
  API_URL: API_URL$1,
  ATOMICASSETS_API: ATOMICASSETS_API$1,
  BLOKS_PROXY: BLOKS_PROXY$1,
  CHAIN: CHAIN$1,
  CHAIN_ID: CHAIN_ID$1,
  CHAIN_START_DATE: CHAIN_START_DATE$1,
  CORE_PRECISION: CORE_PRECISION$1,
  CORE_SYMBOL: CORE_SYMBOL$1,
  DEFAULT_ENDPOINTS: DEFAULT_ENDPOINTS$1,
  DISPLAY_CHAIN: DISPLAY_CHAIN$1,
  DOMAIN_TITLE: DOMAIN_TITLE$1,
  HISTORY_TYPES: HISTORY_TYPES$1,
  HYPERION_URL: HYPERION_URL$1,
  KEY_PREFIX: KEY_PREFIX$1,
  LIGHT_API: LIGHT_API$1,
  NFTS_ENABLED: NFTS_ENABLED$1,
  PROVIDER_ENDPOINTS: PROVIDER_ENDPOINTS$1,
  SIMPLEASSETS_API: SIMPLEASSETS_API$1,
  TRANSACTIONS_ENDPOINTS: TRANSACTIONS_ENDPOINTS$1,
  VOTING_ENABLED: VOTING_ENABLED$1
};

var DEFAULT_ENDPOINTS$2 = ['https://proton.greymass.com', 'https://proton.cryptolions.io', 'https://proton.eosusa.news', "https://frankfurt.protondata.net"];
var TRANSACTIONS_ENDPOINTS$2 = ['https://proton.greymass.com', 'https://proton.cryptolions.io'];
var ACTIONS_ENDPOINTS$2 = ['https://proton.greymass.com'];
var API_URL$2 = 'https://www.api.bloks.io/proton';
var ATOMICASSETS_API$2 = 'https://proton.api.atomicassets.io';
var CHAIN$2 = 'proton';
var CHAIN_ID$2 = '384da888112027f0321850a169f737c33e53b388aad48b5adace4bab97f437e0';
var CHAIN_START_DATE$2 = /*#__PURE__*/new Date('Apr 22, 2020');
var CORE_PRECISION$2 = 4;
var CORE_SYMBOL$2 = 'XPR';
var DISPLAY_CHAIN$2 = 'Proton';
var DOMAIN_TITLE$2 = 'ProtonScan';
var HISTORY_TYPES$2 = ['native', 'hyperion'];
var HYPERION_URL$2 = 'http://proton.pink.gg';
var KEY_PREFIX$2 = 'EOS';
var LIGHT_API$2 = 'https://lightapi.eosamsterdam.net';
var MAX_VOTES = 4;
var NFTS_ENABLED$2 = true;
var PROVIDER_ENDPOINTS$2 = /*#__PURE__*/generateProviderEndpoints(CHAIN_ID$2, ACTIONS_ENDPOINTS$2);
var VOTING_ENABLED$2 = true;
var constants$2 = {
  ACTIONS_ENDPOINTS: ACTIONS_ENDPOINTS$2,
  API_URL: API_URL$2,
  ATOMICASSETS_API: ATOMICASSETS_API$2,
  CHAIN: CHAIN$2,
  CHAIN_ID: CHAIN_ID$2,
  CHAIN_START_DATE: CHAIN_START_DATE$2,
  CORE_PRECISION: CORE_PRECISION$2,
  CORE_SYMBOL: CORE_SYMBOL$2,
  DEFAULT_ENDPOINTS: DEFAULT_ENDPOINTS$2,
  DISPLAY_CHAIN: DISPLAY_CHAIN$2,
  DOMAIN_TITLE: DOMAIN_TITLE$2,
  HISTORY_TYPES: HISTORY_TYPES$2,
  HYPERION_URL: HYPERION_URL$2,
  KEY_PREFIX: KEY_PREFIX$2,
  LIGHT_API: LIGHT_API$2,
  MAX_VOTES: MAX_VOTES,
  NFTS_ENABLED: NFTS_ENABLED$2,
  PROVIDER_ENDPOINTS: PROVIDER_ENDPOINTS$2,
  TRANSACTIONS_ENDPOINTS: TRANSACTIONS_ENDPOINTS$2,
  VOTING_ENABLED: VOTING_ENABLED$2
};

var DEFAULT_ENDPOINTS$3 = ['https://fio.greymass.com', 'https://fio.eossweden.org', 'https://fio.eosusa.news'];
var TRANSACTIONS_ENDPOINTS$3 = ['https://fio.greymass.com', 'https://fio.eossweden.org', 'https://fio.eosusa.news'];
var ACTIONS_ENDPOINTS$3 = ['https://fio.greymass.com', 'https://fio.eossweden.org', 'https://fio.eosusa.news'];
var ALOHA_PROXY_URL$2 = 'https://www.alohaeos.com/vote/proxy/fiomain';
var API_URL$3 = 'https://www.api.bloks.io/fio';
var CHAIN$3 = 'fio';
var CHAIN_ID$3 = '21dcae42c0182200e93f954a074011f9048a7624c6fe81d3c9541a614a88bd1c';
var CHAIN_START_DATE$3 = /*#__PURE__*/new Date('Mar 24, 2020');
var CORE_PRECISION$3 = 9;
var CORE_SYMBOL$3 = 'FIO';
var DISABLE_MEMO = true;
var DISPLAY_CHAIN$3 = 'FIO';
var DOMAIN_TITLE$3 = 'FIO Bloks.io';
var FIO_FEES_ACCOUNT = 'fees@bloks';
var HISTORY_TYPES$3 = ['native', 'hyperion'];
var HYPERION_URL$3 = 'https://fio.eossweden.org';
var KEY_PREFIX$3 = 'FIO';
var PROVIDER_ENDPOINTS$3 = /*#__PURE__*/generateProviderEndpoints(CHAIN_ID$3, ACTIONS_ENDPOINTS$3);
var VOTING_ENABLED$3 = true;
var constants$3 = {
  ACTIONS_ENDPOINTS: ACTIONS_ENDPOINTS$3,
  ALOHA_PROXY_URL: ALOHA_PROXY_URL$2,
  API_URL: API_URL$3,
  CHAIN: CHAIN$3,
  CHAIN_ID: CHAIN_ID$3,
  CHAIN_START_DATE: CHAIN_START_DATE$3,
  CORE_PRECISION: CORE_PRECISION$3,
  CORE_SYMBOL: CORE_SYMBOL$3,
  DEFAULT_ENDPOINTS: DEFAULT_ENDPOINTS$3,
  DISABLE_MEMO: DISABLE_MEMO,
  DISPLAY_CHAIN: DISPLAY_CHAIN$3,
  DOMAIN_TITLE: DOMAIN_TITLE$3,
  FIO_FEES_ACCOUNT: FIO_FEES_ACCOUNT,
  HISTORY_TYPES: HISTORY_TYPES$3,
  HYPERION_URL: HYPERION_URL$3,
  KEY_PREFIX: KEY_PREFIX$3,
  PROVIDER_ENDPOINTS: PROVIDER_ENDPOINTS$3,
  TRANSACTIONS_ENDPOINTS: TRANSACTIONS_ENDPOINTS$3,
  VOTING_ENABLED: VOTING_ENABLED$3
};

var DEFAULT_ENDPOINTS$4 = [];
var ACTIONS_ENDPOINTS$4 = [];
var TRANSACTIONS_ENDPOINTS$4 = [];
var API_URL$4 = '';
var CHAIN$4 = 'local';
var CHAIN_ID$4 = '';
var CHAIN_START_DATE$4 = undefined;
var CORE_PRECISION$4 = 4;
var CORE_SYMBOL$4 = 'EOS';
var DISPLAY_CHAIN$4 = 'Local';
var DOMAIN_TITLE$4 = 'Local Bloks.io';
var HISTORY_TYPES$4 = ['native'];
var KEY_PREFIX$4 = 'EOS';
var PROVIDER_ENDPOINTS$4 = [];
var VOTING_ENABLED$4 = true;
var constants$4 = {
  ACTIONS_ENDPOINTS: ACTIONS_ENDPOINTS$4,
  API_URL: API_URL$4,
  CHAIN: CHAIN$4,
  CHAIN_ID: CHAIN_ID$4,
  CHAIN_START_DATE: CHAIN_START_DATE$4,
  CORE_PRECISION: CORE_PRECISION$4,
  CORE_SYMBOL: CORE_SYMBOL$4,
  DEFAULT_ENDPOINTS: DEFAULT_ENDPOINTS$4,
  DISPLAY_CHAIN: DISPLAY_CHAIN$4,
  DOMAIN_TITLE: DOMAIN_TITLE$4,
  HISTORY_TYPES: HISTORY_TYPES$4,
  KEY_PREFIX: KEY_PREFIX$4,
  PROVIDER_ENDPOINTS: PROVIDER_ENDPOINTS$4,
  TRANSACTIONS_ENDPOINTS: TRANSACTIONS_ENDPOINTS$4,
  VOTING_ENABLED: VOTING_ENABLED$4
};

var DEFAULT_ENDPOINTS$5 = [// 'https://jungleapi.eossweden.org',
'https://api.jungle.alohaeos.com', 'https://jungle2.cryptolions.io', 'https://jungle.eosphere.io', 'https://eos-jungle.eosblocksmith.io'];
var ACTIONS_ENDPOINTS$5 = ['https://jungle.eossweden.org'];
var TRANSACTIONS_ENDPOINTS$5 = ['https://jungle.eossweden.org'];
var API_URL$5 = 'https://www.api.bloks.io/jungle';
var BLOKS_PROXY$2 = 'blokspartner';
var CHAIN$5 = 'jungle';
var CHAIN_ID$5 = 'e70aaab8997e1dfce58fbfac80cbbb8fecec7b99cf982a9444273cbc64c41473';
var CHAIN_START_DATE$5 = /*#__PURE__*/new Date('Nov 23, 2018');
var CORE_PRECISION$5 = 4;
var CORE_SYMBOL$5 = 'EOS';
var DISPLAY_CHAIN$5 = 'Jungle';
var DOMAIN_TITLE$5 = 'Jungle Bloks.io';
var HISTORY_TYPES$5 = ['hyperion', 'native'];
var HYPERION_URL$4 = 'https://jungle2.cryptolions.io';
var KEY_PREFIX$5 = 'EOS';
var LIGHT_API$3 = 'https://lightapi.eosgeneva.io';
var NFTS_ENABLED$3 = true;
var PROVIDER_ENDPOINTS$5 = /*#__PURE__*/generateProviderEndpoints(CHAIN_ID$5, ACTIONS_ENDPOINTS$5);
var REX_ENABLED$1 = true;
var VOTING_ENABLED$5 = true;
var constants$5 = {
  ACTIONS_ENDPOINTS: ACTIONS_ENDPOINTS$5,
  API_URL: API_URL$5,
  BLOKS_PROXY: BLOKS_PROXY$2,
  CHAIN: CHAIN$5,
  CHAIN_ID: CHAIN_ID$5,
  CHAIN_START_DATE: CHAIN_START_DATE$5,
  CORE_PRECISION: CORE_PRECISION$5,
  CORE_SYMBOL: CORE_SYMBOL$5,
  DEFAULT_ENDPOINTS: DEFAULT_ENDPOINTS$5,
  DISPLAY_CHAIN: DISPLAY_CHAIN$5,
  DOMAIN_TITLE: DOMAIN_TITLE$5,
  HISTORY_TYPES: HISTORY_TYPES$5,
  HYPERION_URL: HYPERION_URL$4,
  KEY_PREFIX: KEY_PREFIX$5,
  LIGHT_API: LIGHT_API$3,
  NFTS_ENABLED: NFTS_ENABLED$3,
  PROVIDER_ENDPOINTS: PROVIDER_ENDPOINTS$5,
  REX_ENABLED: REX_ENABLED$1,
  TRANSACTIONS_ENDPOINTS: TRANSACTIONS_ENDPOINTS$5,
  VOTING_ENABLED: VOTING_ENABLED$5
};

var DEFAULT_ENDPOINTS$6 = ['https://jungle3.cryptolions.io', 'https://api.jungle3.alohaeos.com', 'https://jungle3.eosusa.news'];
var ACTIONS_ENDPOINTS$6 = ['https://jungle3.cryptolions.io', 'https://jungle3.eosusa.news'];
var TRANSACTIONS_ENDPOINTS$6 = ['https://jungle3.cryptolions.io', 'https://jungle3.eosusa.news'];
var API_URL$6 = 'https://www.api.bloks.io/jungle3';
var CHAIN$6 = 'jungle3';
var CHAIN_ID$6 = '2a02a0053e5a8cf73a56ba0fda11e4d92e0238a4a2aa74fccf46d5a910746840';
var CHAIN_START_DATE$6 = /*#__PURE__*/new Date('Feb 19, 2020');
var CORE_PRECISION$6 = 4;
var CORE_SYMBOL$6 = 'EOS';
var DISPLAY_CHAIN$6 = 'Jungle 3';
var DOMAIN_TITLE$6 = 'Jungle 3 Bloks.io';
var HISTORY_TYPES$6 = ['hyperion'];
var HYPERION_URL$5 = 'https://jungle3.cryptolions.io';
var KEY_PREFIX$6 = 'EOS';
var PROVIDER_ENDPOINTS$6 = /*#__PURE__*/generateProviderEndpoints(CHAIN_ID$6, ACTIONS_ENDPOINTS$6);
var REX_ENABLED$2 = true;
var SUPPORTS_RENTBW$1 = true;
var VOTING_ENABLED$6 = true;
var constants$6 = {
  ACTIONS_ENDPOINTS: ACTIONS_ENDPOINTS$6,
  API_URL: API_URL$6,
  CHAIN: CHAIN$6,
  CHAIN_ID: CHAIN_ID$6,
  CHAIN_START_DATE: CHAIN_START_DATE$6,
  CORE_PRECISION: CORE_PRECISION$6,
  CORE_SYMBOL: CORE_SYMBOL$6,
  DEFAULT_ENDPOINTS: DEFAULT_ENDPOINTS$6,
  DISPLAY_CHAIN: DISPLAY_CHAIN$6,
  DOMAIN_TITLE: DOMAIN_TITLE$6,
  HISTORY_TYPES: HISTORY_TYPES$6,
  HYPERION_URL: HYPERION_URL$5,
  KEY_PREFIX: KEY_PREFIX$6,
  PROVIDER_ENDPOINTS: PROVIDER_ENDPOINTS$6,
  REX_ENABLED: REX_ENABLED$2,
  SUPPORTS_RENTBW: SUPPORTS_RENTBW$1,
  TRANSACTIONS_ENDPOINTS: TRANSACTIONS_ENDPOINTS$6,
  VOTING_ENABLED: VOTING_ENABLED$6
};

var DEFAULT_ENDPOINTS$7 = ['https://kylin.eosn.io'];
var ACTIONS_ENDPOINTS$7 = ['https://kylin.eosn.io'];
var TRANSACTIONS_ENDPOINTS$7 = ['https://kylin.eosn.io'];
var API_URL$7 = 'https://www.api.bloks.io/kylin';
var BLOKS_PROXY$3 = 'blokspartner';
var CHAIN$7 = 'kylin';
var CHAIN_ID$7 = '5fff1dae8dc8e2fc4d5b23b2c7665c97f9e9d8edf2b6485a86ba311c25639191';
var CHAIN_START_DATE$7 = /*#__PURE__*/new Date('Jul 10, 2018');
var CORE_PRECISION$7 = 4;
var CORE_SYMBOL$7 = 'EOS';
var DISPLAY_CHAIN$7 = 'Kylin';
var DOMAIN_TITLE$7 = 'Kylin Bloks.io';
var HISTORY_TYPES$7 = ['hyperion', 'native'];
var HYPERION_URL$6 = 'https://kylin.eosusa.news';
var KEY_PREFIX$7 = 'EOS';
var PROVIDER_ENDPOINTS$7 = /*#__PURE__*/generateProviderEndpoints(CHAIN_ID$7, ACTIONS_ENDPOINTS$7);
var VOTING_ENABLED$7 = true;
var constants$7 = {
  ACTIONS_ENDPOINTS: ACTIONS_ENDPOINTS$7,
  API_URL: API_URL$7,
  BLOKS_PROXY: BLOKS_PROXY$3,
  CHAIN: CHAIN$7,
  CHAIN_ID: CHAIN_ID$7,
  CHAIN_START_DATE: CHAIN_START_DATE$7,
  CORE_PRECISION: CORE_PRECISION$7,
  CORE_SYMBOL: CORE_SYMBOL$7,
  DEFAULT_ENDPOINTS: DEFAULT_ENDPOINTS$7,
  DISPLAY_CHAIN: DISPLAY_CHAIN$7,
  DOMAIN_TITLE: DOMAIN_TITLE$7,
  HISTORY_TYPES: HISTORY_TYPES$7,
  HYPERION_URL: HYPERION_URL$6,
  KEY_PREFIX: KEY_PREFIX$7,
  PROVIDER_ENDPOINTS: PROVIDER_ENDPOINTS$7,
  TRANSACTIONS_ENDPOINTS: TRANSACTIONS_ENDPOINTS$7,
  VOTING_ENABLED: VOTING_ENABLED$7
};

var DEFAULT_ENDPOINTS$8 = ['https://www.api.bloks.io/eos-test-node'];
var ACTIONS_ENDPOINTS$8 = ['https://www.api.bloks.io/eos-test-node'];
var TRANSACTIONS_ENDPOINTS$8 = ['https://www.api.bloks.io/eos-test-node'];
var API_URL$8 = 'https://www.api.bloks.io/eos-test';
var CHAIN$8 = 'eos-test';
var CHAIN_ID$8 = '0db13ab9b321c37c0ba8481cb4681c2788b622c3abfd1f12f0e5353d44ba6e72';
var CHAIN_START_DATE$8 = /*#__PURE__*/new Date('2020-01-14');
var CORE_PRECISION$8 = 4;
var CORE_SYMBOL$8 = 'TNT';
var DISPLAY_CHAIN$8 = 'EOSIO Test';
var DOMAIN_TITLE$8 = 'Bloks.io';
var HISTORY_TYPES$8 = ['native'];
var KEY_PREFIX$8 = 'EOS';
var PROVIDER_ENDPOINTS$8 = /*#__PURE__*/generateProviderEndpoints(CHAIN_ID$8, ACTIONS_ENDPOINTS$8);
var constants$8 = {
  DEFAULT_ENDPOINTS: DEFAULT_ENDPOINTS$8,
  ACTIONS_ENDPOINTS: ACTIONS_ENDPOINTS$8,
  TRANSACTIONS_ENDPOINTS: TRANSACTIONS_ENDPOINTS$8,
  API_URL: API_URL$8,
  PROVIDER_ENDPOINTS: PROVIDER_ENDPOINTS$8,
  CORE_SYMBOL: CORE_SYMBOL$8,
  CHAIN: CHAIN$8,
  DISPLAY_CHAIN: DISPLAY_CHAIN$8,
  HISTORY_TYPES: HISTORY_TYPES$8,
  CHAIN_ID: CHAIN_ID$8,
  DOMAIN_TITLE: DOMAIN_TITLE$8,
  CHAIN_START_DATE: CHAIN_START_DATE$8,
  KEY_PREFIX: KEY_PREFIX$8,
  CORE_PRECISION: CORE_PRECISION$8
};

var DEFAULT_ENDPOINTS$9 = ['https://protontestnet.greymass.com', 'https://proton-testnet.eoscafeblock.com', 'https://testnet.protonchain.com', 'https://test.proton.eosusa.news'];
var TRANSACTIONS_ENDPOINTS$9 = ['https://protontestnet.greymass.com', 'https://testnet.protonchain.com', 'https://test.proton.eosusa.news'];
var ACTIONS_ENDPOINTS$9 = ['https://protontestnet.greymass.com', 'https://testnet.protonchain.com', 'https://test.proton.eosusa.news'];
var API_URL$9 = 'https://www.api.bloks.io/proton-test';
var ATOMICASSETS_API$3 = 'https://test.proton.api.atomicassets.io';
var CHAIN$9 = 'proton-test';
var CHAIN_ID$9 = '71ee83bcf52142d61019d95f9cc5427ba6a0d7ff8accd9e2088ae2abeaf3d3dd';
var CHAIN_START_DATE$9 = /*#__PURE__*/new Date('April 3, 2020');
var CORE_PRECISION$9 = 4;
var CORE_SYMBOL$9 = 'XPR';
var DISPLAY_CHAIN$9 = 'Proton-T';
var DOMAIN_TITLE$9 = 'Proton Testnet';
var HISTORY_TYPES$9 = ['hyperion', 'native'];
var HYPERION_URL$7 = 'https://testnet.proton.pink.gg';
var KEY_PREFIX$9 = 'EOS';
var MAX_VOTES$1 = 4;
var PROVIDER_ENDPOINTS$9 = /*#__PURE__*/generateProviderEndpoints(CHAIN_ID$9, ACTIONS_ENDPOINTS$9);
var VOTING_ENABLED$8 = true;
var constants$9 = {
  ACTIONS_ENDPOINTS: ACTIONS_ENDPOINTS$9,
  API_URL: API_URL$9,
  ATOMICASSETS_API: ATOMICASSETS_API$3,
  CHAIN: CHAIN$9,
  CHAIN_ID: CHAIN_ID$9,
  CHAIN_START_DATE: CHAIN_START_DATE$9,
  CORE_PRECISION: CORE_PRECISION$9,
  CORE_SYMBOL: CORE_SYMBOL$9,
  DEFAULT_ENDPOINTS: DEFAULT_ENDPOINTS$9,
  DISPLAY_CHAIN: DISPLAY_CHAIN$9,
  DOMAIN_TITLE: DOMAIN_TITLE$9,
  HISTORY_TYPES: HISTORY_TYPES$9,
  HYPERION_URL: HYPERION_URL$7,
  KEY_PREFIX: KEY_PREFIX$9,
  MAX_VOTES: MAX_VOTES$1,
  PROVIDER_ENDPOINTS: PROVIDER_ENDPOINTS$9,
  TRANSACTIONS_ENDPOINTS: TRANSACTIONS_ENDPOINTS$9,
  VOTING_ENABLED: VOTING_ENABLED$8
};

var DEFAULT_ENDPOINTS$a = ['https://testnet.wax.eosdetroit.io', 'https://testnet.wax.pink.gg', 'https://testnet.waxsweden.org'];
var TRANSACTIONS_ENDPOINTS$a = ['https://testnet.wax.eosdetroit.io', 'https://testnet.wax.pink.gg', 'https://testnet.waxsweden.org'];
var ACTIONS_ENDPOINTS$a = ['https://testnet.wax.eosdetroit.io', 'https://testnet.wax.pink.gg', 'https://testnet.waxsweden.org'];
var API_URL$a = 'https://www.api.bloks.io/wax-test';
var ATOMICASSETS_API$4 = 'https://test.wax.api.atomicassets.io';
var CHAIN$a = 'wax-test';
var CHAIN_ID$a = 'f16b1833c747c43682f4386fca9cbb327929334a762755ebec17f6f23c9b8a12';
var CHAIN_START_DATE$a = /*#__PURE__*/new Date('Dec 5, 2019');
var CORE_PRECISION$a = 8;
var CORE_SYMBOL$a = 'WAX';
var DISPLAY_CHAIN$a = 'WAX-T';
var DOMAIN_TITLE$a = 'WAX Testnet Bloks.io';
var HISTORY_TYPES$a = ['native', 'hyperion'];
var HYPERION_URL$8 = 'https://testnet.waxsweden.org';
var KEY_PREFIX$a = 'EOS';
var LIGHT_API$4 = 'https://testnet-lightapi.eosams.xeos.me';
var PROVIDER_ENDPOINTS$a = /*#__PURE__*/generateProviderEndpoints(CHAIN_ID$a, ACTIONS_ENDPOINTS$a);
var constants$a = {
  ACTIONS_ENDPOINTS: ACTIONS_ENDPOINTS$a,
  API_URL: API_URL$a,
  ATOMICASSETS_API: ATOMICASSETS_API$4,
  CHAIN: CHAIN$a,
  CHAIN_ID: CHAIN_ID$a,
  CHAIN_START_DATE: CHAIN_START_DATE$a,
  CORE_PRECISION: CORE_PRECISION$a,
  CORE_SYMBOL: CORE_SYMBOL$a,
  DEFAULT_ENDPOINTS: DEFAULT_ENDPOINTS$a,
  DISPLAY_CHAIN: DISPLAY_CHAIN$a,
  DOMAIN_TITLE: DOMAIN_TITLE$a,
  HISTORY_TYPES: HISTORY_TYPES$a,
  HYPERION_URL: HYPERION_URL$8,
  KEY_PREFIX: KEY_PREFIX$a,
  LIGHT_API: LIGHT_API$4,
  PROVIDER_ENDPOINTS: PROVIDER_ENDPOINTS$a,
  TRANSACTIONS_ENDPOINTS: TRANSACTIONS_ENDPOINTS$a
};

var DEFAULT_ENDPOINTS$b = ['https://fiotestnet.greymass.com', 'https://test.fio.eosusa.news'];
var TRANSACTIONS_ENDPOINTS$b = ['https://fiotestnet.greymass.com', 'https://test.fio.eosusa.news'];
var ACTIONS_ENDPOINTS$b = ['https://fiotestnet.greymass.com', 'https://test.fio.eosusa.news'];
var API_URL$b = 'https://www.api.bloks.io/fio-test';
var CHAIN$b = 'fio-test';
var CHAIN_ID$b = 'b20901380af44ef59c5918439a1f9a41d83669020319a80574b804a5f95cbd7e';
var CHAIN_START_DATE$b = /*#__PURE__*/new Date('Mar 10, 2020');
var CORE_PRECISION$b = 9;
var CORE_SYMBOL$b = 'FIO';
var DISABLE_MEMO$1 = true;
var DISPLAY_CHAIN$b = 'FIO Test';
var DOMAIN_TITLE$b = 'FIO Test Bloks.io';
var HISTORY_TYPES$b = ['native', 'hyperion'];
var HYPERION_URL$9 = 'https://test.fio.eosusa.news';
var KEY_PREFIX$b = 'FIO';
var PROVIDER_ENDPOINTS$b = /*#__PURE__*/generateProviderEndpoints(CHAIN_ID$b, ACTIONS_ENDPOINTS$b);
var VOTING_ENABLED$9 = true;
var constants$b = {
  ACTIONS_ENDPOINTS: ACTIONS_ENDPOINTS$b,
  API_URL: API_URL$b,
  CHAIN: CHAIN$b,
  CHAIN_ID: CHAIN_ID$b,
  CHAIN_START_DATE: CHAIN_START_DATE$b,
  CORE_PRECISION: CORE_PRECISION$b,
  CORE_SYMBOL: CORE_SYMBOL$b,
  DEFAULT_ENDPOINTS: DEFAULT_ENDPOINTS$b,
  DISABLE_MEMO: DISABLE_MEMO$1,
  DISPLAY_CHAIN: DISPLAY_CHAIN$b,
  DOMAIN_TITLE: DOMAIN_TITLE$b,
  HISTORY_TYPES: HISTORY_TYPES$b,
  HYPERION_URL: HYPERION_URL$9,
  KEY_PREFIX: KEY_PREFIX$b,
  PROVIDER_ENDPOINTS: PROVIDER_ENDPOINTS$b,
  TRANSACTIONS_ENDPOINTS: TRANSACTIONS_ENDPOINTS$b,
  VOTING_ENABLED: VOTING_ENABLED$9
};

var _chainToNetworkConsta;

var chainToNetworkConstantsMap = (_chainToNetworkConsta = {
  eos: constants,
  wax: constants$1,
  proton: constants$2,
  local: constants$4,
  jungle: constants$5,
  jungle3: constants$6,
  kylin: constants$7,
  fio: constants$3
}, _chainToNetworkConsta['eos-test'] = constants$8, _chainToNetworkConsta['proton-test'] = constants$9, _chainToNetworkConsta['wax-test'] = constants$a, _chainToNetworkConsta['fio-test'] = constants$b, _chainToNetworkConsta);
var Constants = /*#__PURE__*/function () {
  function Constants() {
    if (!!Constants.instance) {
      return Constants.instance;
    }
  }

  var _proto = Constants.prototype;

  _proto.initialize = function initialize(chain) {
    if (!chain || !chainToNetworkConstantsMap[chain]) {
      chain = DEFAULT_CHAIN;
    }

    this.setNetwork(chain);
    this.setCommon(chain);
  };

  _proto.setNetwork = function setNetwork(chain) {
    // const networkConstants = await import(`'./networks/${chain}`)
    var networkConstants = chainToNetworkConstantsMap[chain];
    this.setConstants(networkConstants);
    this.setContract(chain, networkConstants.SYSTEM_DOMAIN);
  };

  _proto.setCommon = function setCommon(chain) {
    var commonConstants = getCommonConstants(chain);
    this.setConstants(commonConstants);
  };

  _proto.setContract = function setContract(chain, systemDomain) {
    if (systemDomain === void 0) {
      systemDomain = DEFAULT_SYSTEM_DOMAIN;
    }

    var contractConstants = getContractConstants(chain, systemDomain);
    this.setConstants(contractConstants);
  };

  _proto.setConstants = function setConstants(newConstants) {
    for (var _i = 0, _Object$entries = Object.entries(newConstants); _i < _Object$entries.length; _i++) {
      var _Object$entries$_i = _Object$entries[_i],
          key = _Object$entries$_i[0],
          value = _Object$entries$_i[1];
      this[key] = value;
    }
  };

  return Constants;
}();
var constants$c = /*#__PURE__*/new Constants();


//# sourceMappingURL=constants.esm.js.map


/***/ }),

/***/ "./node_modules/@bloks/numbers/dist/index.js":
/*!***************************************************!*\
  !*** ./node_modules/@bloks/numbers/dist/index.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";



if (false) {} else {
  module.exports = __webpack_require__(/*! ./numbers.cjs.development.js */ "./node_modules/@bloks/numbers/dist/numbers.cjs.development.js")
}


/***/ }),

/***/ "./node_modules/@bloks/numbers/dist/numbers.cjs.development.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@bloks/numbers/dist/numbers.cjs.development.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var bignumber_js = __webpack_require__(/*! bignumber.js */ "./node_modules/bignumber.js/bignumber.js");
var numbro = _interopDefault(__webpack_require__(/*! @jafri/numbro */ "./node_modules/@jafri/numbro/dist/numbro.min.js"));
var dayjs = _interopDefault(__webpack_require__(/*! dayjs */ "./node_modules/dayjs/dayjs.min.js"));
var relativeTimePlugin = _interopDefault(__webpack_require__(/*! dayjs/plugin/relativeTime */ "./node_modules/dayjs/plugin/relativeTime.js"));
var utcPlugin = _interopDefault(__webpack_require__(/*! dayjs/plugin/utc */ "./node_modules/dayjs/plugin/utc.js"));
var timezonePlugin = _interopDefault(__webpack_require__(/*! dayjs/plugin/timezone */ "./node_modules/dayjs/plugin/timezone.js"));
var advancedFormatPlugin = _interopDefault(__webpack_require__(/*! dayjs/plugin/advancedFormat */ "./node_modules/dayjs/plugin/advancedFormat.js"));

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it) return (it = it.call(o)).next.bind(it);

  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it) o = it;
    var i = 0;
    return function () {
      if (i >= o.length) return {
        done: true
      };
      return {
        done: false,
        value: o[i++]
      };
    };
  }

  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

var assert = function assert(isTrue, error) {
  if (isTrue) {
    return;
  } else {
    throw new Error(error);
  }
};

(function (Maths) {
  var Operations;

  (function (Operations) {
    Operations["PLUS"] = "plus";
    Operations["MULTIPLY"] = "multipliedBy";
    Operations["DIVIDE"] = "dividedBy";
    Operations["MINUS"] = "minus";
  })(Operations = Maths.Operations || (Maths.Operations = {}));
})(exports.Maths || (exports.Maths = {}));

var Asset = /*#__PURE__*/function () {
  function Asset(asset) {
    this.symbol = new Symbol$1({
      code: asset.code,
      precision: asset.precision
    });
    this.amount = new bignumber_js.BigNumber(asset.amount);
  }

  Asset.fromString = function fromString(asset) {
    var _asset$split = asset.split(' '),
        amount = _asset$split[0],
        code = _asset$split[1];

    var precision = (amount.split('.')[1] || []).length;
    return new Asset({
      code: code,
      precision: precision,
      amount: new bignumber_js.BigNumber(amount)
    });
  };

  Asset.fromSymbol = function fromSymbol(_ref) {
    var symbol = _ref.symbol,
        amount = _ref.amount;

    if (!(symbol instanceof Symbol$1)) {
      throw new Error('Invalid symbol');
    }

    return new Asset({
      code: symbol.code,
      precision: symbol.precision,
      amount: amount
    });
  };

  var _proto = Asset.prototype;

  _proto.isEqualTo = function isEqualTo(asset) {
    return this.isLooselyEqualTo(asset) && this.amount == asset.amount;
  };

  _proto.isLooselyEqualTo = function isLooselyEqualTo(asset) {
    return this.symbol.isEqualTo(asset.symbol);
  };

  _proto.toString = function toString() {
    return new bignumber_js.BigNumber(this.amount).toFixed(this.symbol.precision, bignumber_js.BigNumber.ROUND_DOWN) + " " + this.symbol.code;
  };

  _proto.modifyAmount = function modifyAmount(x, method) {
    var amount = new bignumber_js.BigNumber(0);

    if (typeof x === "number" || bignumber_js.BigNumber.isBigNumber(x)) {
      amount = new bignumber_js.BigNumber(x);
    }

    if (x instanceof Asset) {
      assert(this.isLooselyEqualTo(x), "invalid symbol");
      amount = new bignumber_js.BigNumber(x.amount);
    }

    return Asset.fromSymbol({
      symbol: this.symbol,
      amount: this.amount[method](amount)
    });
  };

  _proto.plus = function plus(x) {
    return this.modifyAmount(x, exports.Maths.Operations.PLUS);
  };

  _proto.minus = function minus(x) {
    return this.modifyAmount(x, exports.Maths.Operations.MINUS);
  };

  _proto.multipliedBy = function multipliedBy(x) {
    return this.modifyAmount(x, exports.Maths.Operations.MULTIPLY);
  };

  _proto.dividedBy = function dividedBy(x) {
    return this.modifyAmount(x, exports.Maths.Operations.DIVIDE);
  };

  _createClass(Asset, [{
    key: "integerAmount",
    get: function get() {
      var factor = Math.pow(10, this.symbol.precision);
      return this.amount.multipliedBy(factor);
    }
  }]);

  return Asset;
}();
var ExtendedAsset = /*#__PURE__*/function () {
  function ExtendedAsset(extendedAsset) {
    if (!(extendedAsset.quantity instanceof Asset)) {
      throw new Error('Invalid quantity');
    }

    this.quantity = extendedAsset.quantity;
    this.contract = extendedAsset.contract;
  }

  ExtendedAsset.fromRaw = function fromRaw(_ref2) {
    var quantity = _ref2.quantity,
        contract = _ref2.contract;
    return new ExtendedAsset({
      quantity: Asset.fromString(quantity),
      contract: contract
    });
  };

  ExtendedAsset.fromExtendedSymbol = function fromExtendedSymbol(symbol, amount) {
    if (!(symbol instanceof ExtendedSymbol)) {
      throw new Error('Invalid extended symbol');
    }

    return new ExtendedAsset({
      quantity: Asset.fromSymbol({
        symbol: symbol.sym,
        amount: amount
      }),
      contract: symbol.contract
    });
  };

  var _proto2 = ExtendedAsset.prototype;

  _proto2.isEqualTo = function isEqualTo(extendedAsset) {
    return this.contract === extendedAsset.contract && this.quantity.isEqualTo(extendedAsset.quantity);
  };

  _proto2.isLooselyEqualTo = function isLooselyEqualTo(extendedAsset) {
    return this.contract === extendedAsset.contract && this.quantity.isLooselyEqualTo(extendedAsset.quantity);
  };

  _proto2.toString = function toString() {
    return this.quantity.toString() + "@" + this.contract;
  };

  _proto2.toExtendedSymbol = function toExtendedSymbol() {
    return new ExtendedSymbol(this.quantity.symbol, this.contract);
  };

  _proto2.modifyAmount = function modifyAmount(x, method) {
    var amount = new bignumber_js.BigNumber(0);

    if (x instanceof ExtendedAsset) {
      assert(this.isLooselyEqualTo(x), "invalid contract or symbol");
      amount = x.quantity;
    } else {
      amount = x;
    }

    return new ExtendedAsset({
      contract: this.contract,
      quantity: this.quantity.modifyAmount(amount, method)
    });
  };

  _proto2.plus = function plus(x) {
    return this.modifyAmount(x, exports.Maths.Operations.PLUS);
  };

  _proto2.minus = function minus(x) {
    return this.modifyAmount(x, exports.Maths.Operations.MINUS);
  };

  _proto2.multipliedBy = function multipliedBy(x) {
    return this.modifyAmount(x, exports.Maths.Operations.MULTIPLY);
  };

  _proto2.dividedBy = function dividedBy(x) {
    return this.modifyAmount(x, exports.Maths.Operations.DIVIDE);
  };

  return ExtendedAsset;
}();
var Symbol$1 = /*#__PURE__*/function () {
  function Symbol(symbol) {
    this.precision = symbol.precision;
    this.code = symbol.code;
  }

  Symbol.fromString = function fromString(symbol) {
    var _symbol$split = symbol.split(','),
        precision = _symbol$split[0],
        code = _symbol$split[1];

    return new Symbol({
      precision: +precision,
      code: code
    });
  };

  var _proto3 = Symbol.prototype;

  _proto3.isEqualTo = function isEqualTo(symbol) {
    return this.code === symbol.code && this.precision === symbol.precision;
  };

  _proto3.toString = function toString() {
    return this.precision + "," + this.code;
  };

  return Symbol;
}();
var ExtendedSymbol = /*#__PURE__*/function () {
  function ExtendedSymbol(sym, contract) {
    this.sym = sym;
    this.contract = contract;
  }

  ExtendedSymbol.fromRaw = function fromRaw(_ref3) {
    var sym = _ref3.sym,
        contract = _ref3.contract;
    return new ExtendedSymbol(Symbol$1.fromString(sym), contract);
  };

  var _proto4 = ExtendedSymbol.prototype;

  _proto4.isEqualTo = function isEqualTo(extendedSymbol) {
    return this.sym.isEqualTo(extendedSymbol.sym) && this.contract === extendedSymbol.contract;
  };

  _proto4.toString = function toString() {
    return this.sym.toString() + "@" + this.contract;
  };

  return ExtendedSymbol;
}();

var currencyMap = {
  // Fiat
  GBP: {
    symbol: '£',
    precision: 2
  },
  EUR: {
    symbol: '€',
    precision: 2
  },
  JPY: {
    symbol: '¥',
    precision: 0
  },
  CAD: {
    symbol: 'CA$',
    precision: 2
  },
  USD: {
    symbol: '$',
    precision: 2
  },
  INR: {
    symbol: '₹',
    precision: 2
  },
  CNY: {
    symbol: 'CN¥',
    precision: 2
  },
  HKD: {
    symbol: 'HK$',
    precision: 2
  },
  KRW: {
    symbol: '₩',
    precision: 0
  },
  AUD: {
    symbol: 'AUD$',
    precision: 2
  },
  SAR: {
    symbol: 'SR',
    precision: 2
  },
  // Crypto
  ETH: {
    symbol: 'Ξ',
    precision: 4
  },
  BTC: {
    symbol: '₿',
    precision: 8
  },
  EOS: {
    symbol: 'EOS',
    precision: 4
  }
};
var assetFormat = {
  decimalSeparator: '.',
  groupSeparator: ',',
  groupSize: 3
};

function toBN(number) {
  return new bignumber_js.BigNumber(number);
}
function numberToAmount(number, precision, round) {
  if (round === void 0) {
    round = bignumber_js.BigNumber.ROUND_DOWN;
  }

  if (number === undefined || typeof number === "number" && isNaN(number)) {
    number = 0;
  }

  return new bignumber_js.BigNumber(number).toFixed(precision, round);
}
function numberToAmountFormatted(number, precision, round) {
  if (round === void 0) {
    round = bignumber_js.BigNumber.ROUND_DOWN;
  }

  if (number === undefined || isNaN(number)) {
    number = 0;
  }

  return new bignumber_js.BigNumber(number).toFormat(precision, round, assetFormat);
}
function calculatePercentage(balance, percentage, precision) {
  var _final = new bignumber_js.BigNumber(balance).multipliedBy(percentage);

  return numberToAmount(_final, precision, bignumber_js.BigNumber.ROUND_DOWN);
}
function eosDisplayFormatting(value, symbol, precision) {
  return numberToAmountFormatted(value, precision) + " " + symbol;
}
function numberToEos(number, symbol, precision) {
  return numberToAmount(number, precision) + " " + symbol;
}
function numberToEosRoundUp(number, symbol, precision) {
  return numberToAmount(number, precision, bignumber_js.BigNumber.ROUND_UP) + " " + symbol;
}
function parseRex(rex) {
  return new bignumber_js.BigNumber(rex).dividedBy(10000);
}
/**
 * Converts USD to { symbol: "USD", precision: 4 }
 * @param {*} currency
 */

function currencyToSymbol(currency) {
  return currencyMap[currency];
}
/**
 * Converts "1000.0000 EOS" to { amount: 1000, symbol: { code: "EOS", precision: 4 }}
 * @param {*} quantity
 */

function split(quantity) {
  var _quantity$split = quantity.split(' '),
      amount = _quantity$split[0],
      code = _quantity$split[1];

  var precision = (amount.split('.')[1] || []).length;
  return {
    amount: +amount,
    symbol: {
      code: code,
      precision: precision
    }
  };
}
function toNumbro(number) {
  return numbro(number);
}
/**
 * Converts 1000 to "1000.0000 EOS"
 * @param {*} asset
 */

function numberToAsset(number, symbol, precision, trimMantissa) {
  if (trimMantissa === void 0) {
    trimMantissa = false;
  }

  if (number === undefined || isNaN(number)) {
    number = 0;
  }

  var amount = numbro(number).format({
    thousandSeparated: false,
    mantissa: precision,
    trimMantissa: trimMantissa
  });
  return amount + " " + symbol;
}
/**
 * DISPLAY FUNCTIONS
 */

/**
 * Converts 1000 to 1,000
 * @param {*} number
 */

function displayNumber(number, trimMantissa) {
  if (trimMantissa === void 0) {
    trimMantissa = false;
  }

  if (number === undefined || isNaN(number)) {
    number = 0;
  }

  return numbro(number).format({
    thousandSeparated: true,
    trimMantissa: trimMantissa
  });
}
/**
 * Converts 1000 to $1,000 USD
 * @param {*} number
 */

function displayNumberAsCurrency(_ref) {
  var number = _ref.number,
      precision = _ref.precision,
      _ref$average = _ref.average,
      average = _ref$average === void 0 ? false : _ref$average,
      _ref$lowPrecision = _ref.lowPrecision,
      lowPrecision = _ref$lowPrecision === void 0 ? true : _ref$lowPrecision,
      _ref$trimMantissa = _ref.trimMantissa,
      trimMantissa = _ref$trimMantissa === void 0 ? false : _ref$trimMantissa,
      _ref$currency = _ref.currency,
      currency = _ref$currency === void 0 ? 'USD' : _ref$currency;

  if (!currencyMap[currency]) {
    throw new Error('Unsupported currency');
  }

  if (number === undefined || isNaN(number)) {
    number = 0;
  }

  var _currencyMap$currency = currencyMap[currency],
      symbol = _currencyMap$currency.symbol,
      defaultPrecision = _currencyMap$currency.precision;
  var format = {
    thousandSeparated: true,
    mantissa: precision !== undefined ? precision : defaultPrecision,
    trimMantissa: trimMantissa,
    average: average
  };

  if (average) {
    format.lowPrecision = lowPrecision;
  }

  var formattedNumber = numbro(number).format(format);
  return "" + symbol + formattedNumber;
}
/**
 * Converts "1000.0000 EOS" to "1,000.0000 EOS"
 * @param {*} asset
 */

function displayAsset(asset) {
  var _split = split(asset),
      amount = _split.amount,
      code = _split.symbol.code;

  return displayNumber(amount) + " " + code;
}
/**
 * Converts 1000 to 1,000.0000
 * @param {*} number
 */

function displayNumberAsAmount(number, precision, trimMantissa) {
  if (trimMantissa === void 0) {
    trimMantissa = false;
  }

  if (number === undefined || isNaN(number)) {
    number = 0;
  }

  return numbro(number).format({
    thousandSeparated: true,
    mantissa: precision,
    trimMantissa: trimMantissa
  });
}
/**
 * Converts 1000 to "1,000.0000 EOS"
 * @param {*} number
 */

function displayNumberAsAsset(number, symbol, precision, trimMantissa) {
  if (trimMantissa === void 0) {
    trimMantissa = false;
  }

  if (number === undefined || isNaN(number)) {
    number = 0;
  }

  var amount = numbro(number).format({
    thousandSeparated: true,
    mantissa: precision,
    trimMantissa: trimMantissa
  });
  return amount + " " + symbol;
}
/**
 * Converts 10000000 to "1,000.0000 EOS"
 * @param {*} number
 */

function displayRawNumberAsAsset(number, symbol, precision, trimMantissa) {
  if (trimMantissa === void 0) {
    trimMantissa = false;
  }

  return displayNumberAsAsset(number / Math.pow(10, precision), symbol, precision, trimMantissa);
}

bignumber_js.BigNumber.set({
  ROUNDING_MODE: 1
});
function add() {
  var start = new bignumber_js.BigNumber(0);

  for (var _len = arguments.length, numbers = new Array(_len), _key = 0; _key < _len; _key++) {
    numbers[_key] = arguments[_key];
  }

  if (numbers.length) {
    for (var _iterator = _createForOfIteratorHelperLoose(numbers), _step; !(_step = _iterator()).done;) {
      var number = _step.value;
      start = start.plus(number);
    }
  }

  return start;
}
function substract(a, b) {
  return new bignumber_js.BigNumber(a).minus(b);
}
function multiply(a, b) {
  return new bignumber_js.BigNumber(a).multipliedBy(b);
}
function divide(a, b) {
  return new bignumber_js.BigNumber(a).dividedBy(b);
}

function bytesToKB(bytes) {
  if (bytes === void 0) {
    bytes = 0;
  }

  return numbro(bytes / 1024).format({
    thousandSeparated: false,
    mantissa: 2
  });
}
function parseNetAndRam(bytes) {
  var parsedValue = 0;
  var parsedText = '';

  if (bytes < 1024) {
    parsedValue = bytes;
    parsedText = 'Bytes';
  } else if (bytes < 1048576) {
    parsedValue = bytes / 1024;
    parsedText = 'KB';
  } else if (bytes < 1073741824) {
    parsedValue = bytes / 1048576;
    parsedText = 'MB';
  } else if (bytes < 1099511627776) {
    parsedValue = bytes / 1073741824;
    parsedText = 'GB';
  } else if (bytes < 1125899906842624) {
    parsedValue = bytes / 1099511627776;
    parsedText = 'TB';
  }

  return displayNumberAsAmount(parsedValue, 2, true) + " " + parsedText;
}
function parseCpu(us) {
  var parsedValue = 0;
  var parsedText = '';

  if (us < 1000) {
    parsedValue = us;
    parsedText = 'µs';
  } else if (us < 1000000) {
    parsedValue = us / 1000;
    parsedText = 'ms';
  } else if (us < 60000000) {
    parsedValue = us / 1000000;
    parsedText = 's';
  } else if (us < 3600000000) {
    parsedValue = us / 60000000;
    parsedText = 'min';
  } else if (us < 3600000000000) {
    parsedValue = us / 3600000000;
    parsedText = 'hours';
  } else {
    parsedValue = us / 86400000000;
    parsedText = 'days';
  }

  return displayNumberAsAmount(parsedValue, 2, true) + " " + parsedText;
}

dayjs.extend(relativeTimePlugin);
dayjs.extend(utcPlugin);
dayjs.extend(timezonePlugin);
dayjs.extend(advancedFormatPlugin);
var COMMON_DATE_FORMAT = 'MMM-DD-YYYY, hh:mm:ss A';
/**
 * Time utilities
 */

function time(date) {
  return dayjs(date);
}
function utcTime(date) {
  return dayjs(date).utc();
}
function utcTimeToLocal(date) {
  return dayjs(date).local();
}
function unixTime(unixTimestamp) {
  return dayjs.unix(unixTimestamp);
}
function formatDate(date, format) {
  if (format === void 0) {
    format = COMMON_DATE_FORMAT;
  }

  return dayjs(date).format(format);
}
function formatDateLocal(date, format) {
  if (format === void 0) {
    format = COMMON_DATE_FORMAT;
  }

  return dayjs(date).utc().format(format);
}
function timestampToDate(timestamp) {
  return new Date(timestamp);
}
function utcTimestampToDate(timestamp) {
  timestamp = timestamp.slice(-1) === 'Z' ? timestamp : timestamp + 'Z';
  return new Date(timestamp);
}
function timestampFromNow(timestamp) {
  return time(timestamp).fromNow();
}
function utcTimestampFromNow(timestamp) {
  timestamp = timestamp.slice(-1) === 'Z' ? timestamp : timestamp + 'Z';
  return time(timestamp).fromNow();
}
function parseTimestamp(timestamp, format) {
  if (format === void 0) {
    format = COMMON_DATE_FORMAT;
  }

  return formatDate(timestampToDate(timestamp), format);
}
function parseUtcTimestamp(timestamp, format) {
  if (format === void 0) {
    format = COMMON_DATE_FORMAT;
  }

  return formatDate(utcTimestampToDate(timestamp), format);
}
function inFuture(date, utc) {
  if (utc === void 0) {
    utc = false;
  }

  return utc ? utcTime(date).isAfter(utcTime()) : time(date).isAfter(time());
}
function inPast(date, utc) {
  if (utc === void 0) {
    utc = false;
  }

  return utc ? utcTime(date).isBefore(utcTime()) : time(date).isBefore(time());
}
function isSameDay(start, end) {
  if (end === void 0) {
    end = time();
  }

  return dayjs(start).isSame(dayjs(end), 'day');
} // Seconds till now if second param empty

function secondsFrom(start, end) {
  if (end === void 0) {
    end = time();
  }

  return dayjs(start).diff(dayjs(end), 'second');
}
function millisecondsFrom(start, end) {
  if (end === void 0) {
    end = time();
  }

  return dayjs(start).diff(dayjs(end));
}
/**
 * Specific to EOS
 */

function startDate(startDate, days) {
  if (days === void 0) {
    days = 3;
  }

  return dayjs(startDate).clone().subtract(days, 'days');
}
function formatStartDate(startTimestamp) {
  return startDate(startTimestamp).format('MMM-DD-YYYY, hh:mm:ss A');
}
function endDate(endDate, days) {
  if (days === void 0) {
    days = 3;
  }

  return dayjs(endDate).clone().add(days, 'days');
}
function formatEndDate(endTimestamp) {
  return endDate(endTimestamp).format('MMM-DD-YYYY, hh:mm:ss A');
}
function dateToUtcTimePoint(date) {
  if (date === void 0) {
    date = time();
  }

  return dayjs(date).utc().format('YYYY-MM-DDTHH:mm:ss.SSS');
}
var emptyTimePoint = '1970-01-01T00:00:00.000';
function parseSeconds(seconds) {
  var days = 0;
  var hours = 0;
  var minutes = 0;
  var parsedDate = ''; // Days

  if (seconds > 86400) {
    days += Math.floor(seconds / 86400);
    seconds -= days * 86400;
    parsedDate += days.toFixed(0) + " " + (days === 1 ? 'Day' : 'Days') + " ";
  } // Hours


  if (seconds > 3600) {
    hours += Math.floor(seconds / 3600);
    seconds -= hours * 3600;
    parsedDate += hours.toFixed(0) + " " + (hours === 1 ? 'Hour' : 'Hours') + " ";
  } // Minutes


  if (seconds > 60) {
    minutes += Math.floor(seconds / 60);
    seconds -= minutes * 60;
    parsedDate += minutes.toFixed(0) + " " + (minutes === 1 ? 'Minute' : 'Minutes') + " ";
  } // Seconds


  if (seconds > 0) {
    parsedDate += seconds.toFixed(0) + " Seconds ";
  }

  return parsedDate;
}

exports.Asset = Asset;
exports.ExtendedAsset = ExtendedAsset;
exports.ExtendedSymbol = ExtendedSymbol;
exports.Symbol = Symbol$1;
exports.add = add;
exports.bytesToKB = bytesToKB;
exports.calculatePercentage = calculatePercentage;
exports.currencyToSymbol = currencyToSymbol;
exports.dateToUtcTimePoint = dateToUtcTimePoint;
exports.displayAsset = displayAsset;
exports.displayNumber = displayNumber;
exports.displayNumberAsAmount = displayNumberAsAmount;
exports.displayNumberAsAsset = displayNumberAsAsset;
exports.displayNumberAsCurrency = displayNumberAsCurrency;
exports.displayRawNumberAsAsset = displayRawNumberAsAsset;
exports.divide = divide;
exports.emptyTimePoint = emptyTimePoint;
exports.endDate = endDate;
exports.eosDisplayFormatting = eosDisplayFormatting;
exports.formatDate = formatDate;
exports.formatDateLocal = formatDateLocal;
exports.formatEndDate = formatEndDate;
exports.formatStartDate = formatStartDate;
exports.inFuture = inFuture;
exports.inPast = inPast;
exports.isSameDay = isSameDay;
exports.millisecondsFrom = millisecondsFrom;
exports.multiply = multiply;
exports.numberToAmount = numberToAmount;
exports.numberToAmountFormatted = numberToAmountFormatted;
exports.numberToAsset = numberToAsset;
exports.numberToEos = numberToEos;
exports.numberToEosRoundUp = numberToEosRoundUp;
exports.parseCpu = parseCpu;
exports.parseNetAndRam = parseNetAndRam;
exports.parseRex = parseRex;
exports.parseSeconds = parseSeconds;
exports.parseTimestamp = parseTimestamp;
exports.parseUtcTimestamp = parseUtcTimestamp;
exports.secondsFrom = secondsFrom;
exports.split = split;
exports.startDate = startDate;
exports.substract = substract;
exports.time = time;
exports.timestampFromNow = timestampFromNow;
exports.timestampToDate = timestampToDate;
exports.toBN = toBN;
exports.toNumbro = toNumbro;
exports.unixTime = unixTime;
exports.utcTime = utcTime;
exports.utcTimeToLocal = utcTimeToLocal;
exports.utcTimestampFromNow = utcTimestampFromNow;
exports.utcTimestampToDate = utcTimestampToDate;
//# sourceMappingURL=numbers.cjs.development.js.map


/***/ }),

/***/ "./node_modules/@bloks/utils/dist/utils.esm.js":
/*!*****************************************************!*\
  !*** ./node_modules/@bloks/utils/dist/utils.esm.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DbopOp": () => (/* binding */ DbopOp),
/* harmony export */   "Nft": () => (/* binding */ Nft),
/* harmony export */   "bytesToString": () => (/* binding */ bytesToString),
/* harmony export */   "charidx": () => (/* binding */ charidx),
/* harmony export */   "cloneDeepArrayOfObj": () => (/* binding */ cloneDeepArrayOfObj),
/* harmony export */   "copy": () => (/* binding */ copy),
/* harmony export */   "decodeName": () => (/* binding */ decodeName),
/* harmony export */   "dfuseDepthFirstExtract": () => (/* binding */ dfuseDepthFirstExtract),
/* harmony export */   "dfuseTransformDeferredAction": () => (/* binding */ dfuseTransformDeferredAction),
/* harmony export */   "dfuseTransformDeferredTransaction": () => (/* binding */ dfuseTransformDeferredTransaction),
/* harmony export */   "dfuseTransformGetActions": () => (/* binding */ dfuseTransformGetActions),
/* harmony export */   "dfuseTransformTrace": () => (/* binding */ dfuseTransformTrace),
/* harmony export */   "dfuseTransformTransaction": () => (/* binding */ dfuseTransformTransaction),
/* harmony export */   "dfuseTransformTransactionResult": () => (/* binding */ dfuseTransformTransactionResult),
/* harmony export */   "encodeName": () => (/* binding */ encodeName),
/* harmony export */   "fioKeyToActor": () => (/* binding */ fioKeyToActor),
/* harmony export */   "hexToUint8Array": () => (/* binding */ hexToUint8Array),
/* harmony export */   "historyTransformDeferredAction": () => (/* binding */ historyTransformDeferredAction),
/* harmony export */   "historyTransformDeferredTransaction": () => (/* binding */ historyTransformDeferredTransaction),
/* harmony export */   "historyTransformFlatTraces": () => (/* binding */ historyTransformFlatTraces),
/* harmony export */   "historyTransformRecursiveTrace": () => (/* binding */ historyTransformRecursiveTrace),
/* harmony export */   "historyTransformTransaction": () => (/* binding */ historyTransformTransaction),
/* harmony export */   "hyperionTransformFlatTraces": () => (/* binding */ hyperionTransformFlatTraces),
/* harmony export */   "hyperionTransformGetActions": () => (/* binding */ hyperionTransformGetActions),
/* harmony export */   "hyperionTransformTransaction": () => (/* binding */ hyperionTransformTransaction),
/* harmony export */   "isString": () => (/* binding */ isString),
/* harmony export */   "nativeTransformGetActions": () => (/* binding */ nativeTransformGetActions),
/* harmony export */   "parseAaNft": () => (/* binding */ parseAaNft),
/* harmony export */   "parseSaNft": () => (/* binding */ parseSaNft),
/* harmony export */   "sha": () => (/* binding */ sha),
/* harmony export */   "string_to_uint128_hash": () => (/* binding */ string_to_uint128_hash),
/* harmony export */   "urlBuilder": () => (/* binding */ urlBuilder),
/* harmony export */   "wait": () => (/* binding */ wait)
/* harmony export */ });
/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ "./node_modules/long/src/long.js");
/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(long__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var fast_text_encoding__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fast-text-encoding */ "./node_modules/fast-text-encoding/text.min.js");
/* harmony import */ var fast_text_encoding__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(fast_text_encoding__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var qs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! qs */ "./node_modules/qs/lib/index.js");
/* harmony import */ var qs__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(qs__WEBPACK_IMPORTED_MODULE_2__);




function _regeneratorRuntime() {
  /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

  _regeneratorRuntime = function () {
    return exports;
  };

  var exports = {},
      Op = Object.prototype,
      hasOwn = Op.hasOwnProperty,
      $Symbol = "function" == typeof Symbol ? Symbol : {},
      iteratorSymbol = $Symbol.iterator || "@@iterator",
      asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
      toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    return Object.defineProperty(obj, key, {
      value: value,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }), obj[key];
  }

  try {
    define({}, "");
  } catch (err) {
    define = function (obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
        generator = Object.create(protoGenerator.prototype),
        context = new Context(tryLocsList || []);
    return generator._invoke = function (innerFn, self, context) {
      var state = "suspendedStart";
      return function (method, arg) {
        if ("executing" === state) throw new Error("Generator is already running");

        if ("completed" === state) {
          if ("throw" === method) throw arg;
          return doneResult();
        }

        for (context.method = method, context.arg = arg;;) {
          var delegate = context.delegate;

          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);

            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
            if ("suspendedStart" === state) throw state = "completed", context.arg;
            context.dispatchException(context.arg);
          } else "return" === context.method && context.abrupt("return", context.arg);
          state = "executing";
          var record = tryCatch(innerFn, self, context);

          if ("normal" === record.type) {
            if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
            return {
              value: record.arg,
              done: context.done
            };
          }

          "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
        }
      };
    }(innerFn, self, context), generator;
  }

  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }

  exports.wrap = wrap;
  var ContinueSentinel = {};

  function Generator() {}

  function GeneratorFunction() {}

  function GeneratorFunctionPrototype() {}

  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });
  var getProto = Object.getPrototypeOf,
      NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      define(prototype, method, function (arg) {
        return this._invoke(method, arg);
      });
    });
  }

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);

      if ("throw" !== record.type) {
        var result = record.arg,
            value = result.value;
        return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
          invoke("next", value, resolve, reject);
        }, function (err) {
          invoke("throw", err, resolve, reject);
        }) : PromiseImpl.resolve(value).then(function (unwrapped) {
          result.value = unwrapped, resolve(result);
        }, function (error) {
          return invoke("throw", error, resolve, reject);
        });
      }

      reject(record.arg);
    }

    var previousPromise;

    this._invoke = function (method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function (resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
    };
  }

  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];

    if (undefined === method) {
      if (context.delegate = null, "throw" === context.method) {
        if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
        context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);
    if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
    var info = record.arg;
    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
  }

  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };
    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal", delete record.arg, entry.completion = record;
  }

  function Context(tryLocsList) {
    this.tryEntries = [{
      tryLoc: "root"
    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
  }

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) return iteratorMethod.call(iterable);
      if ("function" == typeof iterable.next) return iterable;

      if (!isNaN(iterable.length)) {
        var i = -1,
            next = function next() {
          for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;

          return next.value = undefined, next.done = !0, next;
        };

        return next.next = next;
      }
    }

    return {
      next: doneResult
    };
  }

  function doneResult() {
    return {
      value: undefined,
      done: !0
    };
  }

  return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
    var ctor = "function" == typeof genFun && genFun.constructor;
    return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
  }, exports.mark = function (genFun) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
  }, exports.awrap = function (arg) {
    return {
      __await: arg
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    void 0 === PromiseImpl && (PromiseImpl = Promise);
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
    return this;
  }), define(Gp, "toString", function () {
    return "[object Generator]";
  }), exports.keys = function (object) {
    var keys = [];

    for (var key in object) keys.push(key);

    return keys.reverse(), function next() {
      for (; keys.length;) {
        var key = keys.pop();
        if (key in object) return next.value = key, next.done = !1, next;
      }

      return next.done = !0, next;
    };
  }, exports.values = values, Context.prototype = {
    constructor: Context,
    reset: function (skipTempReset) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
    },
    stop: function () {
      this.done = !0;
      var rootRecord = this.tryEntries[0].completion;
      if ("throw" === rootRecord.type) throw rootRecord.arg;
      return this.rval;
    },
    dispatchException: function (exception) {
      if (this.done) throw exception;
      var context = this;

      function handle(loc, caught) {
        return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i],
            record = entry.completion;
        if ("root" === entry.tryLoc) return handle("end");

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc"),
              hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
          } else {
            if (!hasFinally) throw new Error("try statement without catch or finally");
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          }
        }
      }
    },
    abrupt: function (type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
      var record = finallyEntry ? finallyEntry.completion : {};
      return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
    },
    complete: function (record, afterLoc) {
      if ("throw" === record.type) throw record.arg;
      return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
    },
    finish: function (finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
      }
    },
    catch: function (tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;

          if ("throw" === record.type) {
            var thrown = record.arg;
            resetTryEntry(entry);
          }

          return thrown;
        }
      }

      throw new Error("illegal catch attempt");
    },
    delegateYield: function (iterable, resultName, nextLoc) {
      return this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
    }
  }, exports;
}

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };
  return _extends.apply(this, arguments);
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it) return (it = it.call(o)).next.bind(it);

  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it) o = it;
    var i = 0;
    return function () {
      if (i >= o.length) return {
        done: true
      };
      return {
        done: false,
        value: o[i++]
      };
    };
  }

  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function cloneDeepArrayOfObj(array) {
  return [].concat(array).map(function (i) {
    return _extends({}, i);
  });
}

var charmap = '.12345abcdefghijklmnopqrstuvwxyz';
function charidx(ch) {
  var idx = charmap.indexOf(ch);

  if (idx === -1) {
    throw new TypeError("Invalid character: '" + ch + "'");
  }

  return idx;
}
function encodeName(name, littleEndian) {
  if (littleEndian === void 0) {
    littleEndian = false;
  }

  if (typeof name !== 'string') {
    throw new TypeError('name parameter is a required string');
  }

  if (name.length > 12) {
    throw new TypeError('A name can be up to 12 characters long');
  }

  var bitstr = '';

  for (var i = 0; i <= 12; i++) {
    // process all 64 bits (even if name is short)
    var c = i < name.length ? charidx(name[i]) : 0;
    var bitlen = i < 12 ? 5 : 4;
    var bits = Number(c).toString(2);

    if (bits.length > bitlen) {
      throw new TypeError('Invalid name ' + name);
    }

    bits = '0'.repeat(bitlen - bits.length) + bits;
    bitstr += bits;
  }

  var value = long__WEBPACK_IMPORTED_MODULE_0___default().fromString(bitstr, true, 2); // convert to LITTLE_ENDIAN

  var leHex = '';
  var bytes = littleEndian ? value.toBytesLE() : value.toBytesBE();

  for (var _iterator = _createForOfIteratorHelperLoose(bytes), _step; !(_step = _iterator()).done;) {
    var b = _step.value;
    var n = Number(b).toString(16);
    leHex += (n.length === 1 ? '0' : '') + n;
  }

  var ulName = long__WEBPACK_IMPORTED_MODULE_0___default().fromString(leHex, true, 16).toString(); // console.log('encodeName', name, value.toString(), ulName.toString(), JSON.stringify(bitstr.split(/(.....)/).slice(1)))

  return ulName.toString();
}
function decodeName(encodedName, littleEndian) {
  if (littleEndian === void 0) {
    littleEndian = true;
  }

  var value = long__WEBPACK_IMPORTED_MODULE_0___default().fromString(encodedName); // convert from LITTLE_ENDIAN

  var beHex = '';
  var bytes = littleEndian ? value.toBytesLE() : value.toBytesBE();

  for (var _iterator2 = _createForOfIteratorHelperLoose(bytes), _step2; !(_step2 = _iterator2()).done;) {
    var b = _step2.value;
    var n = Number(b).toString(16);
    beHex += (n.length === 1 ? '0' : '') + n;
  }

  beHex += '0'.repeat(16 - beHex.length);
  var fiveBits = long__WEBPACK_IMPORTED_MODULE_0___default().fromNumber(0x1f, true);
  var fourBits = long__WEBPACK_IMPORTED_MODULE_0___default().fromNumber(0x0f, true);
  var beValue = long__WEBPACK_IMPORTED_MODULE_0___default().fromString(beHex, true, 16);
  var str = '';
  var tmp = beValue;

  for (var i = 0; i <= 12; i++) {
    var c = charmap[tmp.and(i === 0 ? fourBits : fiveBits)];
    str = c + str;
    tmp = tmp.shiftRight(i === 0 ? 4 : 5);
  }

  str = str.replace(/\.+$/, ''); // remove trailing dots (all of them)
  // console.log('decodeName', str, beValue.toString(), value.toString(), JSON.stringify(beValue.toString(2).split(/(.....)/).slice(1)))

  return str;
}
/**
 * FIO SPECIFIC
 * @param key FIO
 */

var shorten_key = function shorten_key(key) {
  var res = new (long__WEBPACK_IMPORTED_MODULE_0___default())(0, 0, true);
  var i = 1; // Ignore key head

  var len = 0;

  while (len <= 12) {
    if (i >= 33) throw new Error('FIO: i too large');
    var trimmed_char = key[i] & (len == 12 ? 0x0f : 0x1f);

    if (trimmed_char == 0) {
      i++;
      continue;
    } // Skip a zero and move to next


    var shuffle = len == 12 ? 0 : 5 * (12 - len) - 1;
    res = res.or(long__WEBPACK_IMPORTED_MODULE_0___default().fromNumber(shift(trimmed_char, shuffle), true));
    len++;
    i++;
  }

  return res;
};

function shift(number, shift) {
  return number * Math.pow(2, shift);
}

var fioKeyToActor = function fioKeyToActor(key, stringToPublicKey) {
  var pubKey = stringToPublicKey(key, 'FIO').data;
  var shortenedPubKey = shorten_key(pubKey);
  var decodedName = decodeName(shortenedPubKey.toString(), false);
  return decodedName.substr(0, 12);
}; // convert bytes to a String

function bytesToString(bytes) {
  if (typeof bytes === 'string') {
    return bytes;
  }

  return bytes.reduce(function (acc, _byte) {
    return acc + String.fromCharCode(_byte);
  }, '');
}
/**
 * Checks if string
 */

function isString(string) {
  return Object.prototype.toString.call(string) === '[object String]';
}
/**
 *
 * @param message Sha256
 */

function sha(_x, _x2, _x3) {
  return _sha.apply(this, arguments);
}
/**
 * FIO function
 *
 * @param str example: coinomi
 * @returns returns: 968ba84617b73b8e2a73b59170976f41
 */

function _sha() {
  _sha = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(message, binaryRepresentationOfHex, type) {
    var encodedMessage, matched, mapped, hashBuffer, hashArray, hashHex;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (binaryRepresentationOfHex === void 0) {
              binaryRepresentationOfHex = false;
            }

            if (type === void 0) {
              type = 'SHA-256';
            }

            if (!binaryRepresentationOfHex) {
              _context.next = 10;
              break;
            }

            matched = message.match(/[\da-f]{2}/gi);

            if (matched) {
              _context.next = 6;
              break;
            }

            throw Error('Empty message');

          case 6:
            mapped = matched.map(function (h) {
              return parseInt(h, 16);
            });
            encodedMessage = new Uint8Array(mapped);
            _context.next = 11;
            break;

          case 10:
            encodedMessage = new TextEncoder().encode(message);

          case 11:
            _context.next = 13;
            return crypto.subtle.digest(type, encodedMessage);

          case 13:
            hashBuffer = _context.sent;
            // hash the message
            hashArray = Array.from(new Uint8Array(hashBuffer)); // convert buffer to byte array

            hashHex = hashArray.map(function (b) {
              return b.toString(16).padStart(2, '0');
            }).join(''); // convert bytes to hex string

            return _context.abrupt("return", hashHex);

          case 17:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _sha.apply(this, arguments);
}

function string_to_uint128_hash(_x4) {
  return _string_to_uint128_hash.apply(this, arguments);
}

function _string_to_uint128_hash() {
  _string_to_uint128_hash = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(str) {
    var hexBytes;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return sha(str, false, 'SHA-1');

          case 2:
            hexBytes = _context2.sent.match(/../g);

            if (!hexBytes) {
              _context2.next = 7;
              break;
            }

            return _context2.abrupt("return", hexBytes.slice(0, -4).reverse().join(''));

          case 7:
            return _context2.abrupt("return", 0);

          case 8:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _string_to_uint128_hash.apply(this, arguments);
}

function nativeTransformGetActions(result, constants) {
  result.actions = result.actions.map(function (action) {
    if (action['action_trace']['act']['account'] === constants.EOSIO && action['action_trace']['act']['name'] === 'claimrewards' && action['action_trace']['inline_traces']) {
      var totalAmount = 0;
      var totalSymbol = '';

      for (var _iterator = _createForOfIteratorHelperLoose(action['action_trace']['inline_traces']), _step; !(_step = _iterator()).done;) {
        var inline_trace = _step.value;

        if (inline_trace['act']['data']['from'] === constants.EOSIO_VPAY || inline_trace['act']['data']['from'] === constants.EOSIO_BPAY) {
          var _inline_trace$act$dat = inline_trace['act']['data']['quantity'].split(' '),
              amount = _inline_trace$act$dat[0],
              symbol = _inline_trace$act$dat[1];

          totalAmount += Number(amount);
          totalSymbol = symbol;
        }
      }

      action['action_trace']['act']['data']['quantity'] = totalAmount.toFixed(constants.CORE_PRECISION) + " " + totalSymbol;
    }

    return action;
  }).reverse();
  result.numOfTxLoaded = result.actions.length;
  return result;
}
function hyperionTransformGetActions(_ref) {
  var query_time = _ref.query_time,
      lib = _ref.lib,
      actions = _ref.actions,
      _ref$total = _ref.total,
      relation = _ref$total.relation,
      value = _ref$total.value;
  var transformedActions = [];
  var act_digest = 0;

  for (var _iterator2 = _createForOfIteratorHelperLoose(actions), _step2; !(_step2 = _iterator2()).done;) {
    var action = _step2.value;
    action.receipt = {
      act_digest: act_digest++
    };
    action.block_time = action['@timestamp']; // Set quantity

    if (action.act.data && action.act.data.amount && action.act.data.symbol) {
      action.act.data.quantity = action.act.data.amount + " " + action.act.data.symbol;
    }

    transformedActions.push({
      action_trace: action
    });
  }

  return {
    lib: lib,
    actions: transformedActions,
    query_time: query_time,
    numOfTxLoaded: actions.length,
    total: {
      relation: relation,
      value: value
    }
  };
}
function dfuseTransformGetActions(_ref2, accountName, constants) {
  var transactions = _ref2.transactions,
      cursor = _ref2.cursor;

  // Error checking
  if (!transactions) {
    return {
      cursor: cursor,
      actions: [],
      numOfTxLoaded: 0
    };
  }

  var actions = [];

  for (var _iterator3 = _createForOfIteratorHelperLoose(transactions), _step3; !(_step3 = _iterator3()).done;) {
    var transaction = _step3.value;
    var lifecycle = transaction.lifecycle,
        action_idx = transaction.action_idx; // GRAPHQL -> DOesnt give action_idx since its match

    if (!action_idx) {
      actions = actions.concat(lifecycle['execution_trace']['action_traces'].map(function (action) {
        return {
          action_trace: action
        };
      }).reverse());
      continue;
    }

    var current_idx = 0;

    for (var _iterator4 = _createForOfIteratorHelperLoose(lifecycle['execution_trace']['action_traces']), _step4; !(_step4 = _iterator4()).done;) {
      var action_trace = _step4.value;
      // Fix holes
      if (!action_trace['inline_traces']) action_trace['inline_traces'] = []; // BP CLAIM REWARDS

      if (action_trace['act']['account'] === constants.EOSIO && action_trace['act']['name'] === 'claimrewards') {
        var totalAmount = 0;
        var totalSymbol = '';

        for (var _iterator5 = _createForOfIteratorHelperLoose(action_trace['inline_traces']), _step5; !(_step5 = _iterator5()).done;) {
          var inline_trace = _step5.value;

          if (inline_trace['act']['data']['from'] === constants.EOSIO_VPAY || inline_trace['act']['data']['from'] === constants.EOSIO_BPAY) {
            actions.push({
              action_trace: inline_trace
            });

            var _inline_trace$act$dat2 = inline_trace['act']['data']['quantity'].split(' '),
                amount = _inline_trace$act$dat2[0],
                symbol = _inline_trace$act$dat2[1];

            totalAmount += Number(amount);
            totalSymbol = symbol;
          }
        }

        action_trace['act']['data']['quantity'] = totalAmount.toFixed(constants.CORE_PRECISION) + " " + totalSymbol;
        delete action_trace.inline_traces;
        actions.push({
          action_trace: action_trace
        }); // REX sell
      } else if (action_trace['act']['account'] === constants.EOSIO && action_trace['act']['name'] === 'sellrex') {
        for (var _iterator6 = _createForOfIteratorHelperLoose(action_trace['inline_traces']), _step6; !(_step6 = _iterator6()).done;) {
          var _inline_trace = _step6.value;

          if (_inline_trace['act']['account'] === constants.EOSIO_REX || _inline_trace['act']['name'] === 'sellresult') {
            actions.push({
              action_trace: _inline_trace
            });
          }
        }

        delete action_trace.inline_traces;
        actions.push({
          action_trace: action_trace
        });
      } else {
        // This is done for ordering of TX
        var local_actions = [];
        current_idx = dfuseExtractActions(accountName, action_trace, local_actions, action_idx, current_idx);
        actions = actions.concat(local_actions.reverse());
      }

      current_idx++;
    }
  }

  return {
    cursor: cursor,
    actions: actions,
    numOfTxLoaded: transactions.length
  };
}

function dfuseExtractActions(accountName, action, traces, action_idx, current_idx) {
  if (action_idx.includes(current_idx)) {
    traces.push({
      action_trace: action
    });
  }

  if (action['inline_traces']) {
    for (var _iterator7 = _createForOfIteratorHelperLoose(action['inline_traces']), _step7; !(_step7 = _iterator7()).done;) {
      var inline_trace = _step7.value;
      current_idx++;
      current_idx = dfuseExtractActions(accountName, inline_trace, traces, action_idx, current_idx);
    }

    delete action['inline_traces'];
  }

  return current_idx;
}

function dfuseDepthFirstExtract(result) {
  var transactions = result.transactions,
      cursor = result.cursor;
  var actions = [];

  if (transactions) {
    for (var _iterator8 = _createForOfIteratorHelperLoose(transactions), _step8; !(_step8 = _iterator8()).done;) {
      var transaction = _step8.value;
      var lifecycle = transaction.lifecycle,
          action_idx = transaction.action_idx;
      var traces = lifecycle['execution_trace']['action_traces'];
      var current_idx = 0;

      for (var _iterator9 = _createForOfIteratorHelperLoose(traces), _step9; !(_step9 = _iterator9()).done;) {
        var trace = _step9.value;
        current_idx = dfuseDepthFirstExtractHelper(trace, lifecycle['dbops'], actions, action_idx, current_idx);
        current_idx++;
      }
    }
  }

  return {
    actions: actions,
    cursor: cursor
  };
}

function dfuseDepthFirstExtractHelper(action, dbops, allActions, action_idx, currentIdx) {
  if (action_idx && action_idx.includes(currentIdx)) {
    allActions.push({
      action_trace: action,
      dbops: dbops.filter(function (op) {
        return op.action_idx === currentIdx;
      })
    });
  }

  if (action['inline_traces']) {
    for (var _iterator10 = _createForOfIteratorHelperLoose(action['inline_traces']), _step10; !(_step10 = _iterator10()).done;) {
      var trace = _step10.value;
      currentIdx = dfuseDepthFirstExtractHelper(trace, dbops, allActions, action_idx, ++currentIdx);
    }
  }

  return currentIdx;
}

function hyperionTransformFlatTraces(traces) {
  var tracesByOrdinal = traces.reduce(function (acc, trace) {
    acc[trace.action_ordinal] = _extends({}, trace, {
      traces: [],
      account_ram_deltas: trace.account_ram_deltas,
      receivers: trace.notified
    });
    return acc;
  }, {});

  for (var _iterator11 = _createForOfIteratorHelperLoose(traces.sort(function (a, b) {
    return b.action_ordinal - a.action_ordinal;
  })), _step11; !(_step11 = _iterator11()).done;) {
    var trace = _step11.value;

    // Skip top level actions
    if (trace.creator_action_ordinal === 0 || !tracesByOrdinal[trace.creator_action_ordinal]) {
      continue;
    }

    var currentInlineTraces = tracesByOrdinal[trace.creator_action_ordinal].traces || [];
    var newInlineTraces = [tracesByOrdinal[trace.action_ordinal]];
    delete tracesByOrdinal[trace.action_ordinal];
    tracesByOrdinal[trace.creator_action_ordinal].traces = newInlineTraces.concat(currentInlineTraces);
  }

  var result = Object.values(tracesByOrdinal);
  return result;
}
function hyperionTransformTransaction(transaction) {
  var actions = transaction.actions,
      lib = transaction.lib,
      trx_id = transaction.trx_id;
  var firstAction = actions[0]; // Parent only on < 1.8

  var transformedActions = firstAction.parent ? actions.filter(function (trace) {
    return trace.parent === 0;
  }) : actions;
  var traces = hyperionTransformFlatTraces(actions);
  return {
    status: 'Executed',
    cpu_usage: firstAction.cpu_usage_us,
    net_usage: firstAction.net_usage_words * 8,
    id: trx_id,
    block_time: firstAction['@timestamp'],
    block_num: firstAction['block_num'],
    delay_sec: 'N/A',
    expiration: 'N/A',
    lib: lib,
    actions: transformedActions,
    traces: traces
  };
}
function dfuseTransformTrace(_ref3) {
  var trace = _ref3.trace,
      _ref3$dbops = _ref3.dbops,
      dbops = _ref3$dbops === void 0 ? [] : _ref3$dbops,
      _ref3$ramops = _ref3.ramops,
      ramops = _ref3$ramops === void 0 ? [] : _ref3$ramops,
      _ref3$index = _ref3.index,
      index = _ref3$index === void 0 ? 0 : _ref3$index;
  var transformed = {
    act: trace.act,
    account_ram_deltas: trace.account_ram_deltas,
    receivers: [trace.receipt.receiver],
    act_digest: trace.receipt.act_digest,
    dbops: (dbops || []).filter(function (op) {
      return op.action_idx === index;
    }),
    ramops: (ramops || []).filter(function (op) {
      return op.action_idx === index;
    }),
    traces: []
  };

  if (trace.inline_traces && trace.inline_traces.length) {
    trace.inline_traces.map(function (itrace) {
      index++; // If TX data is different

      if (itrace.act.hex_data !== transformed.act.hex_data || itrace.act.name !== transformed.act.name || itrace.act.account !== transformed.act.account) {
        transformed.traces.push(dfuseTransformTrace({
          trace: itrace,
          index: index,
          ramops: ramops,
          dbops: dbops
        })); // Hex data is same, but still add in inline
      } else {
        if (itrace.inline_traces && itrace.inline_traces.length) {
          for (var _iterator12 = _createForOfIteratorHelperLoose(itrace.inline_traces), _step12; !(_step12 = _iterator12()).done;) {
            var iitrace = _step12.value;
            index++;
            transformed.traces.push(dfuseTransformTrace({
              trace: iitrace,
              index: index,
              ramops: ramops,
              dbops: dbops
            }));
          }
        } // Add Receivers even if not different


        if (!transformed.receivers.includes(itrace.receipt.receiver)) {
          transformed.receivers.push(itrace.receipt.receiver);
        } // Add db ops and ram ops even if not different


        transformed.dbops = transformed.dbops.concat((dbops || []).filter(function (op) {
          return op.action_idx === index;
        }));
        transformed.ramops = transformed.ramops.concat((ramops || []).filter(function (op) {
          return op.action_idx === index;
        }));
      }
    });
  }

  return transformed;
}
function dfuseTransformTransaction(result) {
  var execution_trace = result.execution_trace,
      transaction = result.transaction,
      ramops = result.ramops,
      dbops = result.dbops,
      created_by = result.created_by;
  var count = 0;
  var actions = (execution_trace['action_traces'] || []).map(function (trace) {
    var transformedTrace = dfuseTransformTrace({
      trace: trace,
      ramops: ramops,
      dbops: dbops,
      index: count
    }); // Increment counts

    var traceCount = inlineTraceCountHelper([trace]);
    count += traceCount;
    return transformedTrace;
  });
  return {
    status: execution_trace.receipt.status,
    cpu_usage: execution_trace.receipt.cpu_usage_us,
    net_usage: execution_trace.receipt.net_usage_words * 8,
    id: execution_trace.id,
    block_time: execution_trace.block_time,
    block_num: execution_trace.block_num,
    delay_sec: transaction.delay_sec,
    expiration: transaction.expiration,
    created_by: created_by,
    actions: actions,
    traces: actions
  };
}
function dfuseTransformDeferredAction(action) {
  return {
    act: _extends({}, action),
    account_ram_deltas: [],
    receivers: [],
    act_digest: '',
    traces: []
  };
}
function dfuseTransformDeferredTransaction(result) {
  var actions = result.transaction.actions.map(dfuseTransformDeferredAction);
  return {
    id: result.id,
    status: 'deferred',
    dfuse_status: result.transaction_status,
    sender: result.created_by.sender,
    payer: result.created_by.payer,
    published: result.created_by.published_at,
    delay_until: result.created_by.delay_until,
    expiration: result.transaction.expiration,
    delay_sec: result.transaction.delay_sec,
    actions: actions,
    traces: actions
  };
}
function dfuseTransformTransactionResult(result) {
  return result.execution_trace ? dfuseTransformTransaction(result) : dfuseTransformDeferredTransaction(result);
}
function historyTransformDeferredAction(action) {
  return _extends({}, action, {
    account_ram_deltas: [],
    receiver: '',
    act_digest: '',
    traces: []
  });
}
function historyTransformDeferredTransaction(transaction) {
  return {
    id: transaction.trx_id,
    status: 'deferred',
    sender: transaction.sender,
    payer: transaction.payer,
    published: transaction.published,
    expiration: transaction.expiration,
    delay_until: transaction.delay_until,
    delay_sec: transaction.transaction.delay_sec,
    actions: transaction.transaction.actions,
    traces: transaction.transaction.actions.map(function (action) {
      return historyTransformDeferredAction(action);
    })
  };
}
function historyTransformRecursiveTrace(action) {
  var transformed = {
    act: action.act,
    account_ram_deltas: action.account_ram_deltas || [],
    receivers: [action.receipt.receiver],
    act_digest: action.receipt.act_digest,
    traces: []
  };

  if (action.inline_traces && action.inline_traces.length) {
    action.inline_traces.forEach(function (trace) {
      var sameAsParent = trace.receipt.act_digest === action.receipt.act_digest; // Actions done in response to notification -> Add in inline traces

      if (sameAsParent && trace.inline_traces && trace.inline_traces.length) {
        transformed.traces = transformed.traces.concat(trace.inline_traces.map(historyTransformRecursiveTrace));

        if (!transformed.receivers.includes(trace.receipt.receiver)) {
          transformed.receivers.push(trace.receipt.receiver);
        } // Normal action

      } else if (!sameAsParent) {
        transformed.traces.push(historyTransformRecursiveTrace(trace)); // Normal notification
      } else {
        if (!transformed.receivers.includes(trace.receipt.receiver)) {
          transformed.receivers.push(trace.receipt.receiver);
        }
      }
    });
  }

  return transformed;
}
function historyTransformFlatTraces(traces) {
  var tracesByOrdinal = traces.reduce(function (acc, trace) {
    acc[trace.action_ordinal] = trace;
    return acc;
  }, {});

  for (var _iterator13 = _createForOfIteratorHelperLoose(traces.sort(function (a, b) {
    return b.action_ordinal - a.action_ordinal;
  })), _step13; !(_step13 = _iterator13()).done;) {
    var trace = _step13.value;

    // Skip top level actions
    if (trace.creator_action_ordinal === 0) {
      continue;
    }

    var currentInlineTraces = tracesByOrdinal[trace.creator_action_ordinal].inline_traces || [];
    var newInlineTraces = [tracesByOrdinal[trace.action_ordinal]];
    tracesByOrdinal[trace.creator_action_ordinal].inline_traces = newInlineTraces.concat(currentInlineTraces);
  }

  var result = Object.values(tracesByOrdinal).filter(function (trace) {
    return trace.creator_action_ordinal === 0;
  }).map(function (trace) {
    return _extends({}, trace, {
      receivers: [trace.receipt.receiver],
      act_digest: trace.receipt.act_digest
    });
  });
  return result;
}

function findIfSameTx(inline_traces, act) {
  var match = false;

  for (var _iterator14 = _createForOfIteratorHelperLoose(inline_traces), _step14; !(_step14 = _iterator14()).done;) {
    var trace = _step14.value;

    if (trace.act.hex_data === act.hex_data && trace.act.name === act.name && trace.act.account === act.account || findIfSameTx(trace.inline_traces, act)) {
      return true;
    }
  }

  return match;
}

function inlineTraceCountHelper(traces) {
  return traces.reduce(function (acc, trace) {
    return acc + 1 + inlineTraceCountHelper(trace.inline_traces || []);
  }, 0);
}

function historyTransformTransaction(transaction) {
  if (transaction.trx) {
    var actions = [];
    var delay_sec;
    var expiration;
    var traces; // >= 1.8 traces

    if (transaction.traces && transaction.traces.length && 'creator_action_ordinal' in transaction.traces[0]) {
      traces = historyTransformFlatTraces(transaction.traces).map(historyTransformRecursiveTrace);
      actions = transaction.traces.filter(function (trace) {
        return trace.creator_action_ordinal === 0;
      }); // 1.7 and under nodeos
    } else {
      var _loop = function _loop() {
        var _step15$value = _step15.value,
            i = _step15$value[0],
            action = _step15$value[1];
        var tempTraces = transaction.traces.slice();
        tempTraces.splice(i, i + 1);
        var foundSameHex = tempTraces.find(function (trace) {
          return findIfSameTx(trace.inline_traces.slice(), action.act);
        });

        if (!foundSameHex) {
          actions.push(action);
        }
      };

      for (var _iterator15 = _createForOfIteratorHelperLoose(transaction.traces.entries()), _step15; !(_step15 = _iterator15()).done;) {
        _loop();
      }

      traces = actions.map(function (action) {
        return historyTransformRecursiveTrace(action);
      }); // Normal not deferred TX

      if (transaction.trx.trx) {
        delay_sec = transaction.trx.trx.delay_sec;
        expiration = transaction.trx.trx.expiration; // Deferred TX
      } else {
        delay_sec = 'N/A';
        expiration = 'N/A';
      } // Fix for empty array (hex data fucked up) WTF?


      if (transaction.traces.length > 0 && actions.length === 0) {
        actions = [];
        var counter = 0;
        var i = 0;

        for (var _iterator16 = _createForOfIteratorHelperLoose(transaction.traces), _step16; !(_step16 = _iterator16()).done;) {
          var _tx = _step16.value;

          if (i >= counter) {
            actions.push(_tx);
          }

          counter += inlineTraceCountHelper(_tx.inline_traces);
          i++;
        }

        traces = actions.map(function (action) {
          return historyTransformRecursiveTrace(action);
        });
      } // Fix for empty trace (block hint used?)


      if (transaction.traces.length === 0 && actions.length === 0 && transaction.trx.trx && transaction.trx.trx.actions && transaction.trx.trx.actions.length) {
        traces = transaction.trx.trx.actions.map(function (action) {
          return {
            act: action,
            account_ram_deltas: [],
            receivers: action.authorization.map(function (auth) {
              return auth.actor;
            }),
            act_digest: '',
            traces: []
          };
        });
        actions = traces;
      }
    } // For display


    var extraFields = _extends({}, transaction, transaction.trx.receipt, transaction.trx.trx || {});

    var tx = _extends({}, extraFields, {
      status: transaction.trx.receipt.status,
      cpu_usage: transaction.trx.receipt.cpu_usage_us,
      net_usage: transaction.trx.receipt.net_usage_words * 8,
      id: transaction.id,
      block_time: transaction.block_time,
      block_num: transaction.block_num,
      delay_sec: delay_sec,
      expiration: expiration,
      actions: actions,
      traces: traces
    });

    return tx; // MEETONE history
  } else if (transaction.action_traces) {
    return dfuseTransformTransaction(transaction); // On block
  } else {
    var _traces = transaction.traces.map(function (trace) {
      return historyTransformRecursiveTrace(trace);
    });

    return {
      status: 'executed',
      cpu_usage: 0,
      net_usage: 0,
      id: transaction.id,
      block_time: transaction.block_time,
      block_num: transaction.block_num,
      delay_sec: 0,
      expiration: 0,
      actions: _traces,
      traces: _traces
    };
  }
}

function hexToUint8Array(hex) {
  if (typeof hex !== 'string') {
    throw new Error('Expected string containing hex digits');
  }

  if (hex.length % 2) {
    throw new Error('Odd number of hex digits');
  }

  var l = hex.length / 2;
  var result = new Uint8Array(l);

  for (var i = 0; i < l; ++i) {
    var x = parseInt(hex.substr(i * 2, 2), 16);

    if (Number.isNaN(x)) {
      throw new Error('Expected hex string');
    }

    result[i] = x;
  }

  return result;
}

function urlBuilder(url, id, params) {
  params = params || {};

  if (typeof id !== 'undefined' && id !== null) {
    url += "/" + encodeURIComponent(id);
  }

  if (Object.keys(params).length !== 0) {
    var queryString = qs__WEBPACK_IMPORTED_MODULE_2___default().stringify(params);
    url += "?" + queryString;
  }

  return url;
}

function copy(text) {
  var selected = false;
  var el = document.createElement('textarea');
  el.value = text;
  el.setAttribute('readonly', '');
  el.style.position = 'absolute';
  el.style.left = '-9999px';
  document.body.appendChild(el);
  var selection = document.getSelection();

  if (selection && selection.rangeCount > 0) {
    selected = selection.getRangeAt(0);
  }

  el.select();
  document.execCommand('copy');
  document.body.removeChild(el);

  if (selection && selected) {
    selection.removeAllRanges();
    selection.addRange(selected);
  }
}

var Nft = function Nft(_ref) {
  var idata = _ref.idata,
      mdata = _ref.mdata,
      name = _ref.name,
      image = _ref.image,
      video = _ref.video,
      model = _ref.model,
      audio = _ref.audio,
      stage = _ref.stage,
      skybox = _ref.skybox,
      pdf = _ref.pdf,
      id = _ref.id,
      contract = _ref.contract,
      link = _ref.link,
      owner = _ref.owner,
      author = _ref.author,
      collection = _ref.collection,
      mint = _ref.mint,
      edition_size = _ref.edition_size;
  this.idata = idata;
  this.mdata = mdata;
  this.name = name;
  this.image = image;
  this.video = video;
  this.model = model;
  this.audio = audio;
  this.stage = stage;
  this.skybox = skybox;
  this.pdf = pdf;
  this.id = id;
  this.contract = contract;
  this.link = link;
  this.owner = owner;
  this.author = author;
  this.collection = collection;
  this.mint = mint;
  this.edition_size = edition_size;
};

function parseIpfs(imageUrl) {
  if (!imageUrl) {
    return imageUrl;
  }

  if (imageUrl.substring(0, 2) === 'Qm') {
    imageUrl = "https://cloudflare-ipfs.com/ipfs/" + imageUrl;
  }

  return imageUrl;
}

function parseSaNft(nft) {
  var name = nft.idata && nft.idata.name || nft.mdata && nft.mdata.name;
  var imageUrl = parseIpfs(nft.idata && (nft.idata.img || nft.idata.image) || nft.mdata && (nft.mdata.img || nft.mdata.img));
  var videoUrl = parseIpfs(nft.idata && nft.idata.video || nft.mdata && nft.mdata.video);
  var audioUrl = parseIpfs(nft.idata && nft.idata.audio || nft.mdata && nft.mdata.audio);
  var modelUrl = parseIpfs(nft.idata && nft.idata.model || nft.mdata && nft.mdata.model);
  var stageUrl = parseIpfs(nft.idata && nft.idata.stage || nft.mdata && nft.mdata.stage);
  var pdfUrl = parseIpfs(nft.idata && nft.idata.pdf || nft.mdata && nft.mdata.pdf);
  var skyboxUrl = parseIpfs(nft.idata && nft.idata.skybox || nft.mdata && nft.mdata.skybox);
  var nftObj = new Nft({
    idata: nft.idata,
    mdata: nft.mdata,
    name: name,
    image: imageUrl,
    video: videoUrl,
    model: modelUrl,
    audio: audioUrl,
    stage: stageUrl,
    skybox: skyboxUrl,
    pdf: pdfUrl,
    id: nft.assetId,
    contract: 'simpleassets',
    link: "/nft/" + nft.assetId,
    owner: nft.owner,
    author: nft.author,
    mint: nft.extra && nft.extra.mintNumber,
    collection: nft.category,
    edition_size: nft.extra && nft.extra.totalMinted
  });
  return nftObj;
}
function parseAaNft(nft) {
  var imageUrl = parseIpfs(nft.data.img || nft.data.image);
  var videoUrl = parseIpfs(nft.data.video);
  var audioUrl = parseIpfs(nft.data.audio);
  var modelUrl = parseIpfs(nft.data.model);
  var stageUrl = parseIpfs(nft.data.stage);
  var skyboxUrl = parseIpfs(nft.data.skybox);
  var pdfUrl = parseIpfs(nft.data.pdf);
  var idata = nft.immutable_data;

  if (nft.template && nft.template.immutable_data) {
    idata = _extends({}, idata, nft.template.immutable_data);
  }

  var nftObj = new Nft({
    idata: idata,
    mdata: nft.mutable_data,
    name: nft.name || nft.data.name || nft.asset_id,
    image: imageUrl,
    video: videoUrl,
    model: modelUrl,
    audio: audioUrl,
    stage: stageUrl,
    skybox: skyboxUrl,
    pdf: pdfUrl,
    id: nft.asset_id,
    contract: 'atomicassets',
    link: "/nft/" + nft.asset_id,
    owner: nft.owner,
    author: nft.collection.author,
    collection: nft.collection.collection_name,
    mint: nft.template_mint ? +nft.template_mint : undefined,
    edition_size: nft.template ? +nft.template.max_supply || +nft.template.issued_supply : undefined
  });
  return nftObj;
}

function wait(_x) {
  return _wait.apply(this, arguments);
}

function _wait() {
  _wait = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(ms) {
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", new Promise(function (resolve) {
              setTimeout(resolve, ms);
            }));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _wait.apply(this, arguments);
}

/**
 * Native
 */
var DbopOp;

(function (DbopOp) {
  DbopOp["Ins"] = "INS";
  DbopOp["Rem"] = "REM";
  DbopOp["Upd"] = "UPD";
})(DbopOp || (DbopOp = {}));


//# sourceMappingURL=utils.esm.js.map


/***/ }),

/***/ "./node_modules/@jafri/numbro/dist/numbro.min.js":
/*!*******************************************************!*\
  !*** ./node_modules/@jafri/numbro/dist/numbro.min.js ***!
  \*******************************************************/
/***/ ((module) => {

!function(e){if(true)module.exports=e();else {}}(function(){return function a(o,u,c){function s(t,e){if(!u[t]){if(!o[t]){var r=undefined;if(!e&&r)return require(t,!0);if(l)return l(t,!0);var n=new Error("Cannot find module '"+t+"'");throw n.code="MODULE_NOT_FOUND",n}var i=u[t]={exports:{}};o[t][0].call(i.exports,function(e){return s(o[t][1][e]||e)},i,i.exports,a,o,u,c)}return u[t].exports}for(var l=undefined,e=0;e<c.length;e++)s(c[e]);return s}({1:[function(e,r,t){!function(e){"use strict";var t,C=/^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,T=Math.ceil,U=Math.floor,R="[BigNumber Error] ",I=R+"Number primitive has more than 15 significant digits: ",$=1e14,G=14,V=9007199254740991,q=[1,10,100,1e3,1e4,1e5,1e6,1e7,1e8,1e9,1e10,1e11,1e12,1e13],Z=1e7,z=1e9;function W(e){var t=0|e;return 0<e||e===t?t:t-1}function H(e){for(var t,r,n=1,i=e.length,a=e[0]+"";n<i;){for(t=e[n++]+"",r=G-t.length;r--;t="0"+t);a+=t}for(i=a.length;48===a.charCodeAt(--i););return a.slice(0,i+1||1)}function Y(e,t){var r,n,i=e.c,a=t.c,o=e.s,u=t.s,c=e.e,s=t.e;if(!o||!u)return null;if(r=i&&!i[0],n=a&&!a[0],r||n)return r?n?0:-u:o;if(o!=u)return o;if(r=o<0,n=c==s,!i||!a)return n?0:!i^r?1:-1;if(!n)return s<c^r?1:-1;for(u=(c=i.length)<(s=a.length)?c:s,o=0;o<u;o++)if(i[o]!=a[o])return i[o]>a[o]^r?1:-1;return c==s?0:s<c^r?1:-1}function K(e,t,r,n){if(e<t||r<e||e!==U(e))throw Error(R+(n||"Argument")+("number"==typeof e?e<t||r<e?" out of range: ":" not an integer: ":" not a primitive number: ")+String(e))}function J(e){var t=e.c.length-1;return W(e.e/G)==t&&e.c[t]%2!=0}function X(e,t){return(1<e.length?e.charAt(0)+"."+e.slice(1):e)+(t<0?"e":"e+")+t}function Q(e,t,r){var n,i;if(t<0){for(i=r+".";++t;i+=r);e=i+e}else if(++t>(n=e.length)){for(i=r,t-=n;--t;i+=r);e+=i}else t<n&&(e=e.slice(0,t)+"."+e.slice(t));return e}(t=function e(t){var v,f,p,r,s,m,o,u,c,l,g,n=A.prototype={constructor:A,toString:null,valueOf:null},h=new A(1),y=20,b=4,d=-7,w=21,S=-1e7,x=1e7,O=!1,a=1,N=0,B={prefix:"",groupSize:3,secondaryGroupSize:0,groupSeparator:",",decimalSeparator:".",fractionGroupSize:0,fractionGroupSeparator:" ",suffix:""},M="0123456789abcdefghijklmnopqrstuvwxyz";function A(e,t){var r,n,i,a,o,u,c,s,l=this;if(!(l instanceof A))return new A(e,t);if(null==t){if(e&&!0===e._isBigNumber)return l.s=e.s,void(!e.c||e.e>x?l.c=l.e=null:e.e<S?l.c=[l.e=0]:(l.e=e.e,l.c=e.c.slice()));if((u="number"==typeof e)&&0*e==0){if(l.s=1/e<0?(e=-e,-1):1,e===~~e){for(a=0,o=e;10<=o;o/=10,a++);return void(x<a?l.c=l.e=null:(l.e=a,l.c=[e]))}s=String(e)}else{if(!C.test(s=String(e)))return p(l,s,u);l.s=45==s.charCodeAt(0)?(s=s.slice(1),-1):1}-1<(a=s.indexOf("."))&&(s=s.replace(".","")),0<(o=s.search(/e/i))?(a<0&&(a=o),a+=+s.slice(o+1),s=s.substring(0,o)):a<0&&(a=s.length)}else{if(K(t,2,M.length,"Base"),10==t)return P(l=new A(e),y+l.e+1,b);if(s=String(e),u="number"==typeof e){if(0*e!=0)return p(l,s,u,t);if(l.s=1/e<0?(s=s.slice(1),-1):1,A.DEBUG&&15<s.replace(/^0\.0*|\./,"").length)throw Error(I+e)}else l.s=45===s.charCodeAt(0)?(s=s.slice(1),-1):1;for(r=M.slice(0,t),a=o=0,c=s.length;o<c;o++)if(r.indexOf(n=s.charAt(o))<0){if("."==n){if(a<o){a=c;continue}}else if(!i&&(s==s.toUpperCase()&&(s=s.toLowerCase())||s==s.toLowerCase()&&(s=s.toUpperCase()))){i=!0,o=-1,a=0;continue}return p(l,String(e),u,t)}u=!1,-1<(a=(s=f(s,t,10,l.s)).indexOf("."))?s=s.replace(".",""):a=s.length}for(o=0;48===s.charCodeAt(o);o++);for(c=s.length;48===s.charCodeAt(--c););if(s=s.slice(o,++c)){if(c-=o,u&&A.DEBUG&&15<c&&(V<e||e!==U(e)))throw Error(I+l.s*e);if((a=a-o-1)>x)l.c=l.e=null;else if(a<S)l.c=[l.e=0];else{if(l.e=a,l.c=[],o=(a+1)%G,a<0&&(o+=G),o<c){for(o&&l.c.push(+s.slice(0,o)),c-=G;o<c;)l.c.push(+s.slice(o,o+=G));o=G-(s=s.slice(o)).length}else o-=c;for(;o--;s+="0");l.c.push(+s)}}else l.c=[l.e=0]}function D(e,t,r,n){for(var i,a,o=[0],u=0,c=e.length;u<c;){for(a=o.length;a--;o[a]*=t);for(o[0]+=n.indexOf(e.charAt(u++)),i=0;i<o.length;i++)o[i]>r-1&&(null==o[i+1]&&(o[i+1]=0),o[i+1]+=o[i]/r|0,o[i]%=r)}return o.reverse()}function E(e,t,r){var n,i,a,o,u=0,c=e.length,s=t%Z,l=t/Z|0;for(e=e.slice();c--;)u=((i=s*(a=e[c]%Z)+(n=l*a+(o=e[c]/Z|0)*s)%Z*Z+u)/r|0)+(n/Z|0)+l*o,e[c]=i%r;return u&&(e=[u].concat(e)),e}function F(e,t,r,n){var i,a;if(r!=n)a=n<r?1:-1;else for(i=a=0;i<r;i++)if(e[i]!=t[i]){a=e[i]>t[i]?1:-1;break}return a}function k(e,t,r,n){for(var i=0;r--;)e[r]-=i,i=e[r]<t[r]?1:0,e[r]=i*n+e[r]-t[r];for(;!e[0]&&1<e.length;e.splice(0,1));}function i(e,t,r,n){var i,a,o,u,c;if(null==r?r=b:K(r,0,8),!e.c)return e.toString();if(i=e.c[0],o=e.e,null==t)c=H(e.c),c=1==n||2==n&&(o<=d||w<=o)?X(c,o):Q(c,o,"0");else if(a=(e=P(new A(e),t,r)).e,u=(c=H(e.c)).length,1==n||2==n&&(t<=a||a<=d)){for(;u<t;c+="0",u++);c=X(c,a)}else if(t-=o,c=Q(c,a,"0"),u<a+1){if(0<--t)for(c+=".";t--;c+="0");}else if(0<(t+=a-u))for(a+1==u&&(c+=".");t--;c+="0");return e.s<0&&i?"-"+c:c}function _(e,t){for(var r,n=1,i=new A(e[0]);n<e.length;n++){if(!(r=new A(e[n])).s){i=r;break}t.call(i,r)&&(i=r)}return i}function L(e,t,r){for(var n=1,i=t.length;!t[--i];t.pop());for(i=t[0];10<=i;i/=10,n++);return(r=n+r*G-1)>x?e.c=e.e=null:r<S?e.c=[e.e=0]:(e.e=r,e.c=t),e}function P(e,t,r,n){var i,a,o,u,c,s,l,f=e.c,p=q;if(f){e:{for(i=1,u=f[0];10<=u;u/=10,i++);if((a=t-i)<0)a+=G,o=t,l=(c=f[s=0])/p[i-o-1]%10|0;else if((s=T((a+1)/G))>=f.length){if(!n)break e;for(;f.length<=s;f.push(0));c=l=0,o=(a%=G)-G+(i=1)}else{for(c=u=f[s],i=1;10<=u;u/=10,i++);l=(o=(a%=G)-G+i)<0?0:c/p[i-o-1]%10|0}if(n=n||t<0||null!=f[s+1]||(o<0?c:c%p[i-o-1]),n=r<4?(l||n)&&(0==r||r==(e.s<0?3:2)):5<l||5==l&&(4==r||n||6==r&&(0<a?0<o?c/p[i-o]:0:f[s-1])%10&1||r==(e.s<0?8:7)),t<1||!f[0])return f.length=0,n?(t-=e.e+1,f[0]=p[(G-t%G)%G],e.e=-t||0):f[0]=e.e=0,e;if(0==a?(f.length=s,u=1,s--):(f.length=s+1,u=p[G-a],f[s]=0<o?U(c/p[i-o]%p[o])*u:0),n)for(;;){if(0==s){for(a=1,o=f[0];10<=o;o/=10,a++);for(o=f[0]+=u,u=1;10<=o;o/=10,u++);a!=u&&(e.e++,f[0]==$&&(f[0]=1));break}if(f[s]+=u,f[s]!=$)break;f[s--]=0,u=1}for(a=f.length;0===f[--a];f.pop());}e.e>x?e.c=e.e=null:e.e<S&&(e.c=[e.e=0])}return e}function j(e){var t,r=e.e;return null===r?e.toString():(t=H(e.c),t=r<=d||w<=r?X(t,r):Q(t,r,"0"),e.s<0?"-"+t:t)}return A.clone=e,A.ROUND_UP=0,A.ROUND_DOWN=1,A.ROUND_CEIL=2,A.ROUND_FLOOR=3,A.ROUND_HALF_UP=4,A.ROUND_HALF_DOWN=5,A.ROUND_HALF_EVEN=6,A.ROUND_HALF_CEIL=7,A.ROUND_HALF_FLOOR=8,A.EUCLID=9,A.config=A.set=function(e){var t,r;if(null!=e){if("object"!=typeof e)throw Error(R+"Object expected: "+e);if(e.hasOwnProperty(t="DECIMAL_PLACES")&&(K(r=e[t],0,z,t),y=r),e.hasOwnProperty(t="ROUNDING_MODE")&&(K(r=e[t],0,8,t),b=r),e.hasOwnProperty(t="EXPONENTIAL_AT")&&((r=e[t])&&r.pop?(K(r[0],-z,0,t),K(r[1],0,z,t),d=r[0],w=r[1]):(K(r,-z,z,t),d=-(w=r<0?-r:r))),e.hasOwnProperty(t="RANGE"))if((r=e[t])&&r.pop)K(r[0],-z,-1,t),K(r[1],1,z,t),S=r[0],x=r[1];else{if(K(r,-z,z,t),!r)throw Error(R+t+" cannot be zero: "+r);S=-(x=r<0?-r:r)}if(e.hasOwnProperty(t="CRYPTO")){if((r=e[t])!==!!r)throw Error(R+t+" not true or false: "+r);if(r){if("undefined"==typeof crypto||!crypto||!crypto.getRandomValues&&!crypto.randomBytes)throw O=!r,Error(R+"crypto unavailable");O=r}else O=r}if(e.hasOwnProperty(t="MODULO_MODE")&&(K(r=e[t],0,9,t),a=r),e.hasOwnProperty(t="POW_PRECISION")&&(K(r=e[t],0,z,t),N=r),e.hasOwnProperty(t="FORMAT")){if("object"!=typeof(r=e[t]))throw Error(R+t+" not an object: "+r);B=r}if(e.hasOwnProperty(t="ALPHABET")){if("string"!=typeof(r=e[t])||/^.?$|[+\-.\s]|(.).*\1/.test(r))throw Error(R+t+" invalid: "+r);M=r}}return{DECIMAL_PLACES:y,ROUNDING_MODE:b,EXPONENTIAL_AT:[d,w],RANGE:[S,x],CRYPTO:O,MODULO_MODE:a,POW_PRECISION:N,FORMAT:B,ALPHABET:M}},A.isBigNumber=function(e){if(!e||!0!==e._isBigNumber)return!1;if(!A.DEBUG)return!0;var t,r,n=e.c,i=e.e,a=e.s;e:if("[object Array]"=={}.toString.call(n)){if((1===a||-1===a)&&-z<=i&&i<=z&&i===U(i)){if(0===n[0]){if(0===i&&1===n.length)return!0;break e}if((t=(i+1)%G)<1&&(t+=G),String(n[0]).length==t){for(t=0;t<n.length;t++)if((r=n[t])<0||$<=r||r!==U(r))break e;if(0!==r)return!0}}}else if(null===n&&null===i&&(null===a||1===a||-1===a))return!0;throw Error(R+"Invalid BigNumber: "+e)},A.maximum=A.max=function(){return _(arguments,n.lt)},A.minimum=A.min=function(){return _(arguments,n.gt)},A.random=(r=9007199254740992,s=Math.random()*r&2097151?function(){return U(Math.random()*r)}:function(){return 8388608*(1073741824*Math.random()|0)+(8388608*Math.random()|0)},function(e){var t,r,n,i,a,o=0,u=[],c=new A(h);if(null==e?e=y:K(e,0,z),i=T(e/G),O)if(crypto.getRandomValues){for(t=crypto.getRandomValues(new Uint32Array(i*=2));o<i;)9e15<=(a=131072*t[o]+(t[o+1]>>>11))?(r=crypto.getRandomValues(new Uint32Array(2)),t[o]=r[0],t[o+1]=r[1]):(u.push(a%1e14),o+=2);o=i/2}else{if(!crypto.randomBytes)throw O=!1,Error(R+"crypto unavailable");for(t=crypto.randomBytes(i*=7);o<i;)9e15<=(a=281474976710656*(31&t[o])+1099511627776*t[o+1]+4294967296*t[o+2]+16777216*t[o+3]+(t[o+4]<<16)+(t[o+5]<<8)+t[o+6])?crypto.randomBytes(7).copy(t,o):(u.push(a%1e14),o+=7);o=i/7}if(!O)for(;o<i;)(a=s())<9e15&&(u[o++]=a%1e14);for(i=u[--o],e%=G,i&&e&&(a=q[G-e],u[o]=U(i/a)*a);0===u[o];u.pop(),o--);if(o<0)u=[n=0];else{for(n=-1;0===u[0];u.splice(0,1),n-=G);for(o=1,a=u[0];10<=a;a/=10,o++);o<G&&(n-=G-o)}return c.e=n,c.c=u,c}),A.sum=function(){for(var e=1,t=arguments,r=new A(t[0]);e<t.length;)r=r.plus(t[e++]);return r},m="0123456789",f=function(e,t,r,n,i){var a,o,u,c,s,l,f,p,g=e.indexOf("."),d=y,h=b;for(0<=g&&(c=N,N=0,e=e.replace(".",""),l=(p=new A(t)).pow(e.length-g),N=c,p.c=D(Q(H(l.c),l.e,"0"),10,r,m),p.e=p.c.length),u=c=(f=D(e,t,r,i?(a=M,m):(a=m,M))).length;0==f[--c];f.pop());if(!f[0])return a.charAt(0);if(g<0?--u:(l.c=f,l.e=u,l.s=n,f=(l=v(l,p,d,h,r)).c,s=l.r,u=l.e),g=f[o=u+d+1],c=r/2,s=s||o<0||null!=f[o+1],s=h<4?(null!=g||s)&&(0==h||h==(l.s<0?3:2)):c<g||g==c&&(4==h||s||6==h&&1&f[o-1]||h==(l.s<0?8:7)),o<1||!f[0])e=s?Q(a.charAt(1),-d,a.charAt(0)):a.charAt(0);else{if(f.length=o,s)for(--r;++f[--o]>r;)f[o]=0,o||(++u,f=[1].concat(f));for(c=f.length;!f[--c];);for(g=0,e="";g<=c;e+=a.charAt(f[g++]));e=Q(e,u,a.charAt(0))}return e},v=function(e,t,r,n,i){var a,o,u,c,s,l,f,p,g,d,h,v,m,y,b,w,S,x=e.s==t.s?1:-1,O=e.c,N=t.c;if(!(O&&O[0]&&N&&N[0]))return new A(e.s&&t.s&&(O?!N||O[0]!=N[0]:N)?O&&0==O[0]||!N?0*x:x/0:NaN);for(g=(p=new A(x)).c=[],x=r+(o=e.e-t.e)+1,i||(i=$,o=W(e.e/G)-W(t.e/G),x=x/G|0),u=0;N[u]==(O[u]||0);u++);if(N[u]>(O[u]||0)&&o--,x<0)g.push(1),c=!0;else{for(y=O.length,w=N.length,x+=2,1<(s=U(i/(N[u=0]+1)))&&(N=E(N,s,i),O=E(O,s,i),w=N.length,y=O.length),m=w,h=(d=O.slice(0,w)).length;h<w;d[h++]=0);S=N.slice(),S=[0].concat(S),b=N[0],N[1]>=i/2&&b++;do{if(s=0,(a=F(N,d,w,h))<0){if(v=d[0],w!=h&&(v=v*i+(d[1]||0)),1<(s=U(v/b)))for(i<=s&&(s=i-1),f=(l=E(N,s,i)).length,h=d.length;1==F(l,d,f,h);)s--,k(l,w<f?S:N,f,i),f=l.length,a=1;else 0==s&&(a=s=1),f=(l=N.slice()).length;if(f<h&&(l=[0].concat(l)),k(d,l,h,i),h=d.length,-1==a)for(;F(N,d,w,h)<1;)s++,k(d,w<h?S:N,h,i),h=d.length}else 0===a&&(s++,d=[0]);g[u++]=s,d[0]?d[h++]=O[m]||0:(d=[O[m]],h=1)}while((m++<y||null!=d[0])&&x--);c=null!=d[0],g[0]||g.splice(0,1)}if(i==$){for(u=1,x=g[0];10<=x;x/=10,u++);P(p,r+(p.e=u+o*G-1)+1,n,c)}else p.e=o,p.r=+c;return p},o=/^(-?)0([xbo])(?=\w[\w.]*$)/i,u=/^([^.]+)\.$/,c=/^\.([^.]+)$/,l=/^-?(Infinity|NaN)$/,g=/^\s*\+(?=[\w.])|^\s+|\s+$/g,p=function(e,t,r,n){var i,a=r?t:t.replace(g,"");if(l.test(a))e.s=isNaN(a)?null:a<0?-1:1;else{if(!r&&(a=a.replace(o,function(e,t,r){return i="x"==(r=r.toLowerCase())?16:"b"==r?2:8,n&&n!=i?e:t}),n&&(i=n,a=a.replace(u,"$1").replace(c,"0.$1")),t!=a))return new A(a,i);if(A.DEBUG)throw Error(R+"Not a"+(n?" base "+n:"")+" number: "+t);e.s=null}e.c=e.e=null},n.absoluteValue=n.abs=function(){var e=new A(this);return e.s<0&&(e.s=1),e},n.comparedTo=function(e,t){return Y(this,new A(e,t))},n.decimalPlaces=n.dp=function(e,t){var r,n,i;if(null!=e)return K(e,0,z),null==t?t=b:K(t,0,8),P(new A(this),e+this.e+1,t);if(!(r=this.c))return null;if(n=((i=r.length-1)-W(this.e/G))*G,i=r[i])for(;i%10==0;i/=10,n--);return n<0&&(n=0),n},n.dividedBy=n.div=function(e,t){return v(this,new A(e,t),y,b)},n.dividedToIntegerBy=n.idiv=function(e,t){return v(this,new A(e,t),0,1)},n.exponentiatedBy=n.pow=function(e,t){var r,n,i,a,o,u,c,s,l=this;if((e=new A(e)).c&&!e.isInteger())throw Error(R+"Exponent not an integer: "+j(e));if(null!=t&&(t=new A(t)),o=14<e.e,!l.c||!l.c[0]||1==l.c[0]&&!l.e&&1==l.c.length||!e.c||!e.c[0])return s=new A(Math.pow(+j(l),o?2-J(e):+j(e))),t?s.mod(t):s;if(u=e.s<0,t){if(t.c?!t.c[0]:!t.s)return new A(NaN);(n=!u&&l.isInteger()&&t.isInteger())&&(l=l.mod(t))}else{if(9<e.e&&(0<l.e||l.e<-1||(0==l.e?1<l.c[0]||o&&24e7<=l.c[1]:l.c[0]<8e13||o&&l.c[0]<=9999975e7)))return a=l.s<0&&J(e)?-0:0,-1<l.e&&(a=1/a),new A(u?1/a:a);N&&(a=T(N/G+2))}for(c=o?(r=new A(.5),u&&(e.s=1),J(e)):(i=Math.abs(+j(e)))%2,s=new A(h);;){if(c){if(!(s=s.times(l)).c)break;a?s.c.length>a&&(s.c.length=a):n&&(s=s.mod(t))}if(i){if(0===(i=U(i/2)))break;c=i%2}else if(P(e=e.times(r),e.e+1,1),14<e.e)c=J(e);else{if(0==(i=+j(e)))break;c=i%2}l=l.times(l),a?l.c&&l.c.length>a&&(l.c.length=a):n&&(l=l.mod(t))}return n?s:(u&&(s=h.div(s)),t?s.mod(t):a?P(s,N,b,void 0):s)},n.integerValue=function(e){var t=new A(this);return null==e?e=b:K(e,0,8),P(t,t.e+1,e)},n.isEqualTo=n.eq=function(e,t){return 0===Y(this,new A(e,t))},n.isFinite=function(){return!!this.c},n.isGreaterThan=n.gt=function(e,t){return 0<Y(this,new A(e,t))},n.isGreaterThanOrEqualTo=n.gte=function(e,t){return 1===(t=Y(this,new A(e,t)))||0===t},n.isInteger=function(){return!!this.c&&W(this.e/G)>this.c.length-2},n.isLessThan=n.lt=function(e,t){return Y(this,new A(e,t))<0},n.isLessThanOrEqualTo=n.lte=function(e,t){return-1===(t=Y(this,new A(e,t)))||0===t},n.isNaN=function(){return!this.s},n.isNegative=function(){return this.s<0},n.isPositive=function(){return 0<this.s},n.isZero=function(){return!!this.c&&0==this.c[0]},n.minus=function(e,t){var r,n,i,a,o=this,u=o.s;if(t=(e=new A(e,t)).s,!u||!t)return new A(NaN);if(u!=t)return e.s=-t,o.plus(e);var c=o.e/G,s=e.e/G,l=o.c,f=e.c;if(!c||!s){if(!l||!f)return l?(e.s=-t,e):new A(f?o:NaN);if(!l[0]||!f[0])return f[0]?(e.s=-t,e):new A(l[0]?o:3==b?-0:0)}if(c=W(c),s=W(s),l=l.slice(),u=c-s){for((i=(a=u<0)?(u=-u,l):(s=c,f)).reverse(),t=u;t--;i.push(0));i.reverse()}else for(n=(a=(u=l.length)<(t=f.length))?u:t,u=t=0;t<n;t++)if(l[t]!=f[t]){a=l[t]<f[t];break}if(a&&(i=l,l=f,f=i,e.s=-e.s),0<(t=(n=f.length)-(r=l.length)))for(;t--;l[r++]=0);for(t=$-1;u<n;){if(l[--n]<f[n]){for(r=n;r&&!l[--r];l[r]=t);--l[r],l[n]+=$}l[n]-=f[n]}for(;0==l[0];l.splice(0,1),--s);return l[0]?L(e,l,s):(e.s=3==b?-1:1,e.c=[e.e=0],e)},n.modulo=n.mod=function(e,t){var r,n,i=this;return e=new A(e,t),!i.c||!e.s||e.c&&!e.c[0]?new A(NaN):!e.c||i.c&&!i.c[0]?new A(i):(9==a?(n=e.s,e.s=1,r=v(i,e,0,3),e.s=n,r.s*=n):r=v(i,e,0,a),(e=i.minus(r.times(e))).c[0]||1!=a||(e.s=i.s),e)},n.multipliedBy=n.times=function(e,t){var r,n,i,a,o,u,c,s,l,f,p,g,d,h,v,m=this,y=m.c,b=(e=new A(e,t)).c;if(!(y&&b&&y[0]&&b[0]))return!m.s||!e.s||y&&!y[0]&&!b||b&&!b[0]&&!y?e.c=e.e=e.s=null:(e.s*=m.s,y&&b?(e.c=[0],e.e=0):e.c=e.e=null),e;for(n=W(m.e/G)+W(e.e/G),e.s*=m.s,(c=y.length)<(f=b.length)&&(d=y,y=b,b=d,i=c,c=f,f=i),i=c+f,d=[];i--;d.push(0));for(h=$,v=Z,i=f;0<=--i;){for(r=0,p=b[i]%v,g=b[i]/v|0,a=i+(o=c);i<a;)r=((s=p*(s=y[--o]%v)+(u=g*s+(l=y[o]/v|0)*p)%v*v+d[a]+r)/h|0)+(u/v|0)+g*l,d[a--]=s%h;d[a]=r}return r?++n:d.splice(0,1),L(e,d,n)},n.negated=function(){var e=new A(this);return e.s=-e.s||null,e},n.plus=function(e,t){var r,n=this,i=n.s;if(t=(e=new A(e,t)).s,!i||!t)return new A(NaN);if(i!=t)return e.s=-t,n.minus(e);var a=n.e/G,o=e.e/G,u=n.c,c=e.c;if(!a||!o){if(!u||!c)return new A(i/0);if(!u[0]||!c[0])return c[0]?e:new A(u[0]?n:0*i)}if(a=W(a),o=W(o),u=u.slice(),i=a-o){for((r=0<i?(o=a,c):(i=-i,u)).reverse();i--;r.push(0));r.reverse()}for((i=u.length)-(t=c.length)<0&&(r=c,c=u,u=r,t=i),i=0;t;)i=(u[--t]=u[t]+c[t]+i)/$|0,u[t]=$===u[t]?0:u[t]%$;return i&&(u=[i].concat(u),++o),L(e,u,o)},n.precision=n.sd=function(e,t){var r,n,i;if(null!=e&&e!==!!e)return K(e,1,z),null==t?t=b:K(t,0,8),P(new A(this),e,t);if(!(r=this.c))return null;if(n=(i=r.length-1)*G+1,i=r[i]){for(;i%10==0;i/=10,n--);for(i=r[0];10<=i;i/=10,n++);}return e&&this.e+1>n&&(n=this.e+1),n},n.shiftedBy=function(e){return K(e,-V,V),this.times("1e"+e)},n.squareRoot=n.sqrt=function(){var e,t,r,n,i,a=this,o=a.c,u=a.s,c=a.e,s=y+4,l=new A("0.5");if(1!==u||!o||!o[0])return new A(!u||u<0&&(!o||o[0])?NaN:o?a:1/0);if((r=0==(u=Math.sqrt(+j(a)))||u==1/0?(((t=H(o)).length+c)%2==0&&(t+="0"),u=Math.sqrt(+t),c=W((c+1)/2)-(c<0||c%2),new A(t=u==1/0?"5e"+c:(t=u.toExponential()).slice(0,t.indexOf("e")+1)+c)):new A(u+"")).c[0])for((u=(c=r.e)+s)<3&&(u=0);;)if(i=r,r=l.times(i.plus(v(a,i,s,1))),H(i.c).slice(0,u)===(t=H(r.c)).slice(0,u)){if(r.e<c&&--u,"9999"!=(t=t.slice(u-3,u+1))&&(n||"4999"!=t)){+t&&(+t.slice(1)||"5"!=t.charAt(0))||(P(r,r.e+y+2,1),e=!r.times(r).eq(a));break}if(!n&&(P(i,i.e+y+2,0),i.times(i).eq(a))){r=i;break}s+=4,u+=4,n=1}return P(r,r.e+y+1,b,e)},n.toExponential=function(e,t){return null!=e&&(K(e,0,z),e++),i(this,e,t,1)},n.toFixed=function(e,t){return null!=e&&(K(e,0,z),e=e+this.e+1),i(this,e,t)},n.toFormat=function(e,t,r){var n;if(null==r)null!=e&&t&&"object"==typeof t?(r=t,t=null):e&&"object"==typeof e?(r=e,e=t=null):r=B;else if("object"!=typeof r)throw Error(R+"Argument not an object: "+r);if(n=this.toFixed(e,t),this.c){var i,a=n.split("."),o=+r.groupSize,u=+r.secondaryGroupSize,c=r.groupSeparator||"",s=a[0],l=a[1],f=this.s<0,p=f?s.slice(1):s,g=p.length;if(u&&(i=o,o=u,g-=u=i),0<o&&0<g){for(i=g%o||o,s=p.substr(0,i);i<g;i+=o)s+=c+p.substr(i,o);0<u&&(s+=c+p.slice(i)),f&&(s="-"+s)}n=l?s+(r.decimalSeparator||"")+((u=+r.fractionGroupSize)?l.replace(new RegExp("\\d{"+u+"}\\B","g"),"$&"+(r.fractionGroupSeparator||"")):l):s}return(r.prefix||"")+n+(r.suffix||"")},n.toFraction=function(e){var t,r,n,i,a,o,u,c,s,l,f,p,g=this,d=g.c;if(null!=e&&(!(u=new A(e)).isInteger()&&(u.c||1!==u.s)||u.lt(h)))throw Error(R+"Argument "+(u.isInteger()?"out of range: ":"not an integer: ")+j(u));if(!d)return new A(g);for(t=new A(h),s=r=new A(h),n=c=new A(h),p=H(d),a=t.e=p.length-g.e-1,t.c[0]=q[(o=a%G)<0?G+o:o],e=!e||0<u.comparedTo(t)?0<a?t:s:u,o=x,x=1/0,u=new A(p),c.c[0]=0;l=v(u,t,0,1),1!=(i=r.plus(l.times(n))).comparedTo(e);)r=n,n=i,s=c.plus(l.times(i=s)),c=i,t=u.minus(l.times(i=t)),u=i;return i=v(e.minus(r),n,0,1),c=c.plus(i.times(s)),r=r.plus(i.times(n)),c.s=s.s=g.s,f=v(s,n,a*=2,b).minus(g).abs().comparedTo(v(c,r,a,b).minus(g).abs())<1?[s,n]:[c,r],x=o,f},n.toNumber=function(){return+j(this)},n.toPrecision=function(e,t){return null!=e&&K(e,1,z),i(this,e,t,2)},n.toString=function(e){var t,r=this,n=r.s,i=r.e;return null===i?n?(t="Infinity",n<0&&(t="-"+t)):t="NaN":(t=null==e?i<=d||w<=i?X(H(r.c),i):Q(H(r.c),i,"0"):10===e?Q(H((r=P(new A(r),y+i+1,b)).c),r.e,"0"):(K(e,2,M.length,"Base"),f(Q(H(r.c),i,"0"),10,e,n,!0)),n<0&&r.c[0]&&(t="-"+t)),t},n.valueOf=n.toJSON=function(){return j(this)},n._isBigNumber=!0,null!=t&&A.set(t),A}()).default=t.BigNumber=t,void 0!==r&&r.exports?r.exports=t:(e=e||("undefined"!=typeof self&&self?self:window)).BigNumber=t}(this)},{}],2:[function(e,t,r){"use strict";t.exports={languageTag:"en-US",delimiters:{thousands:",",decimal:"."},abbreviations:{thousand:"k",million:"m",billion:"b",trillion:"t"},spaceSeparated:!1,ordinal:function(e){var t=e%10;return 1==~~(e%100/10)?"th":1==t?"st":2==t?"nd":3==t?"rd":"th"},bytes:{binarySuffixes:["B","KiB","MiB","GiB","TiB","PiB","EiB","ZiB","YiB"],decimalSuffixes:["B","KB","MB","GB","TB","PB","EB","ZB","YB"]},currency:{symbol:"$",position:"prefix",code:"USD"},currencyFormat:{thousandSeparated:!0,totalLength:4,spaceSeparated:!0,spaceSeparatedCurrency:!0},formats:{fourDigits:{totalLength:4,spaceSeparated:!0},fullWithTwoDecimals:{output:"currency",thousandSeparated:!0,mantissa:2},fullWithTwoDecimalsNoCurrency:{thousandSeparated:!0,mantissa:2},fullWithNoDecimals:{output:"currency",thousandSeparated:!0,mantissa:0}}}},{}],3:[function(e,t,r){"use strict";function I(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var r=[],n=!0,i=!1,a=void 0;try{for(var o,u=e[Symbol.iterator]();!(n=(o=u.next()).done)&&(r.push(o.value),!t||r.length!==t);n=!0);}catch(e){i=!0,a=e}finally{try{n||null==u.return||u.return()}finally{if(i)throw a}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var $=e("./globalState"),o=e("./validating"),u=e("./parsing"),G={trillion:Math.pow(10,12),billion:Math.pow(10,9),million:Math.pow(10,6),thousand:Math.pow(10,3)},V={totalLength:0,characteristic:0,forceAverage:!1,average:!1,mantissa:-1,optionalMantissa:!0,thousandSeparated:!1,spaceSeparated:!1,negative:"sign",forceSign:!1,roundingFunction:Math.round,spaceSeparatedAbbreviation:!1},n=$.currentBytes(),d=n.binarySuffixes,h=n.decimalSuffixes,i={general:{scale:1024,suffixes:h,marker:"bd"},binary:{scale:1024,suffixes:d,marker:"b"},decimal:{scale:1e3,suffixes:h,marker:"d"}};function a(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},r=2<arguments.length?arguments[2]:void 0;if("string"==typeof t&&(t=u.parseFormat(t)),!o.validateFormat(t))return"ERROR: invalid format";var n=t.prefix||"",i=t.postfix||"",a=function(e,t,r){switch(t.output){case"currency":return t=c(t,$.currentCurrencyDefaultFormat()),function(e,t,r){var n=r.currentCurrency(),i=Object.assign({},V,t),a=void 0,o="",u=!!i.totalLength||!!i.forceAverage||i.average,c=t.currencyPosition||n.position,s=t.currencySymbol||n.symbol,l=void 0!==i.spaceSeparatedCurrency?i.spaceSeparatedCurrency:i.spaceSeparated;void 0===t.lowPrecision&&(t.lowPrecision=!1);l&&(o=" ");"infix"===c&&(a=o+s+o);var f=m({instance:e,providedFormat:t,state:r,decimalSeparator:a});"prefix"===c&&(f=e._value<0&&"sign"===i.negative?"-".concat(o).concat(s).concat(f.slice(1)):0<e._value&&i.forceSign?"+".concat(o).concat(s).concat(f.slice(1)):s+o+f);c&&"postfix"!==c||(o=!i.spaceSeparatedAbbreviation&&u?"":o,f=f+o+s);return f}(e,t,$);case"percent":return t=c(t,$.currentPercentageDefaultFormat()),function(e,t,r,n){var i=t.prefixSymbol,a=m({instance:n(100*e._value),providedFormat:t,state:r}),o=Object.assign({},V,t);if(i)return"%".concat(o.spaceSeparated?" ":"").concat(a);return"".concat(a).concat(o.spaceSeparated?" ":"","%")}(e,t,$,r);case"byte":return t=c(t,$.currentByteDefaultFormat()),function(e,t,r,n){var i=t.base||"binary",a=Object.assign({},V,t),o=r.currentBytes(),u=o.binarySuffixes,c=o.decimalSuffixes,s={general:{scale:1024,suffixes:c||h,marker:"bd"},binary:{scale:1024,suffixes:u||d,marker:"b"},decimal:{scale:1e3,suffixes:c||h,marker:"d"}}[i],l=v(e._value,s.suffixes,s.scale),f=l.value,p=l.suffix,g=m({instance:n(f),providedFormat:t,state:r,defaults:r.currentByteDefaultFormat()});return"".concat(g).concat(a.spaceSeparated?" ":"").concat(p)}(e,t,$,r);case"time":return t=c(t,$.currentTimeDefaultFormat()),function(e){var t=Math.floor(e._value/60/60),r=Math.floor((e._value-60*t*60)/60),n=Math.round(e._value-60*t*60-60*r);return"".concat(t,":").concat(r<10?"0":"").concat(r,":").concat(n<10?"0":"").concat(n)}(e);case"ordinal":return t=c(t,$.currentOrdinalDefaultFormat()),function(e,t,r){var n=r.currentOrdinal(),i=Object.assign({},V,t),a=m({instance:e,providedFormat:t,state:r}),o=n(e._value);return"".concat(a).concat(i.spaceSeparated?" ":"").concat(o)}(e,t,$);case"number":default:return m({instance:e,providedFormat:t,numbro:r})}}(e,t,r);return a=(a=n+a)+i}function v(e,t,r){var n=t[0],i=Math.abs(e);if(r<=i){for(var a=1;a<t.length;++a){var o=Math.pow(r,a),u=Math.pow(r,a+1);if(o<=i&&i<u){n=t[a],e/=o;break}}n===t[0]&&(e/=Math.pow(r,t.length-1),n=t[t.length-1])}return{value:e,suffix:n}}function p(e){for(var t="",r=0;r<e;r++)t+="0";return t}function q(e,t,r){var n=2<arguments.length&&void 0!==r?r:Math.round;return-1!==e.toString().indexOf("e")?function(e,t){var r=e.toString(),n=I(r.split("e"),2),i=n[0],a=n[1],o=I(i.split("."),2),u=o[0],c=o[1],s=void 0===c?"":c;if(0<+a)r=u+s+p(a-s.length);else{var l=".";l=+u<0?"-0".concat(l):"0".concat(l);var f=(p(-a-1)+Math.abs(u)+s).substr(0,t);f.length<t&&(f+=p(t-f.length)),r=l+f}return 0<+a&&0<t&&(r+=".".concat(p(t))),r}(e,t):(n(+"".concat(e,"e+").concat(t))/Math.pow(10,t)).toFixed(t)}function Z(e,t,r,n,i){var a=n.currentDelimiters(),o=a.thousands;i=i||a.decimal;var u=a.thousandsSize||3,c=e.toString(),s=c.split(".")[0],l=c.split(".")[1],f=t<0&&0===s.indexOf("-");r&&(f&&(s=s.slice(1)),function(e,t){for(var r=[],n=0,i=e;0<i;i--)n===t&&(r.unshift(i),n=0),n++;return r}(s.length,u).forEach(function(e,t){s=s.slice(0,e+t)+o+s.slice(e+t)}),f&&(s="-".concat(s)));return c=l?s+i+l:s}function m(e){var t=e.instance,r=e.providedFormat,n=e.state,i=void 0===n?$:n,a=e.decimalSeparator,o=e.defaults,u=void 0===o?i.currentDefaults():o,c=t._value;if(0===c&&i.hasZeroFormat())return i.getZeroFormat();if(!isFinite(c))return c.toString();var s,l,f,p,g,d,h,v,m=Object.assign({},V,u,r),y=m.totalLength,b=y?0:m.characteristic,w=m.optionalCharacteristic,S=m.forceAverage,x=m.lowPrecision,O=!!y||!!S||m.average,N=y?-1:O&&void 0===r.mantissa?0:m.mantissa,B=!y&&(void 0===r.optionalMantissa?-1===N:m.optionalMantissa),M=m.trimMantissa,A=m.thousandSeparated,D=m.spaceSeparated,E=m.negative,F=m.forceSign,k=m.exponential,_=m.roundingFunction,L="";if(O){var P=function(e){var t=e.value,r=e.forceAverage,n=e.lowPrecision,i=void 0===n||n,a=e.abbreviations,o=e.spaceSeparated,u=void 0!==o&&o,c=e.totalLength,s=void 0===c?0:c,l=e.roundingFunction,f=void 0===l?Math.round:l,p="",g=Math.abs(t),d=-1;if(r&&a[r]&&G[r]?(p=a[r],t/=G[r]):g>=G.trillion||i&&1===f(g/G.trillion)?(p=a.trillion,t/=G.trillion):g<G.trillion&&g>=G.billion||i&&1===f(g/G.billion)?(p=a.billion,t/=G.billion):g<G.billion&&g>=G.million||i&&1===f(g/G.million)?(p=a.million,t/=G.million):(g<G.million&&g>=G.thousand||i&&1===f(g/G.thousand))&&(p=a.thousand,t/=G.thousand),p=p&&(u?" ":"")+p,s){var h=t<0,v=t.toString().split(".")[0],m=h?v.length-1:v.length;d=Math.max(s-m,0)}return{value:t,abbreviation:p,mantissaPrecision:d}}({value:c,forceAverage:S,lowPrecision:x,abbreviations:i.currentAbbreviations(),spaceSeparated:D,roundingFunction:_,totalLength:y});c=P.value,L+=P.abbreviation,y&&(N=P.mantissaPrecision)}if(k){var j=(l=(s={value:c,characteristicPrecision:b}).value,f=s.characteristicPrecision,p=void 0===f?0:f,g=I(l.toExponential().split("e"),2),d=g[0],h=g[1],v=+d,p&&1<p&&(v*=Math.pow(10,p-1),h=0<=(h-=p-1)?"+".concat(h):h),{value:v,abbreviation:"e".concat(h)});c=j.value,L=j.abbreviation+L}var C,T,U,R=function(e,t,r,n,i,a){if(-1===n)return e;var o=q(t,n,a),u=I(o.toString().split("."),2),c=u[0],s=u[1],l=void 0===s?"":s;if(l.match(/^0+$/)&&(r||i))return c;var f=l.match(/0+$/);return i&&f?"".concat(c,".").concat(l.toString().slice(0,f.index)):o.toString()}(c.toString(),c,B,N,M,_);return R=Z(R=function(e,t,r,n){var i=e,a=I(i.toString().split("."),2),o=a[0],u=a[1];if(o.match(/^-?0$/)&&r)return u?"".concat(o.replace("0",""),".").concat(u):o.replace("0","");var c=t<0&&0===o.indexOf("-");if(c&&(o=o.slice(1),i=i.slice(1)),o.length<n)for(var s=n-o.length,l=0;l<s;l++)i="0".concat(i);return c&&(i="-".concat(i)),i.toString()}(R,c,w,b),c,A,i,a),(O||k)&&(R=R+L),(F||c<0)&&(C=R,U=E,R=0===(T=c)?C:0==+C?C.replace("-",""):0<T?"+".concat(C):"sign"===U?C:"(".concat(C.replace("-",""),")")),R}function c(e,t){if(!e)return t;var r=Object.keys(e);return 1===r.length&&"output"===r[0]?t:e}t.exports=function(n){return{format:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return a.apply(void 0,t.concat([n]))},getByteUnit:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return function(e){var t=i.general;return v(e._value,t.suffixes,t.scale).suffix}.apply(void 0,t.concat([n]))},getBinaryByteUnit:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return function(e){var t=i.binary;return v(e._value,t.suffixes,t.scale).suffix}.apply(void 0,t.concat([n]))},getDecimalByteUnit:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return function(e){var t=i.decimal;return v(e._value,t.suffixes,t.scale).suffix}.apply(void 0,t.concat([n]))},formatOrDefault:c}}},{"./globalState":4,"./parsing":8,"./validating":10}],4:[function(e,t,r){"use strict";var i=e("./en-US"),n=e("./validating"),a=e("./parsing"),o={},u=void 0,c={},s=null,l={};function f(e){u=e}function p(){return c[u]}o.languages=function(){return Object.assign({},c)},o.currentLanguage=function(){return u},o.currentBytes=function(){return p().bytes||{}},o.currentCurrency=function(){return p().currency},o.currentAbbreviations=function(){return p().abbreviations},o.currentDelimiters=function(){return p().delimiters},o.currentOrdinal=function(){return p().ordinal},o.currentDefaults=function(){return Object.assign({},p().defaults,l)},o.currentOrdinalDefaultFormat=function(){return Object.assign({},o.currentDefaults(),p().ordinalFormat)},o.currentByteDefaultFormat=function(){return Object.assign({},o.currentDefaults(),p().byteFormat)},o.currentPercentageDefaultFormat=function(){return Object.assign({},o.currentDefaults(),p().percentageFormat)},o.currentCurrencyDefaultFormat=function(){return Object.assign({},o.currentDefaults(),p().currencyFormat)},o.currentTimeDefaultFormat=function(){return Object.assign({},o.currentDefaults(),p().timeFormat)},o.setDefaults=function(e){e=a.parseFormat(e),n.validateFormat(e)&&(l=e)},o.getZeroFormat=function(){return s},o.setZeroFormat=function(e){return s="string"==typeof e?e:null},o.hasZeroFormat=function(){return null!==s},o.languageData=function(e){if(e){if(c[e])return c[e];throw new Error('Unknown tag "'.concat(e,'"'))}return p()},o.registerLanguage=function(e){var t=1<arguments.length&&void 0!==arguments[1]&&arguments[1];if(!n.validateLanguage(e))throw new Error("Invalid language data");c[e.languageTag]=e,t&&f(e.languageTag)},o.setLanguage=function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:i.languageTag;if(!c[e]){var r=e.split("-")[0],n=Object.keys(c).find(function(e){return e.split("-")[0]===r});return c[n]?void f(n):void f(t)}f(e)},o.registerLanguage(i),u=i.languageTag,t.exports=o},{"./en-US":2,"./parsing":8,"./validating":10}],5:[function(n,e,t){"use strict";e.exports=function(t){return{loadLanguagesInNode:function(e){return r=t,void e.forEach(function(t){var e=void 0;try{e=n("../languages/".concat(t))}catch(e){console.error('Unable to load "'.concat(t,'". No matching language file found.'))}e&&r.registerLanguage(e)});var r}}}},{}],6:[function(e,t,r){"use strict";var c=e("bignumber.js");function a(e,t,r){var n=new c(e._value),i=t;return r.isNumbro(t)&&(i=t._value),i=new c(i),e._value=n.minus(i).toNumber(),e}t.exports=function(u){return{add:function(e,t){return n=t,i=u,a=new c((r=e)._value),o=n,i.isNumbro(n)&&(o=n._value),o=new c(o),r._value=a.plus(o).toNumber(),r;var r,n,i,a,o},subtract:function(e,t){return a(e,t,u)},multiply:function(e,t){return n=t,i=u,a=new c((r=e)._value),o=n,i.isNumbro(n)&&(o=n._value),o=new c(o),r._value=a.times(o).toNumber(),r;var r,n,i,a,o},divide:function(e,t){return n=t,i=u,a=new c((r=e)._value),o=n,i.isNumbro(n)&&(o=n._value),o=new c(o),r._value=a.dividedBy(o).toNumber(),r;var r,n,i,a,o},set:function(e,t){return r=e,i=n=t,u.isNumbro(n)&&(i=n._value),r._value=i,r;var r,n,i},difference:function(e,t){return r=t,a(i=(n=u)(e._value),r,n),Math.abs(i._value);var r,n,i},BigNumber:c}}},{"bignumber.js":1}],7:[function(e,t,r){"use strict";function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var a=e("./globalState"),n=e("./validating"),o=e("./loading")(g),u=e("./unformatting"),c=e("./formatting")(g),s=e("./manipulating")(g),l=e("./parsing"),f=function(){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this._value=e}var e,r,n;return e=t,(r=[{key:"clone",value:function(){return g(this._value)}},{key:"format",value:function(e){var t=0<arguments.length&&void 0!==e?e:{};return c.format(this,t)}},{key:"formatCurrency",value:function(e){return"string"==typeof e&&(e=l.parseFormat(e)),(e=c.formatOrDefault(e,a.currentCurrencyDefaultFormat())).output="currency",c.format(this,e)}},{key:"formatTime",value:function(e){var t=0<arguments.length&&void 0!==e?e:{};return t.output="time",c.format(this,t)}},{key:"binaryByteUnits",value:function(){return c.getBinaryByteUnit(this)}},{key:"decimalByteUnits",value:function(){return c.getDecimalByteUnit(this)}},{key:"byteUnits",value:function(){return c.getByteUnit(this)}},{key:"difference",value:function(e){return s.difference(this,e)}},{key:"add",value:function(e){return s.add(this,e)}},{key:"subtract",value:function(e){return s.subtract(this,e)}},{key:"multiply",value:function(e){return s.multiply(this,e)}},{key:"divide",value:function(e){return s.divide(this,e)}},{key:"set",value:function(e){return s.set(this,p(e))}},{key:"value",value:function(){return this._value}},{key:"valueOf",value:function(){return this._value}}])&&i(e.prototype,r),n&&i(e,n),t}();function p(e){var t=e;return g.isNumbro(e)?t=e._value:"string"==typeof e?t=g.unformat(e):isNaN(e)&&(t=NaN),t}function g(e){return new f(p(e))}g.version="2.3.2",g.isNumbro=function(e){return e instanceof f},g.language=a.currentLanguage,g.registerLanguage=a.registerLanguage,g.setLanguage=a.setLanguage,g.languages=a.languages,g.languageData=a.languageData,g.zeroFormat=a.setZeroFormat,g.defaultFormat=a.currentDefaults,g.setDefaults=a.setDefaults,g.defaultCurrencyFormat=a.currentCurrencyDefaultFormat,g.validate=n.validate,g.loadLanguagesInNode=o.loadLanguagesInNode,g.unformat=u.unformat,g.BigNumber=s.BigNumber,t.exports=g},{"./formatting":3,"./globalState":4,"./loading":5,"./manipulating":6,"./parsing":8,"./unformatting":9,"./validating":10}],8:[function(e,t,r){"use strict";t.exports={parseFormat:function(e){var t,r,n,i,a,o,u,c,s,l,f,p,g,d,h,v,m,y,b,w,S,x,O=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};return"string"!=typeof e?e:(r=O,e=(n=(t=e).match(/^{([^}]*)}/))?(r.prefix=n[1],t.slice(n[0].length)):t,a=O,function(e,t){if(-1===e.indexOf("$")){if(-1===e.indexOf("%"))return-1!==e.indexOf("bd")?(t.output="byte",t.base="general"):-1!==e.indexOf("b")?(t.output="byte",t.base="binary"):-1!==e.indexOf("d")?(t.output="byte",t.base="decimal"):-1===e.indexOf(":")?-1!==e.indexOf("o")&&(t.output="ordinal"):t.output="time";t.output="percent"}else t.output="currency"}(e=(o=(i=e).match(/{([^}]*)}$/))?(a.postfix=o[1],i.slice(0,-o[0].length)):i,O),u=O,(c=e.match(/[1-9]+[0-9]*/))&&(u.totalLength=+c[0]),s=O,(l=e.split(".")[0].match(/0+/))&&(s.characteristic=l[0].length),function(e,t){if(-1!==e.indexOf(".")){var r=e.split(".")[0];t.optionalCharacteristic=-1===r.indexOf("0")}}(e,O),f=O,-1!==e.indexOf("a")&&(f.average=!0),g=O,-1!==(p=e).indexOf("K")?g.forceAverage="thousand":-1!==p.indexOf("M")?g.forceAverage="million":-1!==p.indexOf("B")?g.forceAverage="billion":-1!==p.indexOf("T")&&(g.forceAverage="trillion"),function(e,t){var r=e.split(".")[1];if(r){var n=r.match(/0+/);n&&(t.mantissa=n[0].length)}}(e,O),h=O,(d=e).match(/\[\.]/)?h.optionalMantissa=!0:d.match(/\./)&&(h.optionalMantissa=!1),v=O,(m=e.split(".")[1])&&(v.trimMantissa=-1!==m.indexOf("[")),y=O,-1!==e.indexOf(",")&&(y.thousandSeparated=!0),b=O,-1!==e.indexOf(" ")&&(b.spaceSeparated=!0,b.spaceSeparatedCurrency=!0,(b.average||b.forceAverage)&&(b.spaceSeparatedAbbreviation=!0)),S=O,(w=e).match(/^\+?\([^)]*\)$/)&&(S.negative="parenthesis"),w.match(/^\+?-/)&&(S.negative="sign"),x=O,e.match(/^\+/)&&(x.forceSign=!0),O)}}},{}],9:[function(p,e,t){"use strict";var M=[{key:"ZiB",factor:Math.pow(1024,7)},{key:"ZB",factor:Math.pow(1e3,7)},{key:"YiB",factor:Math.pow(1024,8)},{key:"YB",factor:Math.pow(1e3,8)},{key:"TiB",factor:Math.pow(1024,4)},{key:"TB",factor:Math.pow(1e3,4)},{key:"PiB",factor:Math.pow(1024,5)},{key:"PB",factor:Math.pow(1e3,5)},{key:"MiB",factor:Math.pow(1024,2)},{key:"MB",factor:Math.pow(1e3,2)},{key:"KiB",factor:Math.pow(1024,1)},{key:"KB",factor:Math.pow(1e3,1)},{key:"GiB",factor:Math.pow(1024,3)},{key:"GB",factor:Math.pow(1e3,3)},{key:"EiB",factor:Math.pow(1024,6)},{key:"EB",factor:Math.pow(1e3,6)},{key:"B",factor:1}];function A(e){return e.replace(/[-/\\^$*+?.()|[\]{}]/g,"\\$&")}function g(e,t,r,n,i,a,o){var u=2<arguments.length&&void 0!==r?r:"",c=3<arguments.length?n:void 0,s=4<arguments.length?i:void 0,l=5<arguments.length?a:void 0,f=6<arguments.length?o:void 0;if(""!==e)return e===s?0:function e(t,r,n,i,a,o,u){var c=2<arguments.length&&void 0!==n?n:"",s=3<arguments.length?i:void 0,l=4<arguments.length?a:void 0,f=5<arguments.length?o:void 0,p=6<arguments.length?u:void 0;if(!isNaN(+t))return+t;var g="",d=t.replace(/(^[^(]*)\((.*)\)([^)]*$)/,"$1$2$3");if(d!==t)return-1*e(d,r,c,s,l,f,p);for(var h=0;h<M.length;h++){var v=M[h];if((g=t.replace(RegExp("([0-9 ])(".concat(v.key,")$")),"$1"))!==t)return e(g,r,c,s,l,f,p)*v.factor}if((g=t.replace("%",""))!==t)return e(g,r,c,s,l,f,p)/100;var m=parseFloat(t);if(!isNaN(m)){var y=s(m);if(y&&"."!==y&&(g=t.replace(new RegExp("".concat(A(y),"$")),""))!==t)return e(g,r,c,s,l,f,p);var b={};Object.keys(f).forEach(function(e){b[f[e]]=e});for(var w=Object.keys(b).sort().reverse(),S=w.length,x=0;x<S;x++){var O=w[x],N=b[O];if((g=t.replace(O,""))!==t){var B=void 0;switch(N){case"thousand":B=Math.pow(10,3);break;case"million":B=Math.pow(10,6);break;case"billion":B=Math.pow(10,9);break;case"trillion":B=Math.pow(10,12)}return e(g,r,c,s,l,f,p)*B}}}}(function(e,t,r){var n=2<arguments.length&&void 0!==r?r:"",i=e.replace(n,"");return i=(i=i.replace(new RegExp("([0-9])".concat(A(t.thousands),"([0-9])"),"g"),"$1$2")).replace(t.decimal,".")}(e,t,u),t,u,c,s,l,f)}e.exports={unformat:function(e,t){var r,n,i,a=p("./globalState"),o=a.currentDelimiters(),u=a.currentCurrency().symbol,c=a.currentOrdinal(),s=a.getZeroFormat(),l=a.currentAbbreviations(),f=void 0;if("string"==typeof e)f=function(e,t){if(e.indexOf(":")&&":"!==t.thousands){var r=e.split(":");if(3===r.length){var n=+r[0],i=+r[1],a=+r[2];return!isNaN(n)&&!isNaN(i)&&!isNaN(a)}}}(e,o)?(r=e.split(":"),n=+r[0],i=+r[1],+r[2]+60*i+3600*n):g(e,o,u,c,s,l,t);else{if("number"!=typeof e)return;f=e}if(void 0!==f)return f}}},{"./globalState":4}],10:[function(e,t,r){"use strict";function n(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function f(e){return(f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var i=e("./unformatting"),a=/^[a-z]{2,3}(-[a-zA-Z]{4})?(-([A-Z]{2}|[0-9]{3}))?$/,p={output:{type:"string",validValues:["currency","percent","byte","time","ordinal","number"]},base:{type:"string",validValues:["decimal","binary","general"],restriction:function(e,t){return"byte"===t.output},message:"`base` must be provided only when the output is `byte`",mandatory:function(e){return"byte"===e.output}},characteristic:{type:"number",restriction:function(e){return 0<=e},message:"value must be positive"},prefix:"string",postfix:"string",forceAverage:{type:"string",validValues:["trillion","billion","million","thousand"]},average:"boolean",lowPrecision:{type:"boolean",restriction:function(e,t){return!0===t.average},message:"`lowPrecision` must be provided only when the option `average` is set"},currencyPosition:{type:"string",validValues:["prefix","infix","postfix"]},currencySymbol:"string",totalLength:{type:"number",restrictions:[{restriction:function(e){return 0<=e},message:"value must be positive"},{restriction:function(e,t){return!t.exponential},message:"`totalLength` is incompatible with `exponential`"}]},mantissa:{type:"number",restriction:function(e){return 0<=e},message:"value must be positive"},optionalMantissa:"boolean",trimMantissa:"boolean",roundingFunction:"function",optionalCharacteristic:"boolean",thousandSeparated:"boolean",spaceSeparated:"boolean",spaceSeparatedCurrency:"boolean",spaceSeparatedAbbreviation:"boolean",abbreviations:{type:"object",children:{thousand:"string",million:"string",billion:"string",trillion:"string"}},negative:{type:"string",validValues:["sign","parenthesis"]},forceSign:"boolean",exponential:{type:"boolean"},prefixSymbol:{type:"boolean",restriction:function(e,t){return"percent"===t.output},message:"`prefixSymbol` can be provided only when the output is `percent`"}},o={languageTag:{type:"string",mandatory:!0,restriction:function(e){return e.match(a)},message:"the language tag must follow the BCP 47 specification (see https://tools.ieft.org/html/bcp47)"},delimiters:{type:"object",children:{thousands:"string",decimal:"string",thousandsSize:"number"},mandatory:!0},abbreviations:{type:"object",children:{thousand:{type:"string",mandatory:!0},million:{type:"string",mandatory:!0},billion:{type:"string",mandatory:!0},trillion:{type:"string",mandatory:!0}},mandatory:!0},spaceSeparated:"boolean",spaceSeparatedCurrency:"boolean",ordinal:{type:"function",mandatory:!0},bytes:{type:"object",children:{binarySuffixes:"object",decimalSuffixes:"object"}},currency:{type:"object",children:{symbol:"string",position:"string",code:"string"},mandatory:!0},defaults:"format",ordinalFormat:"format",byteFormat:"format",percentageFormat:"format",currencyFormat:"format",timeDefaults:"format",formats:{type:"object",children:{fourDigits:{type:"format",mandatory:!0},fullWithTwoDecimals:{type:"format",mandatory:!0},fullWithTwoDecimalsNoCurrency:{type:"format",mandatory:!0},fullWithNoDecimals:{type:"format",mandatory:!0}}}};function u(e){return void 0!==i.unformat(e)}function g(c,s,l,e){var t=3<arguments.length&&void 0!==e&&e,r=Object.keys(c).map(function(e){if(!s[e])return console.error("".concat(l," Invalid key: ").concat(e)),!1;var t=c[e],r=s[e];if("string"==typeof r&&(r={type:r}),"format"===r.type){if(!g(t,p,"[Validate ".concat(e,"]"),!0))return!1}else if(f(t)!==r.type)return console.error("".concat(l," ").concat(e,' type mismatched: "').concat(r.type,'" expected, "').concat(f(t),'" provided')),!1;if(r.restrictions&&r.restrictions.length)for(var n=r.restrictions.length,i=0;i<n;i++){var a=r.restrictions[i],o=a.restriction,u=a.message;if(!o(t,c))return console.error("".concat(l," ").concat(e," invalid value: ").concat(u)),!1}if(r.restriction&&!r.restriction(t,c))return console.error("".concat(l," ").concat(e," invalid value: ").concat(r.message)),!1;if(r.validValues&&-1===r.validValues.indexOf(t))return console.error("".concat(l," ").concat(e," invalid value: must be among ").concat(JSON.stringify(r.validValues),', "').concat(t,'" provided')),!1;if(r.children&&!g(t,r.children,"[Validate ".concat(e,"]")))return!1;return!0});return t||r.push.apply(r,n(Object.keys(s).map(function(e){var t=s[e];if("string"==typeof t&&(t={type:t}),t.mandatory){var r=t.mandatory;if("function"==typeof r&&(r=r(c)),r&&void 0===c[e])return console.error("".concat(l,' Missing mandatory key "').concat(e,'"')),!1}return!0}))),r.reduce(function(e,t){return e&&t},!0)}function c(e){return g(e,p,"[Validate format]")}t.exports={validate:function(e,t){var r=u(e),n=c(t);return r&&n},validateFormat:c,validateInput:u,validateLanguage:function(e){return g(e,o,"[Validate language]")}}},{"./unformatting":9}]},{},[7])(7)});
//# sourceMappingURL=numbro.min.js.map


/***/ }),

/***/ "./node_modules/@proton/api/dist/api.esm.js":
/*!**************************************************!*\
  !*** ./node_modules/@proton/api/dist/api.esm.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ApiClass": () => (/* binding */ ApiClass),
/* harmony export */   "KycStatus": () => (/* binding */ KycStatus)
/* harmony export */ });
/* harmony import */ var _proton_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @proton/js */ "./node_modules/@proton/js/dist/index.js");
/* harmony import */ var _bloks_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @bloks/constants */ "./node_modules/@bloks/constants/dist/constants.esm.js");
/* harmony import */ var _proton_hyperion__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @proton/hyperion */ "./node_modules/@proton/hyperion/dist/index.js");
/* harmony import */ var _proton_hyperion__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_proton_hyperion__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _proton_light_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @proton/light-api */ "./node_modules/@proton/light-api/dist/index.js");
/* harmony import */ var _proton_light_api__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_proton_light_api__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _bloks_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @bloks/utils */ "./node_modules/@bloks/utils/dist/utils.esm.js");
/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! cross-fetch */ "./node_modules/cross-fetch/dist/browser-ponyfill.js");
/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(cross_fetch__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! bignumber.js */ "./node_modules/bignumber.js/bignumber.js");
/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(bignumber_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _proton_wrap_constants__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @proton/wrap-constants */ "./node_modules/@proton/wrap-constants/dist/wrap-constants.esm.js");
/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! zod */ "./node_modules/zod/lib/index.mjs");
/* harmony import */ var _bloks_numbers__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @bloks/numbers */ "./node_modules/@bloks/numbers/dist/index.js");











function _regeneratorRuntime() {
  /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

  _regeneratorRuntime = function () {
    return exports;
  };

  var exports = {},
      Op = Object.prototype,
      hasOwn = Op.hasOwnProperty,
      $Symbol = "function" == typeof Symbol ? Symbol : {},
      iteratorSymbol = $Symbol.iterator || "@@iterator",
      asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
      toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    return Object.defineProperty(obj, key, {
      value: value,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }), obj[key];
  }

  try {
    define({}, "");
  } catch (err) {
    define = function (obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
        generator = Object.create(protoGenerator.prototype),
        context = new Context(tryLocsList || []);
    return generator._invoke = function (innerFn, self, context) {
      var state = "suspendedStart";
      return function (method, arg) {
        if ("executing" === state) throw new Error("Generator is already running");

        if ("completed" === state) {
          if ("throw" === method) throw arg;
          return doneResult();
        }

        for (context.method = method, context.arg = arg;;) {
          var delegate = context.delegate;

          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);

            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
            if ("suspendedStart" === state) throw state = "completed", context.arg;
            context.dispatchException(context.arg);
          } else "return" === context.method && context.abrupt("return", context.arg);
          state = "executing";
          var record = tryCatch(innerFn, self, context);

          if ("normal" === record.type) {
            if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
            return {
              value: record.arg,
              done: context.done
            };
          }

          "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
        }
      };
    }(innerFn, self, context), generator;
  }

  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }

  exports.wrap = wrap;
  var ContinueSentinel = {};

  function Generator() {}

  function GeneratorFunction() {}

  function GeneratorFunctionPrototype() {}

  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });
  var getProto = Object.getPrototypeOf,
      NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      define(prototype, method, function (arg) {
        return this._invoke(method, arg);
      });
    });
  }

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);

      if ("throw" !== record.type) {
        var result = record.arg,
            value = result.value;
        return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
          invoke("next", value, resolve, reject);
        }, function (err) {
          invoke("throw", err, resolve, reject);
        }) : PromiseImpl.resolve(value).then(function (unwrapped) {
          result.value = unwrapped, resolve(result);
        }, function (error) {
          return invoke("throw", error, resolve, reject);
        });
      }

      reject(record.arg);
    }

    var previousPromise;

    this._invoke = function (method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function (resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
    };
  }

  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];

    if (undefined === method) {
      if (context.delegate = null, "throw" === context.method) {
        if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
        context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);
    if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
    var info = record.arg;
    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
  }

  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };
    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal", delete record.arg, entry.completion = record;
  }

  function Context(tryLocsList) {
    this.tryEntries = [{
      tryLoc: "root"
    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
  }

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) return iteratorMethod.call(iterable);
      if ("function" == typeof iterable.next) return iterable;

      if (!isNaN(iterable.length)) {
        var i = -1,
            next = function next() {
          for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;

          return next.value = undefined, next.done = !0, next;
        };

        return next.next = next;
      }
    }

    return {
      next: doneResult
    };
  }

  function doneResult() {
    return {
      value: undefined,
      done: !0
    };
  }

  return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
    var ctor = "function" == typeof genFun && genFun.constructor;
    return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
  }, exports.mark = function (genFun) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
  }, exports.awrap = function (arg) {
    return {
      __await: arg
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    void 0 === PromiseImpl && (PromiseImpl = Promise);
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
    return this;
  }), define(Gp, "toString", function () {
    return "[object Generator]";
  }), exports.keys = function (object) {
    var keys = [];

    for (var key in object) keys.push(key);

    return keys.reverse(), function next() {
      for (; keys.length;) {
        var key = keys.pop();
        if (key in object) return next.value = key, next.done = !1, next;
      }

      return next.done = !0, next;
    };
  }, exports.values = values, Context.prototype = {
    constructor: Context,
    reset: function (skipTempReset) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
    },
    stop: function () {
      this.done = !0;
      var rootRecord = this.tryEntries[0].completion;
      if ("throw" === rootRecord.type) throw rootRecord.arg;
      return this.rval;
    },
    dispatchException: function (exception) {
      if (this.done) throw exception;
      var context = this;

      function handle(loc, caught) {
        return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i],
            record = entry.completion;
        if ("root" === entry.tryLoc) return handle("end");

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc"),
              hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
          } else {
            if (!hasFinally) throw new Error("try statement without catch or finally");
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          }
        }
      }
    },
    abrupt: function (type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
      var record = finallyEntry ? finallyEntry.completion : {};
      return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
    },
    complete: function (record, afterLoc) {
      if ("throw" === record.type) throw record.arg;
      return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
    },
    finish: function (finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
      }
    },
    catch: function (tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;

          if ("throw" === record.type) {
            var thrown = record.arg;
            resetTryEntry(entry);
          }

          return thrown;
        }
      }

      throw new Error("illegal catch attempt");
    },
    delegateYield: function (iterable, resultName, nextLoc) {
      return this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
    }
  }, exports;
}

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };
  return _extends.apply(this, arguments);
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it) return (it = it.call(o)).next.bind(it);

  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it) o = it;
    var i = 0;
    return function () {
      if (i >= o.length) return {
        done: true
      };
      return {
        done: false,
        value: o[i++]
      };
    };
  }

  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function getAccount(_x) {
  return _getAccount.apply(this, arguments);
}

function _getAccount() {
  _getAccount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(accountName) {
    var _this = this;

    var account;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return this.rpc.get_account(accountName);

          case 3:
            account = _context.sent;
            account.permissions = account.permissions.map(function (permission) {
              permission.required_auth.keys = permission.required_auth.keys.map(function (key) {
                if (key.key.indexOf(_this.constants.KEY_PREFIX) !== -1) {
                  key.key = _proton_js__WEBPACK_IMPORTED_MODULE_0__.Numeric.convertLegacyPublicKey(key.key, _this.constants.KEY_PREFIX);
                }

                return key;
              });
              return permission;
            });
            return _context.abrupt("return", account);

          case 8:
            _context.prev = 8;
            _context.t0 = _context["catch"](0);
            console.log(_context.t0);
            return _context.abrupt("return", undefined);

          case 12:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this, [[0, 8]]);
  }));
  return _getAccount.apply(this, arguments);
}

function searchAccount(_x2, _x3) {
  return _searchAccount.apply(this, arguments);
}

function _searchAccount() {
  _searchAccount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(query, limit) {
    var _yield$this$rpc$get_t, rows;

    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!(!query || !/(^[a-zA-Z12345.]+$)/.test(query))) {
              _context2.next = 2;
              break;
            }

            return _context2.abrupt("return", []);

          case 2:
            if (!(query.indexOf('.') === 0)) {
              _context2.next = 4;
              break;
            }

            return _context2.abrupt("return", []);

          case 4:
            _context2.prev = 4;
            query = query.trim().toLowerCase();
            _context2.next = 8;
            return this.rpc.get_table_by_scope({
              json: true,
              code: this.constants.EOSIO,
              limit: limit,
              lower_bound: query,
              table: 'userres',
              upper_bound: "" + query + (query.length < 12 ? 'z'.repeat(12 - query.length) : '')
            });

          case 8:
            _yield$this$rpc$get_t = _context2.sent;
            rows = _yield$this$rpc$get_t.rows;
            return _context2.abrupt("return", rows.map(function (row) {
              return row.scope;
            }));

          case 13:
            _context2.prev = 13;
            _context2.t0 = _context2["catch"](4);
            console.log(_context2.t0);
            return _context2.abrupt("return", []);

          case 17:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this, [[4, 13]]);
  }));
  return _searchAccount.apply(this, arguments);
}

function getGravatar(_x4) {
  return _getGravatar.apply(this, arguments);
}

function _getGravatar() {
  _getGravatar = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(account) {
    var result;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (!(this.constants.CHAIN === 'eos')) {
              _context3.next = 7;
              break;
            }

            _context3.next = 3;
            return this.rpc.get_table_rows({
              json: true,
              code: this.constants.ACCOUNT_INFO,
              scope: this.constants.ACCOUNT_INFO,
              table: 'accounts',
              table_key: '',
              key_type: 'name',
              lower_bound: account,
              index_position: 1,
              limit: 1
            });

          case 3:
            result = _context3.sent;
            return _context3.abrupt("return", result.rows.length > 0 && result.rows[0].account_name === account ? result.rows[0] : undefined);

          case 7:
            return _context3.abrupt("return", undefined);

          case 8:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));
  return _getGravatar.apply(this, arguments);
}

function getParent(_x5) {
  return _getParent.apply(this, arguments);
}

function _getParent() {
  _getParent = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(account) {
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            if (!this.constants.HISTORY_TYPES.includes('hyperion')) {
              _context4.next = 8;
              break;
            }

            if (!this.constants.HYPERION_URL) {
              _context4.next = 5;
              break;
            }

            return _context4.abrupt("return", this.hyperion.get_creator(account));

          case 5:
            return _context4.abrupt("return", this.get((0,_bloks_utils__WEBPACK_IMPORTED_MODULE_4__.urlBuilder)(this.constants.API_URL, 'hyperion', {
              type: 'get_creator',
              account: account
            })));

          case 6:
            _context4.next = 9;
            break;

          case 8:
            return _context4.abrupt("return", null);

          case 9:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4, this);
  }));
  return _getParent.apply(this, arguments);
}

function getAccountLightData(_x6) {
  return _getAccountLightData.apply(this, arguments);
}

function _getAccountLightData() {
  _getAccountLightData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(accountName) {
    return _regeneratorRuntime().wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            if (this.lightApi) {
              _context5.next = 2;
              break;
            }

            return _context5.abrupt("return", undefined);

          case 2:
            _context5.prev = 2;
            _context5.next = 5;
            return this.lightApi.get_account_info(accountName);

          case 5:
            return _context5.abrupt("return", _context5.sent);

          case 8:
            _context5.prev = 8;
            _context5.t0 = _context5["catch"](2);
            console.log(_context5.t0);
            return _context5.abrupt("return", undefined);

          case 12:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5, this, [[2, 8]]);
  }));
  return _getAccountLightData.apply(this, arguments);
}

function getActionsFromNative(_x, _x2, _x3, _x4) {
  return _getActionsFromNative.apply(this, arguments);
}

function _getActionsFromNative() {
  _getActionsFromNative = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(accountName, actionSkip, actionsPerPage, historyType) {
    var result;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (historyType === void 0) {
              historyType = 'native';
            }

            console.log('Fetching actions from:', historyType);
            console.log('Fetch Params:', 'actionSkip', actionSkip, 'actionsPerPage', actionsPerPage); // Request

            _context.next = 5;
            return this.actionsRpc.history_get_actions(accountName, actionSkip, actionsPerPage);

          case 5:
            result = _context.sent;

            if (result) {
              _context.next = 8;
              break;
            }

            throw new Error('Could not retrieve actions');

          case 8:
            if (!(historyType === 'native')) {
              _context.next = 10;
              break;
            }

            return _context.abrupt("return", (0,_bloks_utils__WEBPACK_IMPORTED_MODULE_4__.nativeTransformGetActions)(result, this.constants));

          case 10:
            return _context.abrupt("return", []);

          case 11:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));
  return _getActionsFromNative.apply(this, arguments);
}

function getActions(_x5, _x6, _x7) {
  return _getActions.apply(this, arguments);
}

function _getActions() {
  _getActions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(accountName, historyType, _temp) {
    var _ref, _ref$actionsPerPage, actionsPerPage, _ref$actionSkip, actionSkip, _ref$sortDirection, sortDirection, _ref$dfuseCursorStack, dfuseCursorStack, tokenFilter, actionFilters, contractFilter, actionFilter, start, end, result, inputCursor;

    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _ref = _temp === void 0 ? {} : _temp, _ref$actionsPerPage = _ref.actionsPerPage, actionsPerPage = _ref$actionsPerPage === void 0 ? 100 : _ref$actionsPerPage, _ref$actionSkip = _ref.actionSkip, actionSkip = _ref$actionSkip === void 0 ? 0 : _ref$actionSkip, _ref$sortDirection = _ref.sortDirection, sortDirection = _ref$sortDirection === void 0 ? 'desc' : _ref$sortDirection, _ref$dfuseCursorStack = _ref.dfuseCursorStack, dfuseCursorStack = _ref$dfuseCursorStack === void 0 ? [] : _ref$dfuseCursorStack, tokenFilter = _ref.tokenFilter, actionFilters = _ref.actionFilters, contractFilter = _ref.contractFilter, actionFilter = _ref.actionFilter, start = _ref.start, end = _ref.end;

            if (!start) {
              start = this.constants.CHAIN_START_DATE;
            } // Fallback for history type


            console.log(this.constants.HISTORY_TYPES);

            if (!historyType && this.constants.HISTORY_TYPES.length) {
              historyType = this.constants.HISTORY_TYPES[0];
            } // Fix for firefox and IE and safari


            if (start && end) {
              start = start || this.constants.CHAIN_START_DATE ? new Date(start || this.constants.CHAIN_START_DATE).toISOString() : undefined;
              end = new Date(end || new Date()).toISOString();
            } else {
              start = undefined;
              end = undefined;
            }

            if (!(historyType === 'dfuse')) {
              _context2.next = 12;
              break;
            }

            inputCursor = dfuseCursorStack.length > 0 ? dfuseCursorStack[dfuseCursorStack.length - 1] : '';
            _context2.next = 9;
            return this.getActionsFromDfuse(accountName, {
              limit: actionsPerPage,
              cursor: inputCursor,
              direction: sortDirection,
              query: '',
              after: start,
              before: end,
              tokenFilter: tokenFilter,
              actionFilters: actionFilters,
              contractFilter: contractFilter,
              actionFilter: actionFilter
            });

          case 9:
            result = _context2.sent;
            _context2.next = 21;
            break;

          case 12:
            if (!(historyType === 'hyperion')) {
              _context2.next = 18;
              break;
            }

            _context2.next = 15;
            return this.getActionsFromHyperion(accountName, {
              skip: Math.abs(actionSkip) - 1,
              limit: actionsPerPage,
              sort: sortDirection,
              after: start,
              before: end,
              tokenFilter: tokenFilter,
              actionFilters: actionFilters,
              contractFilter: contractFilter,
              actionFilter: actionFilter
            });

          case 15:
            result = _context2.sent;
            _context2.next = 21;
            break;

          case 18:
            _context2.next = 20;
            return this.getActionsFromNative(accountName, actionSkip, -actionsPerPage, 'native');

          case 20:
            result = _context2.sent;

          case 21:
            return _context2.abrupt("return", result);

          case 22:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));
  return _getActions.apply(this, arguments);
}

function getActionsFromDfuse(_x8, _x9) {
  return _getActionsFromDfuse.apply(this, arguments);
}

function _getActionsFromDfuse() {
  _getActionsFromDfuse = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(accountName, _temp2) {
    var _ref2, before, after, _ref2$limit, limit, cursor, query, _ref2$direction, direction, tokenFilter, actionFilters, contractFilter, actionFilter, _ref2$type, type, q, _tokenFilter$split, tokenContract, tokenfilter, actionFiltersLocal, actionFiltersQuery, result;

    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _ref2 = _temp2 === void 0 ? {} : _temp2, before = _ref2.before, after = _ref2.after, _ref2$limit = _ref2.limit, limit = _ref2$limit === void 0 ? 25 : _ref2$limit, cursor = _ref2.cursor, query = _ref2.query, _ref2$direction = _ref2.direction, direction = _ref2$direction === void 0 ? 'desc' : _ref2$direction, tokenFilter = _ref2.tokenFilter, actionFilters = _ref2.actionFilters, contractFilter = _ref2.contractFilter, actionFilter = _ref2.actionFilter, _ref2$type = _ref2.type, type = _ref2$type === void 0 ? 'search_transactions_graphql' : _ref2$type;
            q = query || "(auth:" + accountName + " OR\n                    receiver:" + accountName + " OR\n                    data.to:" + accountName + " OR\n                    data.from:" + accountName + " OR\n                    data.receiver:" + accountName + ")";

            if (tokenFilter) {
              _tokenFilter$split = tokenFilter.split(' '), tokenContract = _tokenFilter$split[1];
              tokenfilter = "account:" + tokenContract;
              q = q + " " + tokenfilter;
            }

            if (actionFilters) {
              actionFiltersLocal = Object.entries(actionFilters).reduce(function (filters, _ref4) {
                var value = _ref4[1];
                return value.isActive ? filters.concat(value) : filters;
              }, []);

              if (actionFiltersLocal.length) {
                actionFiltersQuery = actionFiltersLocal.map(function (filter) {
                  return filter.dfuseQuery(accountName);
                }).join(' OR '); // Wrap around the action filters

                if (actionFiltersQuery.search('OR') !== -1) {
                  actionFiltersQuery = "(" + actionFiltersQuery + ")";
                } // Set the action filters


                q = q + " " + actionFiltersQuery;
              }

              if (contractFilter) {
                q = q + " account:" + contractFilter;
              }

              if (actionFilter) {
                q = q + " action:" + actionFilter;
              }
            }

            _context3.next = 6;
            return this.get((0,_bloks_utils__WEBPACK_IMPORTED_MODULE_4__.urlBuilder)(this.constants.API_URL, 'dfuse', {
              type: type,
              q: q,
              options: Object.assign({}, {
                sort: direction,
                cursor: cursor,
                limit: limit,
                withReversible: true,
                before: before,
                after: after,
                code: 1
              })
            }));

          case 6:
            result = _context3.sent;

            if (result) {
              _context3.next = 9;
              break;
            }

            throw new Error('Could not retrieve actions');

          case 9:
            return _context3.abrupt("return", (0,_bloks_utils__WEBPACK_IMPORTED_MODULE_4__.dfuseTransformGetActions)(result, accountName, this.constants));

          case 10:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));
  return _getActionsFromDfuse.apply(this, arguments);
}

function getActionsFromHyperion(_x10, _x11) {
  return _getActionsFromHyperion.apply(this, arguments);
}

function _getActionsFromHyperion() {
  _getActionsFromHyperion = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(account, _temp3) {
    var _ref3, skip, limit, sort, after, before, filter, tokenFilter, actionFilters, contractFilter, actionFilter, params, result, _tokenFilter$split2, tokenContract, actionFiltersLocal, _iterator, _step, eachFilter, uniqueContracts;

    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _ref3 = _temp3 === void 0 ? {} : _temp3, skip = _ref3.skip, limit = _ref3.limit, sort = _ref3.sort, after = _ref3.after, before = _ref3.before, filter = _ref3.filter, tokenFilter = _ref3.tokenFilter, actionFilters = _ref3.actionFilters, contractFilter = _ref3.contractFilter, actionFilter = _ref3.actionFilter;
            // Initialize
            params = {
              filter: filter,
              skip: skip,
              limit: limit,
              sort: sort,
              after: after,
              before: before
            };
            console.log('Fetching actions from Hyperion');

            // Token filter, we would only receive undefined or *:action
            if (tokenFilter) {
              _tokenFilter$split2 = tokenFilter.split(' '), tokenContract = _tokenFilter$split2[1];

              if (params.filter) {
                params.filter = params.filter.replace('*', tokenContract);
              } else {
                params.filter = tokenContract + ":*";
              }
            }

            if (actionFilters) {
              actionFiltersLocal = Object.entries(actionFilters).reduce(function (filters, _ref5) {
                var value = _ref5[1];
                return value.isActive ? filters.concat(value) : filters;
              }, []);

              if (actionFiltersLocal.length) {
                for (_iterator = _createForOfIteratorHelperLoose(actionFiltersLocal); !(_step = _iterator()).done;) {
                  eachFilter = _step.value;
                  eachFilter.hyperionQuery(account, params);
                }

                console.log(params);
              }
            } // Actions contract filters


            if (contractFilter) {
              if (params.filter) {
                params.filter = params.filter.split(',').map(function (filter) {
                  return contractFilter + ":" + filter.split(':')[1];
                }).join(',');
              } else {
                params.filter = contractFilter + ":*";
              }
            }

            if (actionFilter) {
              if (params.filter) {
                uniqueContracts = Array.from(new Set(params.filter.split(',').map(function (filter) {
                  return filter.split(':')[0];
                })));
                params.filter = uniqueContracts.map(function (contract) {
                  return contract + ":" + actionFilter;
                }).join(',');
              } else {
                params.filter = "*:" + actionFilter;
              }
            } // If hyperion URL provided, do it client side


            if (!this.constants.HYPERION_URL) {
              _context4.next = 13;
              break;
            }

            _context4.next = 10;
            return this.hyperion.get_actions(account, Object.assign({}, params));

          case 10:
            result = _context4.sent;
            _context4.next = 16;
            break;

          case 13:
            _context4.next = 15;
            return this.get((0,_bloks_utils__WEBPACK_IMPORTED_MODULE_4__.urlBuilder)(this.constants.API_URL, 'hyperion', {
              type: 'get_actions',
              account: account,
              options: Object.assign({}, params)
            }));

          case 15:
            result = _context4.sent;

          case 16:
            if (result) {
              _context4.next = 18;
              break;
            }

            throw new Error('Could not retrieve actions');

          case 18:
            return _context4.abrupt("return", (0,_bloks_utils__WEBPACK_IMPORTED_MODULE_4__.hyperionTransformGetActions)(result));

          case 19:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4, this);
  }));
  return _getActionsFromHyperion.apply(this, arguments);
}

function getDappStats() {
  return _getDappStats.apply(this, arguments);
}

function _getDappStats() {
  _getDappStats = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
    var result;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return this.rpc.get_table_rows({
              code: 'dappservices',
              json: true,
              limit: 1,
              scope: '......2ke1.o4',
              table: 'statext'
            });

          case 3:
            result = _context.sent;

            if (!(!result || !result.rows || !result.rows.length)) {
              _context.next = 8;
              break;
            }

            return _context.abrupt("return", {});

          case 8:
            return _context.abrupt("return", result.rows[0]);

          case 9:
            _context.next = 15;
            break;

          case 11:
            _context.prev = 11;
            _context.t0 = _context["catch"](0);
            console.log(_context.t0);
            return _context.abrupt("return", {});

          case 15:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this, [[0, 11]]);
  }));
  return _getDappStats.apply(this, arguments);
}

function getDspPackages() {
  return _getDspPackages.apply(this, arguments);
}

function _getDspPackages() {
  _getDspPackages = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
    var result;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.prev = 0;
            _context2.next = 3;
            return this.rpc.get_table_rows({
              code: 'dappservices',
              json: true,
              limit: 500,
              scope: 'dappservices',
              table: 'package'
            });

          case 3:
            result = _context2.sent;
            return _context2.abrupt("return", result && result.rows && result.rows.length ? result.rows : []);

          case 7:
            _context2.prev = 7;
            _context2.t0 = _context2["catch"](0);
            console.log(_context2.t0);
            return _context2.abrupt("return", []);

          case 11:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this, [[0, 7]]);
  }));
  return _getDspPackages.apply(this, arguments);
}

function getDapphodlBalance(_x) {
  return _getDapphodlBalance.apply(this, arguments);
}

function _getDapphodlBalance() {
  _getDapphodlBalance = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(account) {
    var result;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.prev = 0;
            _context3.next = 3;
            return this.rpc.get_table_rows({
              code: 'dappairhodl1',
              json: true,
              limit: 1,
              scope: account,
              table: 'accounts'
            });

          case 3:
            result = _context3.sent;
            return _context3.abrupt("return", result && result.rows && result.rows.length ? result.rows[0] : {});

          case 7:
            _context3.prev = 7;
            _context3.t0 = _context3["catch"](0);
            return _context3.abrupt("return", {});

          case 10:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, this, [[0, 7]]);
  }));
  return _getDapphodlBalance.apply(this, arguments);
}

function getDappBalance(_x2) {
  return _getDappBalance.apply(this, arguments);
}

function _getDappBalance() {
  _getDappBalance = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(account) {
    var result;
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.prev = 0;
            _context4.next = 3;
            return this.rpc.get_table_rows({
              code: 'dappservices',
              json: true,
              limit: 1,
              scope: account,
              table: 'accounts'
            });

          case 3:
            result = _context4.sent;
            return _context4.abrupt("return", result && result.rows && result.rows.length ? result.rows[0] : {});

          case 7:
            _context4.prev = 7;
            _context4.t0 = _context4["catch"](0);
            return _context4.abrupt("return", {});

          case 10:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4, this, [[0, 7]]);
  }));
  return _getDappBalance.apply(this, arguments);
}

function getDappStakes(_x3) {
  return _getDappStakes.apply(this, arguments);
}

function _getDappStakes() {
  _getDappStakes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(account) {
    var result;
    return _regeneratorRuntime().wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.prev = 0;
            _context5.next = 3;
            return this.rpc.get_table_rows({
              code: 'dappservices',
              json: true,
              limit: 100,
              scope: account,
              table: 'staking'
            });

          case 3:
            result = _context5.sent;
            return _context5.abrupt("return", result && result.rows && result.rows.length ? result.rows.map(function (row) {
              row.scope = account;
              return row;
            }) : []);

          case 7:
            _context5.prev = 7;
            _context5.t0 = _context5["catch"](0);
            return _context5.abrupt("return", []);

          case 10:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5, this, [[0, 7]]);
  }));
  return _getDappStakes.apply(this, arguments);
}

function getDapphodlStakes(_x4, _x5) {
  return _getDapphodlStakes.apply(this, arguments);
}

function _getDapphodlStakes() {
  _getDapphodlStakes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(account, lower_bound) {
    var result, rows;
    return _regeneratorRuntime().wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            if (lower_bound === void 0) {
              lower_bound = '';
            }

            _context6.prev = 1;
            _context6.next = 4;
            return this.rpc.get_table_rows({
              code: 'dappservices',
              json: true,
              limit: 1000,
              scope: 'dappairhodl1',
              table: 'staking',
              lower_bound: lower_bound
            });

          case 4:
            result = _context6.sent;

            if (result) {
              _context6.next = 7;
              break;
            }

            return _context6.abrupt("return", []);

          case 7:
            rows = result.rows;

            if (!result.more) {
              _context6.next = 14;
              break;
            }

            _context6.t0 = rows;
            _context6.next = 12;
            return this.getDapphodlStakes(account, +rows[rows.length - 1].id + 1);

          case 12:
            _context6.t1 = _context6.sent;
            rows = _context6.t0.concat.call(_context6.t0, _context6.t1);

          case 14:
            return _context6.abrupt("return", rows.filter(function (row) {
              return row.account === account;
            }).map(function (row) {
              row.scope = 'dappairhodl1';
              return row;
            }));

          case 17:
            _context6.prev = 17;
            _context6.t2 = _context6["catch"](1);
            return _context6.abrupt("return", []);

          case 20:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6, this, [[1, 17]]);
  }));
  return _getDapphodlStakes.apply(this, arguments);
}

function getDappUnstakes(_x6) {
  return _getDappUnstakes.apply(this, arguments);
}

function _getDappUnstakes() {
  _getDappUnstakes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(account) {
    var result;
    return _regeneratorRuntime().wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            _context7.prev = 0;
            _context7.next = 3;
            return this.rpc.get_table_rows({
              code: 'dappservices',
              json: true,
              limit: 100,
              scope: account,
              table: 'refunds'
            });

          case 3:
            result = _context7.sent;
            return _context7.abrupt("return", result && result.rows && result.rows.length ? result.rows.map(function (row) {
              row.scope = account;
              return row;
            }) : []);

          case 7:
            _context7.prev = 7;
            _context7.t0 = _context7["catch"](0);
            return _context7.abrupt("return", []);

          case 10:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7, this, [[0, 7]]);
  }));
  return _getDappUnstakes.apply(this, arguments);
}

function getDapphodlUnstakes(_x7) {
  return _getDapphodlUnstakes.apply(this, arguments);
}

function _getDapphodlUnstakes() {
  _getDapphodlUnstakes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(account) {
    var result, rows;
    return _regeneratorRuntime().wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            _context8.prev = 0;
            _context8.next = 3;
            return this.rpc.get_table_rows({
              code: 'dappservices',
              json: true,
              limit: 1000,
              scope: 'dappairhodl1',
              table: 'refunds'
            });

          case 3:
            result = _context8.sent;

            if (result) {
              _context8.next = 6;
              break;
            }

            return _context8.abrupt("return", []);

          case 6:
            rows = result.rows;

            if (!result.more) {
              _context8.next = 13;
              break;
            }

            _context8.t0 = rows;
            _context8.next = 11;
            return this.getDapphodlUnstakes(account);

          case 11:
            _context8.t1 = _context8.sent;
            rows = _context8.t0.concat.call(_context8.t0, _context8.t1);

          case 13:
            return _context8.abrupt("return", rows.filter(function (row) {
              return row.account === account;
            }).map(function (row) {
              row.scope = 'dappairhodl1';
              return row;
            }));

          case 16:
            _context8.prev = 16;
            _context8.t2 = _context8["catch"](0);
            return _context8.abrupt("return", []);

          case 19:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8, this, [[0, 16]]);
  }));
  return _getDapphodlUnstakes.apply(this, arguments);
}

var http = /*#__PURE__*/function () {
  var _ref2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref) {
    var path, method, body, headers, data, response;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            path = _ref.path, method = _ref.method, body = _ref.body, headers = _ref.headers;
            _context.prev = 1;
            _context.next = 4;
            return cross_fetch__WEBPACK_IMPORTED_MODULE_5___default()(path, {
              method: method,
              body: body,
              headers: headers || {
                'Content-Type': 'application/json'
              }
            });

          case 4:
            response = _context.sent;
            _context.next = 7;
            return response.json();

          case 7:
            data = _context.sent;
            _context.next = 13;
            break;

          case 10:
            _context.prev = 10;
            _context.t0 = _context["catch"](1);
            console.log(_context.t0);

          case 13:
            if (response && response.ok) {
              _context.next = 15;
              break;
            }

            throw new _proton_js__WEBPACK_IMPORTED_MODULE_0__.RpcError(data || 'Error');

          case 15:
            return _context.abrupt("return", data);

          case 16:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[1, 10]]);
  }));

  return function http(_x) {
    return _ref2.apply(this, arguments);
  };
}();
var get = /*#__PURE__*/function () {
  var _ref3 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(path, headers) {
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return http({
              path: path,
              method: 'GET',
              headers: headers
            });

          case 2:
            return _context2.abrupt("return", _context2.sent);

          case 3:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function get(_x2, _x3) {
    return _ref3.apply(this, arguments);
  };
}();
var post = /*#__PURE__*/function () {
  var _ref4 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(path, body) {
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return http({
              path: path,
              method: 'POST',
              body: JSON.stringify(body)
            });

          case 2:
            return _context3.abrupt("return", _context3.sent);

          case 3:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function post(_x4, _x5) {
    return _ref4.apply(this, arguments);
  };
}();

function getFIOVoter(_x) {
  return _getFIOVoter.apply(this, arguments);
}

function _getFIOVoter() {
  _getFIOVoter = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(account) {
    var _yield$this$rpc$get_t, rows;

    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return this.rpc.get_table_rows({
              json: true,
              code: this.constants.EOSIO,
              scope: this.constants.EOSIO,
              lower_bound: (0,_bloks_utils__WEBPACK_IMPORTED_MODULE_4__.encodeName)(account, false),
              upper_bound: (0,_bloks_utils__WEBPACK_IMPORTED_MODULE_4__.encodeName)(account, false),
              table: 'voters',
              key_type: 'i64',
              index_position: 3,
              limit: 1
            });

          case 3:
            _yield$this$rpc$get_t = _context.sent;
            rows = _yield$this$rpc$get_t.rows;
            return _context.abrupt("return", rows.length ? rows[0] : undefined);

          case 8:
            _context.prev = 8;
            _context.t0 = _context["catch"](0);
            console.log(_context.t0);
            return _context.abrupt("return", undefined);

          case 12:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this, [[0, 8]]);
  }));
  return _getFIOVoter.apply(this, arguments);
}

function getFIOAddressByName(_x2) {
  return _getFIOAddressByName.apply(this, arguments);
}

function _getFIOAddressByName() {
  _getFIOAddressByName = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(name) {
    var _yield$this$rpc$get_t2, rows;

    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.prev = 0;
            _context2.t0 = this.rpc;
            _context2.next = 4;
            return (0,_bloks_utils__WEBPACK_IMPORTED_MODULE_4__.string_to_uint128_hash)(name);

          case 4:
            _context2.t1 = _context2.sent;
            _context2.t2 = '0x' + _context2.t1;
            _context2.t3 = {
              code: 'fio.address',
              scope: 'fio.address',
              table: 'fionames',
              lower_bound: _context2.t2,
              limit: 1,
              key_type: 'i128',
              index_position: 5
            };
            _context2.next = 9;
            return _context2.t0.get_table_rows.call(_context2.t0, _context2.t3);

          case 9:
            _yield$this$rpc$get_t2 = _context2.sent;
            rows = _yield$this$rpc$get_t2.rows;

            if (!(rows && rows.length && rows[0].name === name)) {
              _context2.next = 15;
              break;
            }

            return _context2.abrupt("return", rows[0]);

          case 15:
            return _context2.abrupt("return", undefined);

          case 16:
            _context2.next = 22;
            break;

          case 18:
            _context2.prev = 18;
            _context2.t4 = _context2["catch"](0);
            console.log(_context2.t4);
            return _context2.abrupt("return", undefined);

          case 22:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this, [[0, 18]]);
  }));
  return _getFIOAddressByName.apply(this, arguments);
}

function getNFTsByFioAddress(_x3) {
  return _getNFTsByFioAddress.apply(this, arguments);
}

function _getNFTsByFioAddress() {
  _getNFTsByFioAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(name) {
    var _yield$this$rpc$get_n, nfts;

    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.prev = 0;
            _context3.next = 3;
            return this.rpc.get_nfts_fio_address(name);

          case 3:
            _yield$this$rpc$get_n = _context3.sent;
            nfts = _yield$this$rpc$get_n.nfts;

            if (!(nfts && nfts.length)) {
              _context3.next = 9;
              break;
            }

            return _context3.abrupt("return", nfts);

          case 9:
            return _context3.abrupt("return", []);

          case 10:
            _context3.next = 16;
            break;

          case 12:
            _context3.prev = 12;
            _context3.t0 = _context3["catch"](0);
            console.log(_context3.t0);
            return _context3.abrupt("return", []);

          case 16:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, this, [[0, 12]]);
  }));
  return _getNFTsByFioAddress.apply(this, arguments);
}

function getFIODomainByName(_x4) {
  return _getFIODomainByName.apply(this, arguments);
}

function _getFIODomainByName() {
  _getFIODomainByName = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(name) {
    var _yield$this$rpc$get_t3, rows;

    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.prev = 0;
            _context4.t0 = this.rpc;
            _context4.next = 4;
            return (0,_bloks_utils__WEBPACK_IMPORTED_MODULE_4__.string_to_uint128_hash)(name);

          case 4:
            _context4.t1 = _context4.sent;
            _context4.t2 = '0x' + _context4.t1;
            _context4.t3 = {
              code: 'fio.address',
              scope: 'fio.address',
              table: 'domains',
              lower_bound: _context4.t2,
              limit: 1,
              key_type: 'i128',
              index_position: 4
            };
            _context4.next = 9;
            return _context4.t0.get_table_rows.call(_context4.t0, _context4.t3);

          case 9:
            _yield$this$rpc$get_t3 = _context4.sent;
            rows = _yield$this$rpc$get_t3.rows;

            if (!(rows && rows.length && rows[0].name === name)) {
              _context4.next = 15;
              break;
            }

            return _context4.abrupt("return", rows[0]);

          case 15:
            return _context4.abrupt("return", undefined);

          case 16:
            _context4.next = 22;
            break;

          case 18:
            _context4.prev = 18;
            _context4.t4 = _context4["catch"](0);
            console.log(_context4.t4);
            return _context4.abrupt("return", undefined);

          case 22:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4, this, [[0, 18]]);
  }));
  return _getFIODomainByName.apply(this, arguments);
}

function getDomains(_x5, _x6) {
  return _getDomains.apply(this, arguments);
}

function _getDomains() {
  _getDomains = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(limit, upper_bound) {
    var _yield$this$rpc$get_t4, rows;

    return _regeneratorRuntime().wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            if (limit === void 0) {
              limit = -1;
            }

            _context5.prev = 1;
            _context5.next = 4;
            return this.rpc.get_table_rows({
              code: 'fio.address',
              scope: 'fio.address',
              table: 'domains',
              reverse: true,
              upper_bound: upper_bound,
              limit: limit
            });

          case 4:
            _yield$this$rpc$get_t4 = _context5.sent;
            rows = _yield$this$rpc$get_t4.rows;

            if (!(rows && rows.length)) {
              _context5.next = 10;
              break;
            }

            return _context5.abrupt("return", rows);

          case 10:
            return _context5.abrupt("return", []);

          case 11:
            _context5.next = 17;
            break;

          case 13:
            _context5.prev = 13;
            _context5.t0 = _context5["catch"](1);
            console.log(_context5.t0);
            return _context5.abrupt("return", []);

          case 17:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5, this, [[1, 13]]);
  }));
  return _getDomains.apply(this, arguments);
}

function getAddresses(_x7, _x8) {
  return _getAddresses.apply(this, arguments);
}

function _getAddresses() {
  _getAddresses = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(limit, upper_bound) {
    var _yield$this$rpc$get_t5, rows;

    return _regeneratorRuntime().wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            if (limit === void 0) {
              limit = -1;
            }

            _context6.prev = 1;
            _context6.next = 4;
            return this.rpc.get_table_rows({
              code: 'fio.address',
              scope: 'fio.address',
              table: 'fionames',
              reverse: true,
              upper_bound: upper_bound,
              limit: limit
            });

          case 4:
            _yield$this$rpc$get_t5 = _context6.sent;
            rows = _yield$this$rpc$get_t5.rows;

            if (!(rows && rows.length)) {
              _context6.next = 10;
              break;
            }

            return _context6.abrupt("return", rows);

          case 10:
            return _context6.abrupt("return", []);

          case 11:
            _context6.next = 17;
            break;

          case 13:
            _context6.prev = 13;
            _context6.t0 = _context6["catch"](1);
            console.log(_context6.t0);
            return _context6.abrupt("return", []);

          case 17:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6, this, [[1, 13]]);
  }));
  return _getAddresses.apply(this, arguments);
}

function getFIOProducers(_x9) {
  return _getFIOProducers.apply(this, arguments);
}

function _getFIOProducers() {
  _getFIOProducers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(limit) {
    var _yield$this$rpc$get_t6, rows;

    return _regeneratorRuntime().wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            _context7.prev = 0;
            _context7.next = 3;
            return this.rpc.get_table_rows({
              code: this.constants.EOSIO,
              scope: this.constants.EOSIO,
              table: 'producers',
              reverse: true,
              limit: limit
            });

          case 3:
            _yield$this$rpc$get_t6 = _context7.sent;
            rows = _yield$this$rpc$get_t6.rows;

            if (!(rows && rows.length)) {
              _context7.next = 9;
              break;
            }

            return _context7.abrupt("return", rows);

          case 9:
            return _context7.abrupt("return", []);

          case 10:
            _context7.next = 16;
            break;

          case 12:
            _context7.prev = 12;
            _context7.t0 = _context7["catch"](0);
            console.log(_context7.t0);
            return _context7.abrupt("return", []);

          case 16:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7, this, [[0, 12]]);
  }));
  return _getFIOProducers.apply(this, arguments);
}

function getFIOBalance(_x10) {
  return _getFIOBalance.apply(this, arguments);
}

function _getFIOBalance() {
  _getFIOBalance = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(fio_public_key) {
    var balance;
    return _regeneratorRuntime().wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            _context8.prev = 0;
            _context8.next = 3;
            return this.rpc.fetch('/v1/chain/get_fio_balance', {
              fio_public_key: fio_public_key
            });

          case 3:
            balance = _context8.sent;

            if (!balance) {
              _context8.next = 8;
              break;
            }

            return _context8.abrupt("return", balance);

          case 8:
            return _context8.abrupt("return", null);

          case 9:
            _context8.next = 15;
            break;

          case 11:
            _context8.prev = 11;
            _context8.t0 = _context8["catch"](0);
            console.log(_context8.t0);
            return _context8.abrupt("return", null);

          case 15:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8, this, [[0, 11]]);
  }));
  return _getFIOBalance.apply(this, arguments);
}

function getFIOSupplyBreakdown() {
  return _getFIOSupplyBreakdown.apply(this, arguments);
}

function _getFIOSupplyBreakdown() {
  _getFIOSupplyBreakdown = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {
    var tokenRes, supply, bpRewardRes, bpRewards, bpBucketRes, bpBucket, totalBp, circulating, totalLocked;
    return _regeneratorRuntime().wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            _context9.next = 2;
            return this.rpc.get_table_rows({
              code: "fio.token",
              scope: "FIO",
              table: "stat"
            });

          case 2:
            tokenRes = _context9.sent;
            supply = +tokenRes.rows[0].supply.split(' ')[0];
            _context9.next = 6;
            return this.rpc.get_table_rows({
              code: "fio.treasury",
              scope: "fio.treasury",
              table: "bprewards"
            });

          case 6:
            bpRewardRes = _context9.sent;
            bpRewards = bpRewardRes.rows[0].rewards / Math.pow(10, this.constants.CORE_PRECISION);
            _context9.next = 10;
            return this.rpc.get_table_rows({
              code: "fio.treasury",
              scope: "fio.treasury",
              table: "bpbucketpool"
            });

          case 10:
            bpBucketRes = _context9.sent;
            bpBucket = bpBucketRes.rows[0].rewards / Math.pow(10, this.constants.CORE_PRECISION);
            totalBp = bpRewards + bpBucket; // const totalLocked = baseLocked + totalBp
            // const circulating = supply - totalLocked

            _context9.next = 15;
            return this.get('https://fioprotocol.io/circulating');

          case 15:
            circulating = _context9.sent;
            totalLocked = supply - +circulating;
            return _context9.abrupt("return", {
              supply: supply,
              totalLocked: totalLocked,
              bpRewards: bpRewards,
              bpBucket: bpBucket,
              totalBp: totalBp,
              circulating: circulating
            });

          case 18:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9, this);
  }));
  return _getFIOSupplyBreakdown.apply(this, arguments);
}

function getFIOFees() {
  return _getFIOFees.apply(this, arguments);
}

function _getFIOFees() {
  _getFIOFees = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {
    return _regeneratorRuntime().wrap(function _callee10$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            return _context10.abrupt("return", this.rpc.get_table_rows({
              code: 'fio.fee',
              scope: 'fio.fee',
              table: 'fiofees',
              limit: -1
            }).then(function (result) {
              return result.rows;
            })["catch"](function (_) {
              return [];
            }));

          case 1:
          case "end":
            return _context10.stop();
        }
      }
    }, _callee10, this);
  }));
  return _getFIOFees.apply(this, arguments);
}

function addFIOFeeToActions(_x11, _x12) {
  return _addFIOFeeToActions.apply(this, arguments);
}

function _addFIOFeeToActions() {
  _addFIOFeeToActions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(actions, actor) {
    var _this = this;

    var fioFeesMap, fees, modifiedActions, _loop, _iterator, _step;

    return _regeneratorRuntime().wrap(function _callee11$(_context12) {
      while (1) {
        switch (_context12.prev = _context12.next) {
          case 0:
            fioFeesMap = {
              'eosio::deleteauth': 'auth_delete',
              'eosio::linkauth': 'auth_link',
              'eosio::regproducer': 'register_producer',
              'eosio::regproxy': 'register_proxy',
              'eosio::unregprod': 'unregister_producer',
              'eosio::unregproxy': 'unregister_proxy',
              'eosio::updateauth': 'auth_update',
              'eosio::voteproducer': 'vote_producer',
              'eosio::voteproxy': 'proxy_vote',
              'fio.token::trnsfiopubky': 'transfer_tokens_pub_key',
              'fio.address::addaddress': 'add_pub_address',
              'fio.address::regaddress': 'register_fio_address',
              'fio.address::regdomain': 'register_fio_domain',
              'fio.address::renewaddress': 'renew_fio_address',
              'fio.address::renewdomain': 'renew_fio_domain',
              'fio.address::setdomainpub': 'set_fio_domain_public',
              'eosio.msig::approve': 'msig_approve',
              'eosio.msig::cancel': 'msig_cancel',
              'eosio.msig::exec': 'msig_exec',
              'eosio.msig::invalidate': 'msig_invalidate',
              'eosio.msig::propose': 'msig_propose',
              'eosio.msig::unapprove': 'msig_approve',
              'fio.reqobt::newfundsreq': 'new_funds_request',
              'fio.reqobt::rejectfndreq': 'reject_funds_request',
              'fio.reqobt::cancelfndreq': 'cancelfndreq',
              'fio.reqobt::recordobt': 'record_obt_data',
              'fio.reqobt::newpubaddreq': 'new_pub_address_request',
              'fio.reqobt::relpubadd': 'release_pub_address',
              'fio.reqobt::rejectaddreq': 'reject_pub_address_request',
              'fio.reqobt::canceladdreq': 'cancel_pub_address_request',
              'fio.lock::trnsloctoks': 'transfer_locked_tokens',
              'fio.lock::locktokens': 'lock_tokens',
              'fio.address::remaddress': 'remove_pub_address',
              'fio.address::remalladdr': 'remove_all_pub_addresses',
              'fio.address::burnaddress': 'burn_fio_address',
              'fio.address::xferdomain': 'transfer_fio_domain',
              'fio.address::xferaddress': 'transfer_fio_address'
            };
            _context12.next = 3;
            return this.getFIOFees();

          case 3:
            fees = _context12.sent;
            modifiedActions = [];
            _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop() {
              var action, _yield$_this$api$getC, _yield$_this$api$getC2, abiActions, abiStructs, relevantAction, relevantStruct, maxFeeField, endpoint, relevantFee, actorField, tpidField, addressField, addresses;

              return _regeneratorRuntime().wrap(function _loop$(_context11) {
                while (1) {
                  switch (_context11.prev = _context11.next) {
                    case 0:
                      action = _step.value;
                      _context11.next = 3;
                      return _this.api.getCachedAbi(action.account);

                    case 3:
                      _yield$_this$api$getC = _context11.sent;
                      _yield$_this$api$getC2 = _yield$_this$api$getC.abi;
                      abiActions = _yield$_this$api$getC2.actions;
                      abiStructs = _yield$_this$api$getC2.structs;
                      relevantAction = abiActions.find(function (abiAction) {
                        return abiAction.name === action.name;
                      });

                      if (!relevantAction) {
                        _context11.next = 23;
                        break;
                      }

                      relevantStruct = abiStructs.find(function (abiStruct) {
                        return abiStruct.name === relevantAction.type;
                      });

                      if (!relevantStruct) {
                        _context11.next = 23;
                        break;
                      }

                      maxFeeField = relevantStruct.fields.find(function (field) {
                        return field.name === "max_fee";
                      });

                      if (maxFeeField && action.data.max_fee === undefined) {
                        endpoint = fioFeesMap[action.account + "::" + action.name];

                        if (endpoint) {
                          relevantFee = fees.find(function (fee) {
                            return fee.end_point === endpoint;
                          });

                          if (relevantFee) {
                            action.data.max_fee = relevantFee.suf_amount;
                          } else {
                            action.data.max_fee = 0;
                          }
                        }
                      }

                      actorField = relevantStruct.fields.find(function (field) {
                        return field.name === "actor";
                      });

                      if (actorField && action.data.actor === undefined) {
                        action.data.actor = actor;
                      }

                      tpidField = relevantStruct.fields.find(function (field) {
                        return field.name === "tpid";
                      });

                      if (tpidField && action.data.tpid === undefined) {
                        action.data.tpid = _this.constants.FIO_FEES_ACCOUNT;
                      }

                      addressField = relevantStruct.fields.find(function (field) {
                        return field.name === "fio_address";
                      });

                      if (!(addressField && action.data.fio_address === undefined)) {
                        _context11.next = 23;
                        break;
                      }

                      _context11.next = 21;
                      return _this.getFIOAddresses(actor);

                    case 21:
                      addresses = _context11.sent;

                      if (addresses.length) {
                        action.data.fio_address = addresses[0].name;
                      }

                    case 23:
                      modifiedActions.push(action);

                    case 24:
                    case "end":
                      return _context11.stop();
                  }
                }
              }, _loop);
            });
            _iterator = _createForOfIteratorHelperLoose(actions);

          case 7:
            if ((_step = _iterator()).done) {
              _context12.next = 11;
              break;
            }

            return _context12.delegateYield(_loop(), "t0", 9);

          case 9:
            _context12.next = 7;
            break;

          case 11:
            return _context12.abrupt("return", modifiedActions);

          case 12:
          case "end":
            return _context12.stop();
        }
      }
    }, _callee11, this);
  }));
  return _addFIOFeeToActions.apply(this, arguments);
}

function getFIOAddresses(account) {
  return this.rpc.get_table_rows({
    code: 'fio.address',
    scope: 'fio.address',
    table: 'fionames',
    key_type: 'i64',
    limit: -1,
    lower_bound: (0,_bloks_utils__WEBPACK_IMPORTED_MODULE_4__.encodeName)(account, false),
    upper_bound: new bignumber_js__WEBPACK_IMPORTED_MODULE_6__.BigNumber((0,_bloks_utils__WEBPACK_IMPORTED_MODULE_4__.encodeName)(account, false)).plus(1).toString(),
    index_position: 4
  }).then(function (result) {
    if (result.rows.length > 0) {
      return result.rows.filter(function (row) {
        return row.owner_account === account;
      });
    } else {
      return [];
    }
  })["catch"](function (_) {
    return [];
  });
}
function getFIODomains(account) {
  return this.rpc.get_table_rows({
    code: 'fio.address',
    scope: 'fio.address',
    table: 'domains',
    key_type: 'i64',
    limit: -1,
    lower_bound: (0,_bloks_utils__WEBPACK_IMPORTED_MODULE_4__.encodeName)(account, false),
    upper_bound: new bignumber_js__WEBPACK_IMPORTED_MODULE_6__.BigNumber((0,_bloks_utils__WEBPACK_IMPORTED_MODULE_4__.encodeName)(account, false)).plus(1).toString(),
    index_position: 2
  }).then(function (result) {
    if (result.rows.length > 0) {
      return result.rows.filter(function (row) {
        return row.account === account;
      });
    } else {
      return [];
    }
  })["catch"](function (_) {
    return [];
  });
}
function getFIOAddressesAndDomains(fio_public_key) {
  return post(this.constants.DEFAULT_ENDPOINTS[0] + "/v1/get_fio_names", {
    fio_public_key: fio_public_key
  });
}

function getAllMsigs() {
  return _getAllMsigs.apply(this, arguments);
}

function _getAllMsigs() {
  _getAllMsigs = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
    var _yield$this$get, tables, rows, lower_bound, result;

    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!this.constants.HISTORY_TYPES.includes('dfuse')) {
              _context.next = 9;
              break;
            }

            _context.next = 3;
            return this.get((0,_bloks_utils__WEBPACK_IMPORTED_MODULE_4__.urlBuilder)(this.constants.API_URL, 'dfuse', {
              type: 'state_scope_pipeline',
              account: this.constants.EOSIO_MSIG,
              table: this.constants.EOSIO_MSIG_PROPOSALS_TABLE,
              options: {}
            }));

          case 3:
            _yield$this$get = _context.sent;
            tables = _yield$this$get.tables;
            tables = tables.map(function (table) {
              table.rows = table.rows.sort(function (a, b) {
                return b.block - a.block;
              });
              table.highestBlock = table.rows[0].block;
              return table;
            }).sort(function (a, b) {
              return b.highestBlock - a.highestBlock;
            });
            return _context.abrupt("return", tables);

          case 9:
            rows = [];
            lower_bound = '';

          case 11:
            _context.next = 13;
            return this.rpc.get_table_by_scope({
              json: true,
              code: 'eosio.msig',
              limit: 100,
              lower_bound: lower_bound,
              table: 'proposal',
              upper_bound: ''
            });

          case 13:
            result = _context.sent;
            lower_bound = result.more;
            rows = rows.concat(result.rows);

          case 16:
            if (lower_bound) {
              _context.next = 11;
              break;
            }

          case 17:
            return _context.abrupt("return", rows.map(function (row) {
              return {
                scope: row.scope,
                rows: Array(row.count).fill({
                  key: ''
                })
              };
            }));

          case 18:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));
  return _getAllMsigs.apply(this, arguments);
}

function getMsigProposal(_x, _x2) {
  return _getMsigProposal.apply(this, arguments);
}

function _getMsigProposal() {
  _getMsigProposal = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(accountName, proposalName) {
    var _yield$this$rpc$get_t, rows;

    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return this.rpc.get_table_rows({
              json: true,
              code: 'eosio.msig',
              scope: accountName,
              limit: 1,
              lower_bound: proposalName,
              table: 'proposal'
            });

          case 2:
            _yield$this$rpc$get_t = _context2.sent;
            rows = _yield$this$rpc$get_t.rows;

            if (!(rows && rows.length && rows[0].proposal_name === proposalName)) {
              _context2.next = 8;
              break;
            }

            return _context2.abrupt("return", rows[0]);

          case 8:
            return _context2.abrupt("return", undefined);

          case 9:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));
  return _getMsigProposal.apply(this, arguments);
}

function parsePackedMsigActions(_x3) {
  return _parsePackedMsigActions.apply(this, arguments);
}

function _parsePackedMsigActions() {
  _parsePackedMsigActions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(packedActions) {
    var actions, _iterator, _step, action;

    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            actions = [];
            _iterator = _createForOfIteratorHelperLoose(packedActions);

          case 2:
            if ((_step = _iterator()).done) {
              _context3.next = 15;
              break;
            }

            action = _step.value;

            if (!(action.account === this.constants.EOSIO_MSIG && action.name === 'propose')) {
              _context3.next = 8;
              break;
            }

            _context3.next = 7;
            return this.api.deserializeActionsSync(action.data.trx.actions);

          case 7:
            action.data.trx.actions = _context3.sent;

          case 8:
            if (!(action.account === this.constants.EOSIO && action.name === 'setabi')) {
              _context3.next = 12;
              break;
            }

            _context3.next = 11;
            return this.api.rawAbiToJson((0,_bloks_utils__WEBPACK_IMPORTED_MODULE_4__.hexToUint8Array)(action.data.abi));

          case 11:
            action.data.abi = _context3.sent;

          case 12:
            actions.push(action);

          case 13:
            _context3.next = 2;
            break;

          case 15:
            actions = actions.map(function (action) {
              return {
                action_trace: {
                  act: action
                }
              };
            });
            return _context3.abrupt("return", actions);

          case 17:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));
  return _parsePackedMsigActions.apply(this, arguments);
}

function parsePackedMsig(_x4) {
  return _parsePackedMsig.apply(this, arguments);
}

function _parsePackedMsig() {
  _parsePackedMsig = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(packed_transaction) {
    var tx;
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.prev = 0;
            _context4.next = 3;
            return this.api.deserializeTransactionWithActions(packed_transaction);

          case 3:
            tx = _context4.sent;
            _context4.next = 6;
            return this.parsePackedMsigActions(tx.actions);

          case 6:
            tx.actions = _context4.sent;
            return _context4.abrupt("return", tx);

          case 10:
            _context4.prev = 10;
            _context4.t0 = _context4["catch"](0);
            console.log('Error parsing packed msig');
            console.log(_context4.t0);

          case 14:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4, this, [[0, 10]]);
  }));
  return _parsePackedMsig.apply(this, arguments);
}

function getFullMsigProposal(_x5, _x6) {
  return _getFullMsigProposal.apply(this, arguments);
}

function _getFullMsigProposal() {
  _getFullMsigProposal = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(account_name, proposal_name) {
    var result;
    return _regeneratorRuntime().wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.prev = 0;
            _context5.next = 3;
            return this.rpc.get_table_rows({
              json: true,
              code: this.constants.EOSIO_MSIG,
              scope: (0,_bloks_utils__WEBPACK_IMPORTED_MODULE_4__.encodeName)(account_name, false),
              table: this.constants.EOSIO_MSIG_PROPOSALS_TABLE,
              table_key: '',
              key_type: 'name',
              lower_bound: proposal_name,
              index_position: 1,
              limit: 1
            });

          case 3:
            result = _context5.sent;

            if (!(result && result.rows && result.rows.length)) {
              _context5.next = 8;
              break;
            }

            _context5.next = 7;
            return this.parsePackedMsig(result.rows[0].packed_transaction);

          case 7:
            return _context5.abrupt("return", _context5.sent);

          case 8:
            _context5.next = 13;
            break;

          case 10:
            _context5.prev = 10;
            _context5.t0 = _context5["catch"](0);
            console.log(_context5.t0);

          case 13:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5, this, [[0, 10]]);
  }));
  return _getFullMsigProposal.apply(this, arguments);
}

function getMsigApprovals(_x7, _x8) {
  return _getMsigApprovals.apply(this, arguments);
}

function _getMsigApprovals() {
  _getMsigApprovals = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(account, table) {
    var _yield$this$rpc$get_t2, rows;

    return _regeneratorRuntime().wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.prev = 0;
            _context6.next = 3;
            return this.rpc.get_table_rows({
              json: true,
              code: this.constants.EOSIO_MSIG,
              scope: (0,_bloks_utils__WEBPACK_IMPORTED_MODULE_4__.encodeName)(account, false),
              table: table,
              limit: -1
            });

          case 3:
            _yield$this$rpc$get_t2 = _context6.sent;
            rows = _yield$this$rpc$get_t2.rows;
            return _context6.abrupt("return", rows);

          case 8:
            _context6.prev = 8;
            _context6.t0 = _context6["catch"](0);
            console.log(_context6.t0);
            return _context6.abrupt("return", []);

          case 12:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6, this, [[0, 8]]);
  }));
  return _getMsigApprovals.apply(this, arguments);
}

function getAccountsMsigProposals(_x9) {
  return _getAccountsMsigProposals.apply(this, arguments);
}

function _getAccountsMsigProposals() {
  _getAccountsMsigProposals = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(account) {
    var promises, _yield$Promise$all, rows2, rows1;

    return _regeneratorRuntime().wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            _context7.prev = 0;
            promises = [this.getMsigApprovals(account, this.constants.EOSIO_MSIG_APPROVALS_TABLE)];

            if (this.constants.EOSIO_MSIG_APPROVALS_TABLE === 'approvals2') {
              promises.push(this.getMsigApprovals(account, 'approvals'));
            }

            _context7.next = 5;
            return Promise.all(promises);

          case 5:
            _yield$Promise$all = _context7.sent;
            rows2 = _yield$Promise$all[0];
            rows1 = _yield$Promise$all[1];
            return _context7.abrupt("return", rows2.concat(rows1));

          case 11:
            _context7.prev = 11;
            _context7.t0 = _context7["catch"](0);
            console.log(_context7.t0);
            return _context7.abrupt("return", []);

          case 15:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7, this, [[0, 11]]);
  }));
  return _getAccountsMsigProposals.apply(this, arguments);
}

function hyperionGetMsig(_x10) {
  return _hyperionGetMsig.apply(this, arguments);
}

function _hyperionGetMsig() {
  _hyperionGetMsig = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(msigFilters) {
    var res, executionTransaction, transaction, proposal, _yield$Promise$all2, actionsRes, actionsRes2, relevantAction, tx;

    return _regeneratorRuntime().wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            if (this.hyperion) {
              _context8.next = 2;
              break;
            }

            return _context8.abrupt("return", undefined);

          case 2:
            _context8.next = 4;
            return this.hyperion.get_proposals(msigFilters);

          case 4:
            res = _context8.sent;

            if (!(res && res.proposals && res.proposals.length)) {
              _context8.next = 22;
              break;
            }

            proposal = res.proposals[0];
            _context8.next = 9;
            return Promise.all([this.hyperion.get_actions(this.constants.EOSIO_MSIG, {
              block_num: proposal.block_num,
              limit: 1
            }), this.hyperion.get_deltas(this.constants.EOSIO_MSIG, msigFilters.proposer, 'proposal', undefined, {
              block_num: proposal.block_num
            })]);

          case 9:
            _yield$Promise$all2 = _context8.sent;
            actionsRes = _yield$Promise$all2[0];
            actionsRes2 = _yield$Promise$all2[1];

            if (actionsRes && actionsRes.actions && actionsRes.actions.length) {
              relevantAction = actionsRes.actions.find(function (action) {
                return action.act.data.proposal_name === msigFilters.proposal;
              });

              if (relevantAction) {
                executionTransaction = {
                  payer: relevantAction.act.data.executer || relevantAction.act.data.canceler,
                  trx_id: relevantAction.trx_id,
                  published_at: relevantAction.timestamp,
                  cancelled: relevantAction.act.name === 'cancel'
                };
              }
            }

            if (!(actionsRes2 && actionsRes2.deltas && actionsRes2.deltas.length)) {
              _context8.next = 19;
              break;
            }

            tx = actionsRes2.deltas[0].data.transaction;
            _context8.next = 17;
            return this.parsePackedMsigActions(tx.actions);

          case 17:
            tx.actions = _context8.sent;
            transaction = tx;

          case 19:
            return _context8.abrupt("return", {
              approvals: proposal,
              transaction: transaction,
              executionTransaction: executionTransaction
            });

          case 22:
            return _context8.abrupt("return", undefined);

          case 23:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8, this);
  }));
  return _hyperionGetMsig.apply(this, arguments);
}

function getVoter(_x) {
  return _getVoter.apply(this, arguments);
}

function _getVoter() {
  _getVoter = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(account) {
    var _yield$this$rpc$get_t, rows;

    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return this.rpc.get_table_rows({
              json: true,
              code: this.constants.EOSIO,
              scope: this.constants.EOSIO,
              lower_bound: (0,_bloks_utils__WEBPACK_IMPORTED_MODULE_4__.encodeName)(account, false),
              upper_bound: (0,_bloks_utils__WEBPACK_IMPORTED_MODULE_4__.encodeName)(account, false),
              table: 'voters',
              limit: 1
            });

          case 3:
            _yield$this$rpc$get_t = _context.sent;
            rows = _yield$this$rpc$get_t.rows;
            return _context.abrupt("return", rows.length ? rows[0] : undefined);

          case 8:
            _context.prev = 8;
            _context.t0 = _context["catch"](0);
            console.log(_context.t0);
            return _context.abrupt("return", undefined);

          case 12:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this, [[0, 8]]);
  }));
  return _getVoter.apply(this, arguments);
}

function getProxies() {
  return _getProxies.apply(this, arguments);
}

function _getProxies() {
  _getProxies = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
    var _this = this;

    var _yield$this$get, proxies, _yield$this$hyperion$, voters;

    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!(this.constants.ALOHA_PROXY_URL !== '')) {
              _context2.next = 8;
              break;
            }

            _context2.next = 3;
            return this.get(this.constants.ALOHA_PROXY_URL + "?output=json");

          case 3:
            _yield$this$get = _context2.sent;
            proxies = _yield$this$get.proxies;
            return _context2.abrupt("return", proxies);

          case 8:
            _context2.next = 10;
            return this.hyperion.get_voters({
              proxy: true,
              limit: 1000
            });

          case 10:
            _yield$this$hyperion$ = _context2.sent;
            voters = _yield$this$hyperion$.voters;
            return _context2.abrupt("return", voters.map(function (voter, index) {
              return _extends({}, voter, {
                weight: voter.weight / Math.pow(10, _this.constants.CORE_PRECISION),
                rank: index + 1
              });
            }));

          case 13:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));
  return _getProxies.apply(this, arguments);
}

function getVoters(_x2) {
  return _getVoters.apply(this, arguments);
}

function _getVoters() {
  _getVoters = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(producer) {
    var _this2 = this;

    var _yield$this$hyperion$2, voters, voteWeight;

    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (!this.hyperion) {
              _context3.next = 9;
              break;
            }

            _context3.next = 3;
            return this.hyperion.get_voters({
              producer: producer,
              limit: 100
            });

          case 3:
            _yield$this$hyperion$2 = _context3.sent;
            voters = _yield$this$hyperion$2.voters;
            voteWeight = this.calculateVoteWeight();
            return _context3.abrupt("return", voters.map(function (voter) {
              return _extends({}, voter, {
                vote: _this2.weightedVoteToNumber(voter.weight, voteWeight)
              });
            }));

          case 9:
            return _context3.abrupt("return", undefined);

          case 10:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));
  return _getVoters.apply(this, arguments);
}

function calculateVoteWeight() {
  var decayWeeks = this.constants.CHAIN === 'wax' ? 13 : 52;
  var timestamp_epoch = 946684800000;
  var dates = Date.now() / 1000 - timestamp_epoch / 1000;
  var weight = Math.floor(dates / (86400 * 7)) / decayWeeks;
  return Math.pow(2, weight);
}
function weightedVoteToNumber(weightedVote, voteWeight) {
  if (!voteWeight) {
    voteWeight = this.calculateVoteWeight();
  }

  return +weightedVote / voteWeight / Math.pow(10, this.constants.CORE_PRECISION);
}
function getProxyData(_x3) {
  return _getProxyData.apply(this, arguments);
}

function _getProxyData() {
  _getProxyData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(accountName) {
    var _yield$this$get2, proxy;

    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            if (!(this.constants.ALOHA_PROXY_URL !== '')) {
              _context4.next = 8;
              break;
            }

            _context4.next = 3;
            return this.get(this.constants.ALOHA_PROXY_URL + "/" + accountName + "?output=json");

          case 3:
            _yield$this$get2 = _context4.sent;
            proxy = _yield$this$get2.proxy;
            return _context4.abrupt("return", proxy);

          case 8:
            return _context4.abrupt("return", undefined);

          case 9:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4, this);
  }));
  return _getProxyData.apply(this, arguments);
}

function getProducersLocal() {
  return _getProducersLocal.apply(this, arguments);
}

function _getProducersLocal() {
  _getProducersLocal = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
    var more, rows, result, lower_bound;
    return _regeneratorRuntime().wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            more = true;
            rows = [];
            result = null;
            lower_bound = null;

          case 4:
            _context5.next = 6;
            return this.rpc.get_table_rows({
              json: true,
              code: this.constants.EOSIO,
              scope: this.constants.EOSIO,
              table: 'producers',
              lower_bound: lower_bound,
              index_position: 1,
              key_type: 'i64',
              limit: 100
            });

          case 6:
            result = _context5.sent;
            more = result.more;
            rows = rows.concat(result.rows);
            lower_bound = new bignumber_js__WEBPACK_IMPORTED_MODULE_6__.BigNumber((0,_bloks_utils__WEBPACK_IMPORTED_MODULE_4__.encodeName)(rows[rows.length - 1].owner, false)).plus(1).toString();

          case 10:
            if (more) {
              _context5.next = 4;
              break;
            }

          case 11:
            return _context5.abrupt("return", rows);

          case 12:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5, this);
  }));
  return _getProducersLocal.apply(this, arguments);
}

function getProducers(_x4, _x5, _x6) {
  return _getProducers.apply(this, arguments);
}

function _getProducers() {
  _getProducers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(pageNum, perPage, local) {
    return _regeneratorRuntime().wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            if (pageNum === void 0) {
              pageNum = 1;
            }

            if (perPage === void 0) {
              perPage = 50;
            }

            if (local === void 0) {
              local = false;
            }

            if (!(this.constants.API_URL !== '' && !local)) {
              _context6.next = 9;
              break;
            }

            _context6.next = 6;
            return this.get((0,_bloks_utils__WEBPACK_IMPORTED_MODULE_4__.urlBuilder)(this.constants.API_URL, 'producers', {
              pageNum: pageNum,
              perPage: perPage
            }));

          case 6:
            return _context6.abrupt("return", _context6.sent);

          case 9:
            return _context6.abrupt("return", this.getProducersLocal());

          case 10:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6, this);
  }));
  return _getProducers.apply(this, arguments);
}

function getChainTable() {
  return _getChainTable.apply(this, arguments);
}

function _getChainTable() {
  _getChainTable = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {
    var _yield$this$rpc$get_t2, rows;

    return _regeneratorRuntime().wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            _context7.next = 2;
            return this.rpc.get_table_rows({
              code: this.constants.EOSIO,
              scope: this.constants.EOSIO,
              table: 'global',
              limit: 1
            });

          case 2:
            _yield$this$rpc$get_t2 = _context7.sent;
            rows = _yield$this$rpc$get_t2.rows;
            return _context7.abrupt("return", rows[0]);

          case 5:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7, this);
  }));
  return _getChainTable.apply(this, arguments);
}

var KycStatus;

(function (KycStatus) {
  KycStatus["FAILED"] = "FAILED";
  KycStatus["UNSUBMITTED"] = "UNSUBMITTED";
  KycStatus["PENDING"] = "PENDING";
  KycStatus["PASSED"] = "PASSED";
})(KycStatus || (KycStatus = {}));

var countryOptions = [{
  key: 'AF',
  value: 'AF',
  flag: 'af',
  text: 'Afghanistan'
}, {
  key: 'AX',
  value: 'AX',
  flag: 'ax',
  text: 'Aland Islands'
}, {
  key: 'AL',
  value: 'AL',
  flag: 'al',
  text: 'Albania'
}, {
  key: 'DZ',
  value: 'DZ',
  flag: 'dz',
  text: 'Algeria'
}, {
  key: 'AS',
  value: 'AS',
  flag: 'as',
  text: 'American Samoa'
}, {
  key: 'AD',
  value: 'AD',
  flag: 'ad',
  text: 'Andorra'
}, {
  key: 'AO',
  value: 'AO',
  flag: 'ao',
  text: 'Angola'
}, {
  key: 'AI',
  value: 'AI',
  flag: 'ai',
  text: 'Anguilla'
}, {
  key: 'AG',
  value: 'AG',
  flag: 'ag',
  text: 'Antigua'
}, {
  key: 'AR',
  value: 'AR',
  flag: 'ar',
  text: 'Argentina'
}, {
  key: 'AM',
  value: 'AM',
  flag: 'am',
  text: 'Armenia'
}, {
  key: 'AW',
  value: 'AW',
  flag: 'aw',
  text: 'Aruba'
}, {
  key: 'AU',
  value: 'AU',
  flag: 'au',
  text: 'Australia'
}, {
  key: 'AT',
  value: 'AT',
  flag: 'at',
  text: 'Austria'
}, {
  key: 'AZ',
  value: 'AZ',
  flag: 'az',
  text: 'Azerbaijan'
}, {
  key: 'BS',
  value: 'BS',
  flag: 'bs',
  text: 'Bahamas'
}, {
  key: 'BH',
  value: 'BH',
  flag: 'bh',
  text: 'Bahrain'
}, {
  key: 'BD',
  value: 'BD',
  flag: 'bd',
  text: 'Bangladesh'
}, {
  key: 'BB',
  value: 'BB',
  flag: 'bb',
  text: 'Barbados'
}, {
  key: 'BY',
  value: 'BY',
  flag: 'by',
  text: 'Belarus'
}, {
  key: 'BE',
  value: 'BE',
  flag: 'be',
  text: 'Belgium'
}, {
  key: 'BZ',
  value: 'BZ',
  flag: 'bz',
  text: 'Belize'
}, {
  key: 'BJ',
  value: 'BJ',
  flag: 'bj',
  text: 'Benin'
}, {
  key: 'BM',
  value: 'BM',
  flag: 'bm',
  text: 'Bermuda'
}, {
  key: 'BT',
  value: 'BT',
  flag: 'bt',
  text: 'Bhutan'
}, {
  key: 'BO',
  value: 'BO',
  flag: 'bo',
  text: 'Bolivia'
}, {
  key: 'BA',
  value: 'BA',
  flag: 'ba',
  text: 'Bosnia'
}, {
  key: 'BW',
  value: 'BW',
  flag: 'bw',
  text: 'Botswana'
}, {
  key: 'BV',
  value: 'BV',
  flag: 'bv',
  text: 'Bouvet Island'
}, {
  key: 'BR',
  value: 'BR',
  flag: 'br',
  text: 'Brazil'
}, {
  key: 'VG',
  value: 'VG',
  flag: 'vg',
  text: 'British Virgin Islands'
}, {
  key: 'BN',
  value: 'BN',
  flag: 'bn',
  text: 'Brunei'
}, {
  key: 'BG',
  value: 'BG',
  flag: 'bg',
  text: 'Bulgaria'
}, {
  key: 'BF',
  value: 'BF',
  flag: 'bf',
  text: 'Burkina Faso'
}, {
  key: 'BI',
  value: 'BI',
  flag: 'bi',
  text: 'Burundi'
}, {
  key: 'TC',
  value: 'TC',
  flag: 'tc',
  text: 'Caicos Islands'
}, {
  key: 'KH',
  value: 'KH',
  flag: 'kh',
  text: 'Cambodia'
}, {
  key: 'CM',
  value: 'CM',
  flag: 'cm',
  text: 'Cameroon'
}, {
  key: 'CA',
  value: 'CA',
  flag: 'ca',
  text: 'Canada'
}, {
  key: 'CV',
  value: 'CV',
  flag: 'cv',
  text: 'Cape Verde'
}, {
  key: 'KY',
  value: 'KY',
  flag: 'ky',
  text: 'Cayman Islands'
}, {
  key: 'CF',
  value: 'CF',
  flag: 'cf',
  text: 'Central African Republic'
}, {
  key: 'TD',
  value: 'TD',
  flag: 'td',
  text: 'Chad'
}, {
  key: 'CL',
  value: 'CL',
  flag: 'cl',
  text: 'Chile'
}, {
  key: 'CN',
  value: 'CN',
  flag: 'cn',
  text: 'China'
}, {
  key: 'CX',
  value: 'CX',
  flag: 'cx',
  text: 'Christmas Island'
}, {
  key: 'CC',
  value: 'CC',
  flag: 'cc',
  text: 'Cocos Islands'
}, {
  key: 'CO',
  value: 'CO',
  flag: 'co',
  text: 'Colombia'
}, {
  key: 'KM',
  value: 'KM',
  flag: 'km',
  text: 'Comoros'
}, {
  key: 'CG',
  value: 'CG',
  flag: 'cg',
  text: 'Congo Brazzaville'
}, {
  key: 'CD',
  value: 'CD',
  flag: 'cd',
  text: 'Congo'
}, {
  key: 'CK',
  value: 'CK',
  flag: 'ck',
  text: 'Cook Islands'
}, {
  key: 'CR',
  value: 'CR',
  flag: 'cr',
  text: 'Costa Rica'
}, {
  key: 'CI',
  value: 'CI',
  flag: 'ci',
  text: 'Cote Divoire'
}, {
  key: 'HR',
  value: 'HR',
  flag: 'hr',
  text: 'Croatia'
}, {
  key: 'CU',
  value: 'CU',
  flag: 'cu',
  text: 'Cuba'
}, {
  key: 'CY',
  value: 'CY',
  flag: 'cy',
  text: 'Cyprus'
}, {
  key: 'CZ',
  value: 'CZ',
  flag: 'cz',
  text: 'Czech Republic'
}, {
  key: 'DK',
  value: 'DK',
  flag: 'dk',
  text: 'Denmark'
}, {
  key: 'DJ',
  value: 'DJ',
  flag: 'dj',
  text: 'Djibouti'
}, {
  key: 'DM',
  value: 'DM',
  flag: 'dm',
  text: 'Dominica'
}, {
  key: 'DO',
  value: 'DO',
  flag: 'do',
  text: 'Dominican Republic'
}, {
  key: 'EC',
  value: 'EC',
  flag: 'ec',
  text: 'Ecuador'
}, {
  key: 'EG',
  value: 'EG',
  flag: 'eg',
  text: 'Egypt'
}, {
  key: 'SV',
  value: 'SV',
  flag: 'sv',
  text: 'El Salvador'
}, {
  key: 'GB',
  value: 'GB',
  flag: 'gb',
  text: 'England'
}, {
  key: 'GQ',
  value: 'GQ',
  flag: 'gq',
  text: 'Equatorial Guinea'
}, {
  key: 'ER',
  value: 'ER',
  flag: 'er',
  text: 'Eritrea'
}, {
  key: 'EE',
  value: 'EE',
  flag: 'ee',
  text: 'Estonia'
}, {
  key: 'ET',
  value: 'ET',
  flag: 'et',
  text: 'Ethiopia'
}, {
  key: 'EU',
  value: 'EU',
  flag: 'eu',
  text: 'European Union'
}, {
  key: 'FK',
  value: 'FK',
  flag: 'fk',
  text: 'Falkland Islands'
}, {
  key: 'FO',
  value: 'FO',
  flag: 'fo',
  text: 'Faroe Islands'
}, {
  key: 'FJ',
  value: 'FJ',
  flag: 'fj',
  text: 'Fiji'
}, {
  key: 'FI',
  value: 'FI',
  flag: 'fi',
  text: 'Finland'
}, {
  key: 'FR',
  value: 'FR',
  flag: 'fr',
  text: 'France'
}, {
  key: 'GF',
  value: 'GF',
  flag: 'gf',
  text: 'French Guiana'
}, {
  key: 'PF',
  value: 'PF',
  flag: 'pf',
  text: 'French Polynesia'
}, {
  key: 'TF',
  value: 'TF',
  flag: 'tf',
  text: 'French Territories'
}, {
  key: 'GA',
  value: 'GA',
  flag: 'ga',
  text: 'Gabon'
}, {
  key: 'GM',
  value: 'GM',
  flag: 'gm',
  text: 'Gambia'
}, {
  key: 'GE',
  value: 'GE',
  flag: 'ge',
  text: 'Georgia'
}, {
  key: 'DE',
  value: 'DE',
  flag: 'de',
  text: 'Germany'
}, {
  key: 'GH',
  value: 'GH',
  flag: 'gh',
  text: 'Ghana'
}, {
  key: 'GI',
  value: 'GI',
  flag: 'gi',
  text: 'Gibraltar'
}, {
  key: 'GR',
  value: 'GR',
  flag: 'gr',
  text: 'Greece'
}, {
  key: 'GL',
  value: 'GL',
  flag: 'gl',
  text: 'Greenland'
}, {
  key: 'GD',
  value: 'GD',
  flag: 'gd',
  text: 'Grenada'
}, {
  key: 'GP',
  value: 'GP',
  flag: 'gp',
  text: 'Guadeloupe'
}, {
  key: 'GU',
  value: 'GU',
  flag: 'gu',
  text: 'Guam'
}, {
  key: 'GT',
  value: 'GT',
  flag: 'gt',
  text: 'Guatemala'
}, {
  key: 'GW',
  value: 'GW',
  flag: 'gw',
  text: 'Guinea-Bissau'
}, {
  key: 'GN',
  value: 'GN',
  flag: 'gn',
  text: 'Guinea'
}, {
  key: 'GY',
  value: 'GY',
  flag: 'gy',
  text: 'Guyana'
}, {
  key: 'HT',
  value: 'HT',
  flag: 'ht',
  text: 'Haiti'
}, {
  key: 'HM',
  value: 'HM',
  flag: 'hm',
  text: 'Heard Island'
}, {
  key: 'HN',
  value: 'HN',
  flag: 'hn',
  text: 'Honduras'
}, {
  key: 'HK',
  value: 'HK',
  flag: 'hk',
  text: 'Hong Kong'
}, {
  key: 'HU',
  value: 'HU',
  flag: 'hu',
  text: 'Hungary'
}, {
  key: 'IS',
  value: 'IS',
  flag: 'is',
  text: 'Iceland'
}, {
  key: 'IN',
  value: 'IN',
  flag: 'in',
  text: 'India'
}, {
  key: 'IO',
  value: 'IO',
  flag: 'io',
  text: 'Indian Ocean Territory'
}, {
  key: 'ID',
  value: 'ID',
  flag: 'id',
  text: 'Indonesia'
}, {
  key: 'IR',
  value: 'IR',
  flag: 'ir',
  text: 'Iran'
}, {
  key: 'IQ',
  value: 'IQ',
  flag: 'iq',
  text: 'Iraq'
}, {
  key: 'IE',
  value: 'IE',
  flag: 'ie',
  text: 'Ireland'
}, {
  key: 'IL',
  value: 'IL',
  flag: 'il',
  text: 'Israel'
}, {
  key: 'IT',
  value: 'IT',
  flag: 'it',
  text: 'Italy'
}, {
  key: 'JM',
  value: 'JM',
  flag: 'jm',
  text: 'Jamaica'
}, {
  key: 'JP',
  value: 'JP',
  flag: 'jp',
  text: 'Japan'
}, {
  key: 'JO',
  value: 'JO',
  flag: 'jo',
  text: 'Jordan'
}, {
  key: 'KZ',
  value: 'KZ',
  flag: 'kz',
  text: 'Kazakhstan'
}, {
  key: 'KE',
  value: 'KE',
  flag: 'ke',
  text: 'Kenya'
}, {
  key: 'KI',
  value: 'KI',
  flag: 'ki',
  text: 'Kiribati'
}, {
  key: 'KW',
  value: 'KW',
  flag: 'kw',
  text: 'Kuwait'
}, {
  key: 'KG',
  value: 'KG',
  flag: 'kg',
  text: 'Kyrgyzstan'
}, {
  key: 'LA',
  value: 'LA',
  flag: 'la',
  text: 'Laos'
}, {
  key: 'LV',
  value: 'LV',
  flag: 'lv',
  text: 'Latvia'
}, {
  key: 'LB',
  value: 'LB',
  flag: 'lb',
  text: 'Lebanon'
}, {
  key: 'LS',
  value: 'LS',
  flag: 'ls',
  text: 'Lesotho'
}, {
  key: 'LR',
  value: 'LR',
  flag: 'lr',
  text: 'Liberia'
}, {
  key: 'LY',
  value: 'LY',
  flag: 'ly',
  text: 'Libya'
}, {
  key: 'LI',
  value: 'LI',
  flag: 'li',
  text: 'Liechtenstein'
}, {
  key: 'LT',
  value: 'LT',
  flag: 'lt',
  text: 'Lithuania'
}, {
  key: 'LU',
  value: 'LU',
  flag: 'lu',
  text: 'Luxembourg'
}, {
  key: 'MO',
  value: 'MO',
  flag: 'mo',
  text: 'Macau'
}, {
  key: 'MK',
  value: 'MK',
  flag: 'mk',
  text: 'Macedonia'
}, {
  key: 'MG',
  value: 'MG',
  flag: 'mg',
  text: 'Madagascar'
}, {
  key: 'MW',
  value: 'MW',
  flag: 'mw',
  text: 'Malawi'
}, {
  key: 'MY',
  value: 'MY',
  flag: 'my',
  text: 'Malaysia'
}, {
  key: 'MV',
  value: 'MV',
  flag: 'mv',
  text: 'Maldives'
}, {
  key: 'ML',
  value: 'ML',
  flag: 'ml',
  text: 'Mali'
}, {
  key: 'MT',
  value: 'MT',
  flag: 'mt',
  text: 'Malta'
}, {
  key: 'MH',
  value: 'MH',
  flag: 'mh',
  text: 'Marshall Islands'
}, {
  key: 'MQ',
  value: 'MQ',
  flag: 'mq',
  text: 'Martinique'
}, {
  key: 'MR',
  value: 'MR',
  flag: 'mr',
  text: 'Mauritania'
}, {
  key: 'MU',
  value: 'MU',
  flag: 'mu',
  text: 'Mauritius'
}, {
  key: 'YT',
  value: 'YT',
  flag: 'yt',
  text: 'Mayotte'
}, {
  key: 'MX',
  value: 'MX',
  flag: 'mx',
  text: 'Mexico'
}, {
  key: 'FM',
  value: 'FM',
  flag: 'fm',
  text: 'Micronesia'
}, {
  key: 'MD',
  value: 'MD',
  flag: 'md',
  text: 'Moldova'
}, {
  key: 'MC',
  value: 'MC',
  flag: 'mc',
  text: 'Monaco'
}, {
  key: 'MN',
  value: 'MN',
  flag: 'mn',
  text: 'Mongolia'
}, {
  key: 'ME',
  value: 'ME',
  flag: 'me',
  text: 'Montenegro'
}, {
  key: 'MS',
  value: 'MS',
  flag: 'ms',
  text: 'Montserrat'
}, {
  key: 'MA',
  value: 'MA',
  flag: 'ma',
  text: 'Morocco'
}, {
  key: 'MZ',
  value: 'MZ',
  flag: 'mz',
  text: 'Mozambique'
}, {
  key: 'NA',
  value: 'NA',
  flag: 'na',
  text: 'Namibia'
}, {
  key: 'NR',
  value: 'NR',
  flag: 'nr',
  text: 'Nauru'
}, {
  key: 'NP',
  value: 'NP',
  flag: 'np',
  text: 'Nepal'
}, {
  key: 'AN',
  value: 'AN',
  flag: 'an',
  text: 'Netherlands Antilles'
}, {
  key: 'NL',
  value: 'NL',
  flag: 'nl',
  text: 'Netherlands'
}, {
  key: 'NC',
  value: 'NC',
  flag: 'nc',
  text: 'New Caledonia'
}, {
  key: 'PG',
  value: 'PG',
  flag: 'pg',
  text: 'New Guinea'
}, {
  key: 'NZ',
  value: 'NZ',
  flag: 'nz',
  text: 'New Zealand'
}, {
  key: 'NI',
  value: 'NI',
  flag: 'ni',
  text: 'Nicaragua'
}, {
  key: 'NE',
  value: 'NE',
  flag: 'ne',
  text: 'Niger'
}, {
  key: 'NG',
  value: 'NG',
  flag: 'ng',
  text: 'Nigeria'
}, {
  key: 'NU',
  value: 'NU',
  flag: 'nu',
  text: 'Niue'
}, {
  key: 'NF',
  value: 'NF',
  flag: 'nf',
  text: 'Norfolk Island'
}, {
  key: 'KP',
  value: 'KP',
  flag: 'kp',
  text: 'North Korea'
}, {
  key: 'MP',
  value: 'MP',
  flag: 'mp',
  text: 'Northern Mariana Islands'
}, {
  key: 'NO',
  value: 'NO',
  flag: 'no',
  text: 'Norway'
}, {
  key: 'OM',
  value: 'OM',
  flag: 'om',
  text: 'Oman'
}, {
  key: 'PK',
  value: 'PK',
  flag: 'pk',
  text: 'Pakistan'
}, {
  key: 'PW',
  value: 'PW',
  flag: 'pw',
  text: 'Palau'
}, {
  key: 'PS',
  value: 'PS',
  flag: 'ps',
  text: 'Palestine'
}, {
  key: 'PA',
  value: 'PA',
  flag: 'pa',
  text: 'Panama'
}, {
  key: 'PY',
  value: 'PY',
  flag: 'py',
  text: 'Paraguay'
}, {
  key: 'PE',
  value: 'PE',
  flag: 'pe',
  text: 'Peru'
}, {
  key: 'PH',
  value: 'PH',
  flag: 'ph',
  text: 'Philippines'
}, {
  key: 'PN',
  value: 'PN',
  flag: 'pn',
  text: 'Pitcairn Islands'
}, {
  key: 'PL',
  value: 'PL',
  flag: 'pl',
  text: 'Poland'
}, {
  key: 'PT',
  value: 'PT',
  flag: 'pt',
  text: 'Portugal'
}, {
  key: 'PR',
  value: 'PR',
  flag: 'pr',
  text: 'Puerto Rico'
}, {
  key: 'QA',
  value: 'QA',
  flag: 'qa',
  text: 'Qatar'
}, {
  key: 'RE',
  value: 'RE',
  flag: 're',
  text: 'Reunion'
}, {
  key: 'RO',
  value: 'RO',
  flag: 'ro',
  text: 'Romania'
}, {
  key: 'RU',
  value: 'RU',
  flag: 'ru',
  text: 'Russia'
}, {
  key: 'RW',
  value: 'RW',
  flag: 'rw',
  text: 'Rwanda'
}, {
  key: 'SH',
  value: 'SH',
  flag: 'sh',
  text: 'Saint Helena'
}, {
  key: 'KN',
  value: 'KN',
  flag: 'kn',
  text: 'Saint Kitts and Nevis'
}, {
  key: 'LC',
  value: 'LC',
  flag: 'lc',
  text: 'Saint Lucia'
}, {
  key: 'PM',
  value: 'PM',
  flag: 'pm',
  text: 'Saint Pierre'
}, {
  key: 'VC',
  value: 'VC',
  flag: 'vc',
  text: 'Saint Vincent'
}, {
  key: 'WS',
  value: 'WS',
  flag: 'ws',
  text: 'Samoa'
}, {
  key: 'SM',
  value: 'SM',
  flag: 'sm',
  text: 'San Marino'
}, {
  key: 'GS',
  value: 'GS',
  flag: 'gs',
  text: 'Sandwich Islands'
}, {
  key: 'ST',
  value: 'ST',
  flag: 'st',
  text: 'Sao Tome'
}, {
  key: 'SA',
  value: 'SA',
  flag: 'sa',
  text: 'Saudi Arabia'
}, {
  key: 'SN',
  value: 'SN',
  flag: 'sn',
  text: 'Senegal'
}, {
  key: 'CS',
  value: 'CS',
  flag: 'cs',
  text: 'Serbia'
}, {
  key: 'RS',
  value: 'RS',
  flag: 'rs',
  text: 'Serbia'
}, {
  key: 'SC',
  value: 'SC',
  flag: 'sc',
  text: 'Seychelles'
}, {
  key: 'SL',
  value: 'SL',
  flag: 'sl',
  text: 'Sierra Leone'
}, {
  key: 'SG',
  value: 'SG',
  flag: 'sg',
  text: 'Singapore'
}, {
  key: 'SK',
  value: 'SK',
  flag: 'sk',
  text: 'Slovakia'
}, {
  key: 'SI',
  value: 'SI',
  flag: 'si',
  text: 'Slovenia'
}, {
  key: 'SB',
  value: 'SB',
  flag: 'sb',
  text: 'Solomon Islands'
}, {
  key: 'SO',
  value: 'SO',
  flag: 'so',
  text: 'Somalia'
}, {
  key: 'ZA',
  value: 'ZA',
  flag: 'za',
  text: 'South Africa'
}, {
  key: 'KR',
  value: 'KR',
  flag: 'kr',
  text: 'South Korea'
}, {
  key: 'ES',
  value: 'ES',
  flag: 'es',
  text: 'Spain'
}, {
  key: 'LK',
  value: 'LK',
  flag: 'lk',
  text: 'Sri Lanka'
}, {
  key: 'SD',
  value: 'SD',
  flag: 'sd',
  text: 'Sudan'
}, {
  key: 'SR',
  value: 'SR',
  flag: 'sr',
  text: 'Suriname'
}, {
  key: 'SJ',
  value: 'SJ',
  flag: 'sj',
  text: 'Svalbard'
}, {
  key: 'SZ',
  value: 'SZ',
  flag: 'sz',
  text: 'Swaziland'
}, {
  key: 'SE',
  value: 'SE',
  flag: 'se',
  text: 'Sweden'
}, {
  key: 'CH',
  value: 'CH',
  flag: 'ch',
  text: 'Switzerland'
}, {
  key: 'SY',
  value: 'SY',
  flag: 'sy',
  text: 'Syria'
}, {
  key: 'TW',
  value: 'TW',
  flag: 'tw',
  text: 'Taiwan'
}, {
  key: 'TJ',
  value: 'TJ',
  flag: 'tj',
  text: 'Tajikistan'
}, {
  key: 'TZ',
  value: 'TZ',
  flag: 'tz',
  text: 'Tanzania'
}, {
  key: 'TH',
  value: 'TH',
  flag: 'th',
  text: 'Thailand'
}, {
  key: 'TL',
  value: 'TL',
  flag: 'tl',
  text: 'Timorleste'
}, {
  key: 'TG',
  value: 'TG',
  flag: 'tg',
  text: 'Togo'
}, {
  key: 'TK',
  value: 'TK',
  flag: 'tk',
  text: 'Tokelau'
}, {
  key: 'TO',
  value: 'TO',
  flag: 'to',
  text: 'Tonga'
}, {
  key: 'TT',
  value: 'TT',
  flag: 'tt',
  text: 'Trinidad'
}, {
  key: 'TN',
  value: 'TN',
  flag: 'tn',
  text: 'Tunisia'
}, {
  key: 'TR',
  value: 'TR',
  flag: 'tr',
  text: 'Turkey'
}, {
  key: 'TM',
  value: 'TM',
  flag: 'tm',
  text: 'Turkmenistan'
}, {
  key: 'TV',
  value: 'TV',
  flag: 'tv',
  text: 'Tuvalu'
}, {
  key: 'UG',
  value: 'UG',
  flag: 'ug',
  text: 'Uganda'
}, {
  key: 'UA',
  value: 'UA',
  flag: 'ua',
  text: 'Ukraine'
}, {
  key: 'AE',
  value: 'AE',
  flag: 'ae',
  text: 'United Arab Emirates'
}, {
  key: 'US',
  value: 'US',
  flag: 'us',
  text: 'United States'
}, {
  key: 'UY',
  value: 'UY',
  flag: 'uy',
  text: 'Uruguay'
}, {
  key: 'UM',
  value: 'UM',
  flag: 'um',
  text: 'Us Minor Islands'
}, {
  key: 'VI',
  value: 'VI',
  flag: 'vi',
  text: 'Us Virgin Islands'
}, {
  key: 'UZ',
  value: 'UZ',
  flag: 'uz',
  text: 'Uzbekistan'
}, {
  key: 'VU',
  value: 'VU',
  flag: 'vu',
  text: 'Vanuatu'
}, {
  key: 'VA',
  value: 'VA',
  flag: 'va',
  text: 'Vatican City'
}, {
  key: 'VE',
  value: 'VE',
  flag: 've',
  text: 'Venezuela'
}, {
  key: 'VN',
  value: 'VN',
  flag: 'vn',
  text: 'Vietnam'
}, {
  key: 'WF',
  value: 'WF',
  flag: 'wf',
  text: 'Wallis and Futuna'
}, {
  key: 'EH',
  value: 'EH',
  flag: 'eh',
  text: 'Western Sahara'
}, {
  key: 'YE',
  value: 'YE',
  flag: 'ye',
  text: 'Yemen'
}, {
  key: 'ZM',
  value: 'ZM',
  flag: 'zm',
  text: 'Zambia'
}, {
  key: 'ZW',
  value: 'ZW',
  flag: 'zw',
  text: 'Zimbabwe'
}];

function fetchKycCountries(_x) {
  return _fetchKycCountries.apply(this, arguments);
}
/**
 * FAILED
 * UNSUBMITTED
 * PENDING
 * PASSED
 */

function _fetchKycCountries() {
  _fetchKycCountries = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref) {
    var chain, url, _yield$this$get, countries, countriesById;

    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            chain = _ref.chain;
            url = this.constants.BLOKS_API + "/" + chain + "/kyc?type=countries&chain=" + chain;
            _context.next = 4;
            return this.get(url);

          case 4:
            _yield$this$get = _context.sent;
            countries = _yield$this$get.content;
            countriesById = countries.reduce(function (acc, country) {
              acc[country.id] = country;
              return acc;
            }, {});
            return _context.abrupt("return", countryOptions.filter(function (countryOption) {
              return countriesById[countryOption.key];
            }));

          case 8:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));
  return _fetchKycCountries.apply(this, arguments);
}

function checkUserKycStatus(_x2) {
  return _checkUserKycStatus.apply(this, arguments);
}

function _checkUserKycStatus() {
  _checkUserKycStatus = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(_ref2) {
    var _this = this;

    var chain, actor, expectedTier;
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            chain = _ref2.chain, actor = _ref2.actor, expectedTier = _ref2.expectedTier;

            if (!(!chain || !actor || !expectedTier)) {
              _context4.next = 3;
              break;
            }

            throw new Error('Invalid parameters');

          case 3:
            return _context4.abrupt("return", new Promise( /*#__PURE__*/function () {
              var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(resolve, reject) {
                var getStatus;
                return _regeneratorRuntime().wrap(function _callee3$(_context3) {
                  while (1) {
                    switch (_context3.prev = _context3.next) {
                      case 0:
                        // Get all KYC records for user
                        getStatus = /*#__PURE__*/function () {
                          var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
                            var _yield$_this$rpc$isLi, userInfo, url, kyc, matchedTier, status;

                            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
                              while (1) {
                                switch (_context2.prev = _context2.next) {
                                  case 0:
                                    _context2.next = 2;
                                    return _this.rpc.isLightKYCVerified(actor);

                                  case 2:
                                    _yield$_this$rpc$isLi = _context2.sent;
                                    userInfo = _yield$_this$rpc$isLi[0];

                                    if (!(userInfo && userInfo.isLightKYCVerified)) {
                                      _context2.next = 6;
                                      break;
                                    }

                                    return _context2.abrupt("return", resolve(KycStatus.PASSED));

                                  case 6:
                                    url = _this.constants.BLOKS_API + "/" + chain + "/kyc?type=status&chain=" + chain + "&actor=" + actor;
                                    _context2.next = 9;
                                    return _this.get(url);

                                  case 9:
                                    kyc = _context2.sent;

                                    if (!(!kyc || !kyc.length)) {
                                      _context2.next = 12;
                                      break;
                                    }

                                    return _context2.abrupt("return", reject(new Error('Could not fetch KYC record')));

                                  case 12:
                                    // Find relevant KYC record
                                    matchedTier = kyc.find(function (_ref5) {
                                      var tier = _ref5.tier;
                                      return tier === String(expectedTier);
                                    });

                                    if (matchedTier) {
                                      _context2.next = 15;
                                      break;
                                    }

                                    return _context2.abrupt("return", reject(new Error('No kyc data matching tier found')));

                                  case 15:
                                    // Unwrap kyc data
                                    status = matchedTier.status;

                                    if (matchedTier.status) {
                                      _context2.next = 18;
                                      break;
                                    }

                                    return _context2.abrupt("return", reject(new Error('KYC Status not found')));

                                  case 18:
                                    if (!(status === KycStatus.PENDING)) {
                                      _context2.next = 22;
                                      break;
                                    }

                                    setTimeout(function () {
                                      return getStatus();
                                    }, 1000 * 2);
                                    _context2.next = 23;
                                    break;

                                  case 22:
                                    return _context2.abrupt("return", resolve(status));

                                  case 23:
                                  case "end":
                                    return _context2.stop();
                                }
                              }
                            }, _callee2);
                          }));

                          return function getStatus() {
                            return _ref4.apply(this, arguments);
                          };
                        }();

                        getStatus();

                      case 2:
                      case "end":
                        return _context3.stop();
                    }
                  }
                }, _callee3);
              }));

              return function (_x4, _x5) {
                return _ref3.apply(this, arguments);
              };
            }()));

          case 4:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _checkUserKycStatus.apply(this, arguments);
}

function applyForKyc(_x3) {
  return _applyForKyc.apply(this, arguments);
}

function _applyForKyc() {
  _applyForKyc = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(params) {
    var url, data;
    return _regeneratorRuntime().wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            url = this.constants.BLOKS_API + "/" + params.chain + "/kyc";
            _context5.next = 3;
            return this.post(url, _extends({
              type: 'apply'
            }, params));

          case 3:
            data = _context5.sent;

            if (!data) {
              _context5.next = 8;
              break;
            }

            return _context5.abrupt("return", data);

          case 8:
            throw new Error('Could not apply for KYC');

          case 9:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5, this);
  }));
  return _applyForKyc.apply(this, arguments);
}

var chainInfoParser = /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_9__.z.object({
  chainId: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_9__.z.string(),
  explorerUrl: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_9__.z.string(),
  explorerName: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_9__.z.string(),
  resourceTokenSymbol: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_9__.z.string(),
  resourceTokenContract: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_9__.z.string(),
  systemTokenSymbol: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_9__.z.string(),
  systemTokenContract: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_9__.z.string(),
  rpcEndpoints: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_9__.z.array( /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_9__.z.string()),
  actionsRpcEndpoints: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_9__.z.array( /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_9__.z.string()),
  hyperionEndpoints: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_9__.z.array( /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_9__.z.string()),
  lightEndpoints: /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_9__.z.array( /*#__PURE__*/zod__WEBPACK_IMPORTED_MODULE_9__.z.string())
});

function getChainInfo() {
  return _getChainInfo.apply(this, arguments);
}

function _getChainInfo() {
  _getChainInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
    var url, data;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            url = this.constants.CHAIN === 'proton-test' ? 'https://raw.githubusercontent.com/ProtonProtocol/chain-info/main/testnet.json' : 'https://raw.githubusercontent.com/ProtonProtocol/chain-info/main/mainnet.json';
            _context.prev = 1;
            _context.next = 4;
            return this.get(url, {});

          case 4:
            data = _context.sent;
            return _context.abrupt("return", chainInfoParser.parse(data));

          case 8:
            _context.prev = 8;
            _context.t0 = _context["catch"](1);
            console.log(_context.t0);
            return _context.abrupt("return", undefined);

          case 12:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this, [[1, 8]]);
  }));
  return _getChainInfo.apply(this, arguments);
}

function getTokenPrices() {
  return _getTokenPrices.apply(this, arguments);
}

function _getTokenPrices() {
  _getTokenPrices = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
    var url, data;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            url = this.constants.METAL_PROTON_ENDPOINT + "/v1/chain/exchange-rates/info";
            _context2.prev = 1;
            _context2.next = 4;
            return this.get(url);

          case 4:
            data = _context2.sent;
            return _context2.abrupt("return", _proton_wrap_constants__WEBPACK_IMPORTED_MODULE_7__.exchangeRatesParser.parse(data));

          case 8:
            _context2.prev = 8;
            _context2.t0 = _context2["catch"](1);
            throw new Error("Could not fetch exchange rates");

          case 11:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this, [[1, 8]]);
  }));
  return _getTokenPrices.apply(this, arguments);
}

function getWithdrawalFee(_x) {
  return _getWithdrawalFee.apply(this, arguments);
}

function _getWithdrawalFee() {
  _getWithdrawalFee = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(_ref) {
    var currency, network, url, data;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            currency = _ref.currency, network = _ref.network;
            url = this.constants.METAL_PROTON_ENDPOINT + "/v1/swaps/calculate-estimated-fee";
            _context3.prev = 2;
            _context3.next = 5;
            return this.post(url, {
              currency: currency,
              network: network
            });

          case 5:
            data = _context3.sent;
            return _context3.abrupt("return", _proton_wrap_constants__WEBPACK_IMPORTED_MODULE_7__.withdrawalFeeQuoteParser.parse(data));

          case 9:
            _context3.prev = 9;
            _context3.t0 = _context3["catch"](2);
            console.log(_context3.t0);
            return _context3.abrupt("return", undefined);

          case 13:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, this, [[2, 9]]);
  }));
  return _getWithdrawalFee.apply(this, arguments);
}

function currentLocation() {
  return _currentLocation.apply(this, arguments);
}

function _currentLocation() {
  _currentLocation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
    var url;
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            url = this.constants.METAL_PROTON_ENDPOINT + "/v1/kyc/ip-info";
            _context4.next = 3;
            return this.get(url);

          case 3:
            return _context4.abrupt("return", _context4.sent);

          case 4:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4, this);
  }));
  return _currentLocation.apply(this, arguments);
}

function getAvailableFeatures(_x2) {
  return _getAvailableFeatures.apply(this, arguments);
}

function _getAvailableFeatures() {
  _getAvailableFeatures = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(account) {
    var url;
    return _regeneratorRuntime().wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            url = this.constants.METAL_PROTON_ENDPOINT + ("/v2/kyc/by-chain-account/" + account + "/available-features");
            _context5.next = 3;
            return this.get(url);

          case 3:
            return _context5.abrupt("return", _context5.sent);

          case 4:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5, this);
  }));
  return _getAvailableFeatures.apply(this, arguments);
}

function createAccount(_x3) {
  return _createAccount.apply(this, arguments);
}

function _createAccount() {
  _createAccount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(params) {
    var url, data;
    return _regeneratorRuntime().wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            url = this.constants.METAL_PROTON_ENDPOINT + "/v2/users/create";
            _context6.next = 3;
            return this.post(url, params);

          case 3:
            data = _context6.sent;
            return _context6.abrupt("return", data);

          case 5:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6, this);
  }));
  return _createAccount.apply(this, arguments);
}

function loginAccount(_x4) {
  return _loginAccount.apply(this, arguments);
}

function _loginAccount() {
  _loginAccount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(params) {
    var url, data;
    return _regeneratorRuntime().wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            url = this.constants.METAL_PROTON_ENDPOINT + "/v2/users/login";
            _context7.next = 3;
            return this.post(url, params);

          case 3:
            data = _context7.sent;
            return _context7.abrupt("return", data);

          case 5:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7, this);
  }));
  return _loginAccount.apply(this, arguments);
}

function otcQuote(_x) {
  return _otcQuote.apply(this, arguments);
}

function _otcQuote() {
  _otcQuote = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(body) {
    var url;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            url = this.constants.SWAP_URL + ("/v1/quote/" + body.baseSymbol + "/" + body.baseAmount + "/" + body.quoteSymbol);
            _context.next = 3;
            return this.get(url);

          case 3:
            return _context.abrupt("return", _context.sent);

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));
  return _otcQuote.apply(this, arguments);
}

function otcOrder(_x2) {
  return _otcOrder.apply(this, arguments);
}

function _otcOrder() {
  _otcOrder = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(id) {
    var url;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            url = this.constants.SWAP_URL + ("/v1/order/" + id);
            _context2.next = 3;
            return this.get(url);

          case 3:
            return _context2.abrupt("return", _context2.sent);

          case 4:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));
  return _otcOrder.apply(this, arguments);
}

function generateAddress(_x) {
  return _generateAddress.apply(this, arguments);
}

function _generateAddress() {
  _generateAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(body) {
    var url;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            url = this.constants.WRAP_SERVER_URL + '/address/generate';
            _context.next = 3;
            return this.post(url, body);

          case 3:
            return _context.abrupt("return", _context.sent);

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));
  return _generateAddress.apply(this, arguments);
}

function deleteAddress(_x2) {
  return _deleteAddress.apply(this, arguments);
}

function _deleteAddress() {
  _deleteAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(body) {
    var url;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            url = this.constants.WRAP_SERVER_URL + '/address/delete';
            _context2.next = 3;
            return this.post(url, body);

          case 3:
            return _context2.abrupt("return", _context2.sent);

          case 4:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));
  return _deleteAddress.apply(this, arguments);
}

function withdrawMetal(_x3) {
  return _withdrawMetal.apply(this, arguments);
}

function _withdrawMetal() {
  _withdrawMetal = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(body) {
    var url;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            url = this.constants.WRAP_SERVER_URL + '/withdraw';
            _context3.next = 3;
            return this.post(url, body);

          case 3:
            return _context3.abrupt("return", _context3.sent);

          case 4:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));
  return _withdrawMetal.apply(this, arguments);
}

function withdrawalHistoryMetal(_x4) {
  return _withdrawalHistoryMetal.apply(this, arguments);
}

function _withdrawalHistoryMetal() {
  _withdrawalHistoryMetal = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(account) {
    var url;
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            url = this.constants.WRAP_SERVER_URL + ("/withdrawals/" + account);
            _context4.next = 3;
            return this.get(url);

          case 3:
            return _context4.abrupt("return", _context4.sent);

          case 4:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4, this);
  }));
  return _withdrawalHistoryMetal.apply(this, arguments);
}

function getXprTotalStakedAndApr() {
  return _getXprTotalStakedAndApr.apply(this, arguments);
}

function _getXprTotalStakedAndApr() {
  _getXprTotalStakedAndApr = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
    var _yield$Promise$all, supply, totalStakedUnparsed, _yield$Promise$all$, continuous_rate, inflation_pay_factor, votepay_factor, additionalInflation, new_tokens, to_yieldfarms, bpandsavings, to_producers, to_producers_block, to_producers_vote, savings, to_savings, to_consortium, totalStaked, apr;

    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return Promise.all([this.getTokenSupply(this.constants.EOSIO_TOKEN, this.constants.CORE_SYMBOL), this.rpc.get_table_rows({
              code: this.constants.EOSIO,
              scope: this.constants.EOSIO,
              table: 'globalsd',
              limit: 1
            }).then(function (res) {
              return res.rows[0];
            }), this.rpc.get_table_rows({
              code: this.constants.EOSIO,
              scope: this.constants.EOSIO,
              table: 'global4',
              limit: 1
            }).then(function (res) {
              return res.rows[0];
            })]);

          case 3:
            _yield$Promise$all = _context.sent;
            supply = _yield$Promise$all[0].supply;
            totalStakedUnparsed = _yield$Promise$all[1].totalrstaked;
            _yield$Promise$all$ = _yield$Promise$all[2];
            continuous_rate = _yield$Promise$all$.continuous_rate;
            inflation_pay_factor = _yield$Promise$all$.inflation_pay_factor;
            votepay_factor = _yield$Promise$all$.votepay_factor;
            additionalInflation = +continuous_rate * supply;
            new_tokens = additionalInflation;
            to_yieldfarms = new_tokens / 4;
            bpandsavings = new_tokens - to_yieldfarms;
            to_producers = bpandsavings * (10000 / inflation_pay_factor);
            to_producers_block = to_producers * (10000 / votepay_factor);
            to_producers_vote = to_producers - to_producers_block;
            savings = bpandsavings - to_producers;
            to_savings = 2 * savings / 3;
            to_consortium = savings - to_savings;
            totalStaked = +totalStakedUnparsed / Math.pow(10, this.constants.CORE_PRECISION);
            apr = to_savings / totalStaked * 100;
            return _context.abrupt("return", {
              supply: supply,
              yieldFarming: to_yieldfarms,
              producers: to_producers,
              producersBlock: to_producers_block,
              producersVote: to_producers_vote,
              consortium: to_consortium,
              staking: to_savings,
              totalStaked: totalStaked,
              apr: apr
            });

          case 25:
            _context.prev = 25;
            _context.t0 = _context["catch"](0);
            console.log(_context.t0);
            return _context.abrupt("return", 0);

          case 29:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this, [[0, 25]]);
  }));
  return _getXprTotalStakedAndApr.apply(this, arguments);
}

function getXprVoter(_x) {
  return _getXprVoter.apply(this, arguments);
}

function _getXprVoter() {
  _getXprVoter = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(account) {
    var _yield$this$rpc$get_t, rows;

    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.prev = 0;
            _context2.next = 3;
            return this.rpc.get_table_rows({
              code: this.constants.EOSIO,
              scope: this.constants.EOSIO,
              lower_bound: (0,_bloks_utils__WEBPACK_IMPORTED_MODULE_4__.encodeName)(account, false),
              table: 'votersxpr',
              limit: 1
            });

          case 3:
            _yield$this$rpc$get_t = _context2.sent;
            rows = _yield$this$rpc$get_t.rows;

            if (!(rows && rows.length && rows[0].owner === account)) {
              _context2.next = 9;
              break;
            }

            return _context2.abrupt("return", rows[0]);

          case 9:
            return _context2.abrupt("return", undefined);

          case 10:
            _context2.next = 16;
            break;

          case 12:
            _context2.prev = 12;
            _context2.t0 = _context2["catch"](0);
            console.log(_context2.t0);
            return _context2.abrupt("return", undefined);

          case 16:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this, [[0, 12]]);
  }));
  return _getXprVoter.apply(this, arguments);
}

function getXprAccountStakes(_x2) {
  return _getXprAccountStakes.apply(this, arguments);
}

function _getXprAccountStakes() {
  _getXprAccountStakes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(account) {
    var stakes, _yield$this$rpc$get_t2, rows;

    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            stakes = [];
            _context3.prev = 1;
            _context3.next = 4;
            return this.rpc.get_table_rows({
              code: this.constants.EOSIO,
              scope: (0,_bloks_utils__WEBPACK_IMPORTED_MODULE_4__.encodeName)(account, false),
              table: 'delxpr',
              limit: -1
            });

          case 4:
            _yield$this$rpc$get_t2 = _context3.sent;
            rows = _yield$this$rpc$get_t2.rows;

            if (rows && rows.length) {
              stakes = rows;
            }

            _context3.next = 12;
            break;

          case 9:
            _context3.prev = 9;
            _context3.t0 = _context3["catch"](1);
            console.log(_context3.t0);

          case 12:
            return _context3.abrupt("return", stakes);

          case 13:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, this, [[1, 9]]);
  }));
  return _getXprAccountStakes.apply(this, arguments);
}

function getXprAccountRefund(_x3) {
  return _getXprAccountRefund.apply(this, arguments);
}

function _getXprAccountRefund() {
  _getXprAccountRefund = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(account) {
    var refund, _yield$this$rpc$get_t3, rows;

    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.prev = 0;
            _context4.next = 3;
            return this.rpc.get_table_rows({
              code: this.constants.EOSIO,
              scope: (0,_bloks_utils__WEBPACK_IMPORTED_MODULE_4__.encodeName)(account, false),
              table: 'refundsxpr',
              limit: -1
            });

          case 3:
            _yield$this$rpc$get_t3 = _context4.sent;
            rows = _yield$this$rpc$get_t3.rows;

            if (rows && rows.length) {
              refund = rows[0];
              refund.quantity = +refund.quantity.split(' ')[0];
            }

            _context4.next = 11;
            break;

          case 8:
            _context4.prev = 8;
            _context4.t0 = _context4["catch"](0);
            console.log(_context4.t0);

          case 11:
            return _context4.abrupt("return", refund);

          case 12:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4, this, [[0, 8]]);
  }));
  return _getXprAccountRefund.apply(this, arguments);
}

function getXprOracleData(_x4) {
  return _getXprOracleData.apply(this, arguments);
}

function _getXprOracleData() {
  _getXprOracleData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(oracleIndex) {
    var _yield$this$rpc$get_t4, rows;

    return _regeneratorRuntime().wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.prev = 0;
            _context5.next = 3;
            return this.rpc.get_table_rows({
              code: 'oracles',
              scope: 'oracles',
              table: 'data',
              limit: 1,
              lower_bound: oracleIndex,
              upper_bound: oracleIndex
            });

          case 3:
            _yield$this$rpc$get_t4 = _context5.sent;
            rows = _yield$this$rpc$get_t4.rows;

            if (!(rows && rows.length)) {
              _context5.next = 9;
              break;
            }

            return _context5.abrupt("return", rows[0]);

          case 9:
            return _context5.abrupt("return", undefined);

          case 10:
            _context5.next = 16;
            break;

          case 12:
            _context5.prev = 12;
            _context5.t0 = _context5["catch"](0);
            console.log(_context5.t0);
            return _context5.abrupt("return", undefined);

          case 16:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5, this, [[0, 12]]);
  }));
  return _getXprOracleData.apply(this, arguments);
}

function getAllOracleFeeds(_x5) {
  return _getAllOracleFeeds.apply(this, arguments);
}

function _getAllOracleFeeds() {
  _getAllOracleFeeds = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(lower_bound) {
    var _yield$this$rpc$get_t5, rows, more, next_key, restOfRows;

    return _regeneratorRuntime().wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            if (lower_bound === void 0) {
              lower_bound = undefined;
            }

            _context6.prev = 1;
            _context6.next = 4;
            return this.rpc.get_table_rows({
              code: 'oracles',
              scope: 'oracles',
              table: 'feeds',
              limit: -1,
              lower_bound: lower_bound
            });

          case 4:
            _yield$this$rpc$get_t5 = _context6.sent;
            rows = _yield$this$rpc$get_t5.rows;
            more = _yield$this$rpc$get_t5.more;
            next_key = _yield$this$rpc$get_t5.next_key;

            if (!more) {
              _context6.next = 15;
              break;
            }

            _context6.next = 11;
            return this.getAllOracleFeeds(next_key);

          case 11:
            restOfRows = _context6.sent;
            return _context6.abrupt("return", rows.concat(restOfRows));

          case 15:
            return _context6.abrupt("return", rows);

          case 16:
            _context6.next = 22;
            break;

          case 18:
            _context6.prev = 18;
            _context6.t0 = _context6["catch"](1);
            console.log(_context6.t0);
            return _context6.abrupt("return", []);

          case 22:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6, this, [[1, 18]]);
  }));
  return _getAllOracleFeeds.apply(this, arguments);
}

function getSpecificOracleData(_x6) {
  return _getSpecificOracleData.apply(this, arguments);
} // pub

function _getSpecificOracleData() {
  _getSpecificOracleData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(feed_index) {
    var _yield$this$rpc$get_t6, rows;

    return _regeneratorRuntime().wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            _context7.prev = 0;
            _context7.next = 3;
            return this.rpc.get_table_rows({
              code: 'oracles',
              scope: 'oracles',
              table: 'data',
              limit: -1,
              lower_bound: feed_index,
              upper_bound: feed_index
            });

          case 3:
            _yield$this$rpc$get_t6 = _context7.sent;
            rows = _yield$this$rpc$get_t6.rows;

            if (!(rows && rows.length && rows[0].feed_index === feed_index)) {
              _context7.next = 7;
              break;
            }

            return _context7.abrupt("return", rows[0]);

          case 7:
            _context7.next = 12;
            break;

          case 9:
            _context7.prev = 9;
            _context7.t0 = _context7["catch"](0);
            console.log(_context7.t0);

          case 12:
            return _context7.abrupt("return", undefined);

          case 13:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7, this, [[0, 9]]);
  }));
  return _getSpecificOracleData.apply(this, arguments);
}

function getAllOracleData(_x7) {
  return _getAllOracleData.apply(this, arguments);
}

function _getAllOracleData() {
  _getAllOracleData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(lower_bound) {
    var _yield$this$rpc$get_t7, rows, more, next_key;

    return _regeneratorRuntime().wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            _context8.prev = 0;
            _context8.next = 3;
            return this.rpc.get_table_rows({
              code: 'oracles',
              scope: 'oracles',
              table: 'data',
              limit: -1,
              lower_bound: lower_bound
            });

          case 3:
            _yield$this$rpc$get_t7 = _context8.sent;
            rows = _yield$this$rpc$get_t7.rows;
            more = _yield$this$rpc$get_t7.more;
            next_key = _yield$this$rpc$get_t7.next_key;

            if (!more) {
              _context8.next = 13;
              break;
            }

            _context8.t0 = rows;
            _context8.next = 11;
            return this.getAllOracleData(next_key);

          case 11:
            _context8.t1 = _context8.sent;
            rows = _context8.t0.concat.call(_context8.t0, _context8.t1);

          case 13:
            return _context8.abrupt("return", rows);

          case 16:
            _context8.prev = 16;
            _context8.t2 = _context8["catch"](0);
            console.log(_context8.t2);
            return _context8.abrupt("return", []);

          case 20:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8, this, [[0, 16]]);
  }));
  return _getAllOracleData.apply(this, arguments);
}

function getProtonAvatars(_x8, _x9) {
  return _getProtonAvatars.apply(this, arguments);
}

function _getProtonAvatars() {
  _getProtonAvatars = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(account, limit) {
    var result;
    return _regeneratorRuntime().wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            if (limit === void 0) {
              limit = 10;
            }

            if (!(this.constants.CHAIN.indexOf('proton') !== -1)) {
              _context9.next = 12;
              break;
            }

            _context9.prev = 2;
            _context9.next = 5;
            return this.rpc.get_table_rows({
              json: true,
              code: 'eosio.proton',
              scope: 'eosio.proton',
              table: 'usersinfo',
              table_key: '',
              key_type: 'i64',
              lower_bound: (0,_bloks_utils__WEBPACK_IMPORTED_MODULE_4__.encodeName)(account, false),
              index_position: 1,
              limit: limit
            });

          case 5:
            result = _context9.sent;
            return _context9.abrupt("return", result.rows);

          case 9:
            _context9.prev = 9;
            _context9.t0 = _context9["catch"](2);
            console.log('getProtonAvatar error', _context9.t0);

          case 12:
            return _context9.abrupt("return", []);

          case 13:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9, this, [[2, 9]]);
  }));
  return _getProtonAvatars.apply(this, arguments);
}

function getProtonAvatar(_x10) {
  return _getProtonAvatar.apply(this, arguments);
}

function _getProtonAvatar() {
  _getProtonAvatar = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(account) {
    var result;
    return _regeneratorRuntime().wrap(function _callee10$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            if (!(this.constants.CHAIN.indexOf('proton') !== -1)) {
              _context10.next = 11;
              break;
            }

            _context10.prev = 1;
            _context10.next = 4;
            return this.rpc.get_table_rows({
              json: true,
              code: 'eosio.proton',
              scope: 'eosio.proton',
              table: 'usersinfo',
              table_key: '',
              key_type: 'i64',
              lower_bound: (0,_bloks_utils__WEBPACK_IMPORTED_MODULE_4__.encodeName)(account, false),
              index_position: 1,
              limit: 1
            });

          case 4:
            result = _context10.sent;
            return _context10.abrupt("return", result.rows.length > 0 && result.rows[0].acc === account ? result.rows[0] : undefined);

          case 8:
            _context10.prev = 8;
            _context10.t0 = _context10["catch"](1);
            console.log('getProtonAvatar error', _context10.t0);

          case 11:
            return _context10.abrupt("return", undefined);

          case 12:
          case "end":
            return _context10.stop();
        }
      }
    }, _callee10, this, [[1, 8]]);
  }));
  return _getProtonAvatar.apply(this, arguments);
}

function getRentbwState() {
  return _getRentbwState.apply(this, arguments);
}

function _getRentbwState() {
  _getRentbwState = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
    var _yield$this$rpc$get_t, rows;

    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return this.rpc.get_table_rows({
              code: this.constants.EOSIO,
              scope: 0,
              table: 'powup.state',
              limit: 1
            });

          case 2:
            _yield$this$rpc$get_t = _context.sent;
            rows = _yield$this$rpc$get_t.rows;
            return _context.abrupt("return", rows[0]);

          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));
  return _getRentbwState.apply(this, arguments);
}

function delegatedBandwidth(_x, _x2) {
  return _delegatedBandwidth.apply(this, arguments);
}

function _delegatedBandwidth() {
  _delegatedBandwidth = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(account, lower_bound) {
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", this.rpc.get_table_rows({
              json: true,
              code: this.constants.EOSIO,
              scope: (0,_bloks_utils__WEBPACK_IMPORTED_MODULE_4__.encodeName)(account, false),
              table: 'delband',
              table_key: '',
              limit: -1,
              lower_bound: lower_bound,
              key_type: 'i64',
              index_position: 1
            }));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));
  return _delegatedBandwidth.apply(this, arguments);
}

function getAccountDelegatedBandwidth(_x3) {
  return _getAccountDelegatedBandwidth.apply(this, arguments);
}

function _getAccountDelegatedBandwidth() {
  _getAccountDelegatedBandwidth = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(account) {
    var more, rows, result, lower_bound;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            more = true;
            rows = [];
            result = null;
            lower_bound = '';
            _context3.prev = 4;

          case 5:
            _context3.next = 7;
            return this.delegatedBandwidth(account, lower_bound);

          case 7:
            result = _context3.sent;
            more = result.more;
            rows = rows.concat(result.rows);

            if (more) {
              lower_bound = new bignumber_js__WEBPACK_IMPORTED_MODULE_6__.BigNumber((0,_bloks_utils__WEBPACK_IMPORTED_MODULE_4__.encodeName)(rows[rows.length - 1].to, false)).plus(1).toString();
            }

          case 11:
            if (more) {
              _context3.next = 5;
              break;
            }

          case 12:
            _context3.next = 17;
            break;

          case 14:
            _context3.prev = 14;
            _context3.t0 = _context3["catch"](4);
            console.log(_context3.t0);

          case 17:
            return _context3.abrupt("return", rows);

          case 18:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, this, [[4, 14]]);
  }));
  return _getAccountDelegatedBandwidth.apply(this, arguments);
}

function getAccountResources(_x4) {
  return _getAccountResources.apply(this, arguments);
}

function _getAccountResources() {
  _getAccountResources = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(account) {
    var _yield$this$rpc$get_t2, rows;

    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return this.rpc.get_table_rows({
              json: true,
              code: this.constants.EOSIO,
              scope: (0,_bloks_utils__WEBPACK_IMPORTED_MODULE_4__.encodeName)(account, false),
              table: 'userres',
              table_key: '',
              limit: 1
            });

          case 2:
            _yield$this$rpc$get_t2 = _context4.sent;
            rows = _yield$this$rpc$get_t2.rows;
            return _context4.abrupt("return", rows[0]);

          case 5:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4, this);
  }));
  return _getAccountResources.apply(this, arguments);
}

function getRamPriceInEos() {
  return _getRamPriceInEos.apply(this, arguments);
}

function _getRamPriceInEos() {
  _getRamPriceInEos = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
    var ram, baseString, base, quoteString, quote, price, ramPriceEos;
    return _regeneratorRuntime().wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.prev = 0;
            _context5.next = 3;
            return this.rpc.get_table_rows({
              json: true,
              code: this.constants.EOSIO,
              scope: this.constants.EOSIO,
              table: 'rammarket',
              table_key: '',
              limit: 10
            });

          case 3:
            ram = _context5.sent;
            // Amount of RAM bytes in use
            baseString = ram.rows[0].base.balance;
            base = +baseString.substr(0, baseString.indexOf(' ')); // Amount of EOS in the RAM collector

            quoteString = ram.rows[0].quote.balance;
            quote = quoteString.substr(0, quoteString.indexOf(' ')); // Price in kb

            price = quote / base;
            ramPriceEos = Number(price.toFixed(8)) * 1024;
            return _context5.abrupt("return", ramPriceEos);

          case 13:
            _context5.prev = 13;
            _context5.t0 = _context5["catch"](0);
            console.log(_context5.t0);

          case 16:
            return _context5.abrupt("return", 0);

          case 17:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5, this, [[0, 13]]);
  }));
  return _getRamPriceInEos.apply(this, arguments);
}

function getEosTopStakes(_x) {
  return _getEosTopStakes.apply(this, arguments);
}

function _getEosTopStakes() {
  _getEosTopStakes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(limit) {
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (limit === void 0) {
              limit = 500;
            }

            return _context.abrupt("return", this.lightApi.get_topstake(limit));

          case 2:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));
  return _getEosTopStakes.apply(this, arguments);
}

function getEosTopRams(_x2) {
  return _getEosTopRams.apply(this, arguments);
}

function _getEosTopRams() {
  _getEosTopRams = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(limit) {
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (limit === void 0) {
              limit = 500;
            }

            return _context2.abrupt("return", this.lightApi.get_topram(limit));

          case 2:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));
  return _getEosTopRams.apply(this, arguments);
}

function getCurrentNameBids(_x3, _x4) {
  return _getCurrentNameBids.apply(this, arguments);
}

function _getCurrentNameBids() {
  _getCurrentNameBids = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(lower_bound, upper_bound) {
    var _yield$this$rpc$get_t, rows, more, next_key;

    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (lower_bound === void 0) {
              lower_bound = '';
            }

            if (upper_bound === void 0) {
              upper_bound = '';
            }

            _context3.next = 4;
            return this.rpc.get_table_rows({
              code: this.constants.EOSIO,
              scope: this.constants.EOSIO,
              table: 'namebids',
              key_type: 'i64',
              lower_bound: lower_bound && lower_bound.length <= 12 ? (0,_bloks_utils__WEBPACK_IMPORTED_MODULE_4__.encodeName)(lower_bound, true) : lower_bound,
              upper_bound: upper_bound && upper_bound.length <= 12 ? (0,_bloks_utils__WEBPACK_IMPORTED_MODULE_4__.encodeName)(upper_bound, true) : upper_bound,
              index_position: 1,
              limit: -1
            });

          case 4:
            _yield$this$rpc$get_t = _context3.sent;
            rows = _yield$this$rpc$get_t.rows;
            more = _yield$this$rpc$get_t.more;
            next_key = _yield$this$rpc$get_t.next_key;

            if (!more) {
              _context3.next = 14;
              break;
            }

            _context3.t0 = rows;
            _context3.next = 12;
            return this.getCurrentNameBids(next_key, upper_bound);

          case 12:
            _context3.t1 = _context3.sent;
            rows = _context3.t0.concat.call(_context3.t0, _context3.t1);

          case 14:
            return _context3.abrupt("return", rows);

          case 15:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));
  return _getCurrentNameBids.apply(this, arguments);
}

var chainToRexMap = {
  jungle: 'jungle',
  bos: 'bos',
  eos: 'mainnet',
  telos: 'telos'
};
function getRexQueued(_x) {
  return _getRexQueued.apply(this, arguments);
}

function _getRexQueued() {
  _getRexQueued = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(account) {
    var _yield$this$rpc$get_t, rows;

    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return this.rpc.get_table_rows({
              code: this.constants.EOSIO,
              scope: this.constants.EOSIO,
              table: 'rexqueue',
              limit: 1,
              lower_bound: (0,_bloks_utils__WEBPACK_IMPORTED_MODULE_4__.encodeName)(account, false)
            });

          case 3:
            _yield$this$rpc$get_t = _context.sent;
            rows = _yield$this$rpc$get_t.rows;

            if (!(rows && rows.length && rows[0].owner === account)) {
              _context.next = 7;
              break;
            }

            return _context.abrupt("return", rows[0]);

          case 7:
            _context.next = 12;
            break;

          case 9:
            _context.prev = 9;
            _context.t0 = _context["catch"](0);
            console.log(_context.t0);

          case 12:
            return _context.abrupt("return", undefined);

          case 13:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this, [[0, 9]]);
  }));
  return _getRexQueued.apply(this, arguments);
}

function getRexPool() {
  return _getRexPool.apply(this, arguments);
}

function _getRexPool() {
  _getRexPool = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
    var _yield$this$rpc$get_t2, rows, pool, assetToNumber, total_lent, total_lendable, total_unlent, total_rex, total_rent, lent_percent, rex_price, resource_price;

    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return this.rpc.get_table_rows({
              code: this.constants.EOSIO,
              scope: this.constants.EOSIO,
              table: 'rexpool'
            });

          case 2:
            _yield$this$rpc$get_t2 = _context2.sent;
            rows = _yield$this$rpc$get_t2.rows;
            pool = rows[0];

            assetToNumber = function assetToNumber(asset) {
              return Number(asset.split(' ')[0]);
            };

            total_lent = assetToNumber(pool.total_lent);
            total_lendable = assetToNumber(pool.total_lendable);
            total_unlent = assetToNumber(pool.total_unlent);
            total_rex = assetToNumber(pool.total_rex);
            total_rent = assetToNumber(pool.total_rent);
            lent_percent = (0,_bloks_numbers__WEBPACK_IMPORTED_MODULE_8__.multiply)((0,_bloks_numbers__WEBPACK_IMPORTED_MODULE_8__.divide)(total_lent, total_lendable), 100);
            rex_price = +(0,_bloks_numbers__WEBPACK_IMPORTED_MODULE_8__.divide)(total_lendable, total_rex);
            resource_price = +(0,_bloks_numbers__WEBPACK_IMPORTED_MODULE_8__.divide)(total_unlent, total_rent + 1);
            return _context2.abrupt("return", {
              version: pool.version,
              namebid_proceeds: assetToNumber(pool.namebid_proceeds),
              loan_num: pool.loan_num,
              total_lent: total_lent,
              total_unlent: total_unlent,
              total_rent: total_rent,
              total_lendable: total_lendable,
              total_rex: total_rex,
              lent_percent: lent_percent,
              rex_price: rex_price,
              resource_price: resource_price
            });

          case 15:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));
  return _getRexPool.apply(this, arguments);
}

function getRexBalance(_x2) {
  return _getRexBalance.apply(this, arguments);
}

function _getRexBalance() {
  _getRexBalance = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(account) {
    var _yield$this$rpc$get_t3, rows, bal;

    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return this.rpc.get_table_rows({
              code: this.constants.EOSIO,
              scope: this.constants.EOSIO,
              table: 'rexbal',
              lower_bound: (0,_bloks_utils__WEBPACK_IMPORTED_MODULE_4__.encodeName)(account, false)
            });

          case 2:
            _yield$this$rpc$get_t3 = _context3.sent;
            rows = _yield$this$rpc$get_t3.rows;
            bal = rows[0];
            return _context3.abrupt("return", bal.owner === account ? bal : undefined);

          case 6:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));
  return _getRexBalance.apply(this, arguments);
}

function getRexCpuLoans(_x3) {
  return _getRexCpuLoans.apply(this, arguments);
}

function _getRexCpuLoans() {
  _getRexCpuLoans = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(account) {
    var _yield$this$rpc$get_t4, rows;

    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return this.rpc.get_table_rows({
              json: true,
              code: this.constants.EOSIO,
              scope: this.constants.EOSIO,
              table: 'cpuloan',
              table_key: 'byowner',
              key_type: 'i64',
              limit: 100,
              lower_bound: (0,_bloks_utils__WEBPACK_IMPORTED_MODULE_4__.encodeName)(account, false),
              index_position: 3
            });

          case 2:
            _yield$this$rpc$get_t4 = _context4.sent;
            rows = _yield$this$rpc$get_t4.rows;
            return _context4.abrupt("return", rows.filter(function (row) {
              return row.from === account;
            }));

          case 5:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4, this);
  }));
  return _getRexCpuLoans.apply(this, arguments);
}

function getRexNetLoans(_x4) {
  return _getRexNetLoans.apply(this, arguments);
}

function _getRexNetLoans() {
  _getRexNetLoans = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(account) {
    var _yield$this$rpc$get_t5, rows;

    return _regeneratorRuntime().wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return this.rpc.get_table_rows({
              json: true,
              code: this.constants.EOSIO,
              scope: this.constants.EOSIO,
              table: 'netloan',
              table_key: 'byowner',
              key_type: 'i64',
              limit: 100,
              lower_bound: (0,_bloks_utils__WEBPACK_IMPORTED_MODULE_4__.encodeName)(account, false),
              index_position: 3
            });

          case 2:
            _yield$this$rpc$get_t5 = _context5.sent;
            rows = _yield$this$rpc$get_t5.rows;
            return _context5.abrupt("return", rows.filter(function (row) {
              return row.from === account;
            }));

          case 5:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5, this);
  }));
  return _getRexNetLoans.apply(this, arguments);
}

function getEosDepositedIntoRex(_x5) {
  return _getEosDepositedIntoRex.apply(this, arguments);
}

function _getEosDepositedIntoRex() {
  _getEosDepositedIntoRex = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(account) {
    var _yield$this$rpc$get_t6, rows, row;

    return _regeneratorRuntime().wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return this.rpc.get_table_rows({
              code: this.constants.EOSIO,
              scope: this.constants.EOSIO,
              table: 'rexfund',
              lower_bound: (0,_bloks_utils__WEBPACK_IMPORTED_MODULE_4__.encodeName)(account, false)
            });

          case 2:
            _yield$this$rpc$get_t6 = _context6.sent;
            rows = _yield$this$rpc$get_t6.rows;
            row = rows[0];
            return _context6.abrupt("return", row.owner === account ? Number(row.balance.split(' ')[0]) : 0);

          case 6:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6, this);
  }));
  return _getEosDepositedIntoRex.apply(this, arguments);
}

function getRexReturnRate(_x6) {
  return _getRexReturnRate.apply(this, arguments);
}

function _getRexReturnRate() {
  _getRexReturnRate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(type) {
    var chain, _yield$this$post, data;

    return _regeneratorRuntime().wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            if (type === void 0) {
              type = 'mpr';
            }

            chain = chainToRexMap[this.constants.CHAIN];

            if (!chain) {
              _context7.next = 14;
              break;
            }

            _context7.next = 5;
            return this.post('https://www.api.bloks.io/graphql/v1alpha1/graphql', {
              query: "query {\n        " + chain + "_" + type + " {\n          " + type + "\n        }\n      }",
              variables: null
            });

          case 5:
            _yield$this$post = _context7.sent;
            data = _yield$this$post.data;

            if (!data) {
              _context7.next = 11;
              break;
            }

            return _context7.abrupt("return", Math.abs(data[chain + "_" + type][0][type]));

          case 11:
            return _context7.abrupt("return", 0);

          case 12:
            _context7.next = 15;
            break;

          case 14:
            return _context7.abrupt("return", 0);

          case 15:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7, this);
  }));
  return _getRexReturnRate.apply(this, arguments);
}

function getRexPriceChart() {
  return _getRexPriceChart.apply(this, arguments);
}

function _getRexPriceChart() {
  _getRexPriceChart = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {
    var chain, current_time, seven_days_ago, _yield$this$post2, data;

    return _regeneratorRuntime().wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            chain = chainToRexMap[this.constants.CHAIN];

            if (!chain) {
              _context8.next = 15;
              break;
            }

            current_time = (0,_bloks_numbers__WEBPACK_IMPORTED_MODULE_8__.formatDate)((0,_bloks_numbers__WEBPACK_IMPORTED_MODULE_8__.utcTime)());
            seven_days_ago = (0,_bloks_numbers__WEBPACK_IMPORTED_MODULE_8__.formatDate)((0,_bloks_numbers__WEBPACK_IMPORTED_MODULE_8__.utcTime)((0,_bloks_numbers__WEBPACK_IMPORTED_MODULE_8__.startDate)((0,_bloks_numbers__WEBPACK_IMPORTED_MODULE_8__.time)(), 7)));
            _context8.next = 6;
            return this.post('https://www.api.bloks.io/graphql/v1alpha1/graphql', {
              query: "query {\n        " + chain + "_pricechart(args: {\n          from_time: \"" + seven_days_ago + "\",\n          to_time: \"" + current_time + "\"\n        }) {\n          t\n          o\n          h\n          l\n          c\n        }\n      }",
              variables: null
            });

          case 6:
            _yield$this$post2 = _context8.sent;
            data = _yield$this$post2.data;

            if (!data) {
              _context8.next = 12;
              break;
            }

            return _context8.abrupt("return", data[chain + "_pricechart"]);

          case 12:
            return _context8.abrupt("return", []);

          case 13:
            _context8.next = 16;
            break;

          case 15:
            return _context8.abrupt("return", {
              actions: []
            });

          case 16:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8, this);
  }));
  return _getRexPriceChart.apply(this, arguments);
}

function getEosBalance(_x) {
  return _getEosBalance.apply(this, arguments);
}

function _getEosBalance() {
  _getEosBalance = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(accountName) {
    var _yield$this$rpc$get_c, balance;

    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return this.rpc.get_currency_balance(this.constants.EOSIO_TOKEN, accountName, this.constants.CORE_SYMBOL);

          case 2:
            _yield$this$rpc$get_c = _context.sent;
            balance = _yield$this$rpc$get_c[0];
            return _context.abrupt("return", balance);

          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));
  return _getEosBalance.apply(this, arguments);
}

function getTokenBalance(_x2, _x3, _x4) {
  return _getTokenBalance.apply(this, arguments);
} // Get Account Tokens

function _getTokenBalance() {
  _getTokenBalance = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(contract, accountName, symbol) {
    var result;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return this.rpc.get_currency_balance(contract, accountName, symbol)["catch"](function (err) {
              return console.log(err);
            });

          case 2:
            result = _context2.sent;

            if (!(result && result.length)) {
              _context2.next = 7;
              break;
            }

            return _context2.abrupt("return", result[0]);

          case 7:
            return _context2.abrupt("return", null);

          case 8:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));
  return _getTokenBalance.apply(this, arguments);
}

function getAccountTokens(_x5) {
  return _getAccountTokens.apply(this, arguments);
}

function _getAccountTokens() {
  _getAccountTokens = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(accountName) {
    var accountBalances;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (accountBalances) {
              _context3.next = 4;
              break;
            }

            _context3.next = 3;
            return this.lightGetTokens(accountName);

          case 3:
            accountBalances = _context3.sent;

          case 4:
            if (accountBalances) {
              _context3.next = 8;
              break;
            }

            _context3.next = 7;
            return this.hyperionGetTokensForAccount(accountName);

          case 7:
            accountBalances = _context3.sent;

          case 8:
            return _context3.abrupt("return", accountBalances || []);

          case 9:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));
  return _getAccountTokens.apply(this, arguments);
}

function lightGetTokens(_x6) {
  return _lightGetTokens.apply(this, arguments);
}

function _lightGetTokens() {
  _lightGetTokens = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(account) {
    var _yield$this$lightApi$, balances;

    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.prev = 0;
            _context4.next = 3;
            return this.lightApi.get_balances(account);

          case 3:
            _yield$this$lightApi$ = _context4.sent;
            balances = _yield$this$lightApi$.balances;
            return _context4.abrupt("return", balances.map(function (balance) {
              return {
                currency: balance.currency,
                amount: Number(balance.amount),
                contract: balance.contract,
                decimals: Number(balance.decimals)
              };
            }));

          case 8:
            _context4.prev = 8;
            _context4.t0 = _context4["catch"](0);
            console.log('lightGetTokens error', _context4.t0);
            return _context4.abrupt("return", undefined);

          case 12:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4, this, [[0, 8]]);
  }));
  return _lightGetTokens.apply(this, arguments);
}

function hyperionGetTokensForAccount(_x7) {
  return _hyperionGetTokensForAccount.apply(this, arguments);
}

function _hyperionGetTokensForAccount() {
  _hyperionGetTokensForAccount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(account) {
    var _yield$this$hyperion$, tokens;

    return _regeneratorRuntime().wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.prev = 0;
            _context5.next = 3;
            return this.hyperion.get_tokens(account);

          case 3:
            _yield$this$hyperion$ = _context5.sent;
            tokens = _yield$this$hyperion$.tokens;
            return _context5.abrupt("return", tokens.map(function (token) {
              return {
                currency: token.symbol,
                amount: Number(token.amount),
                contract: token.contract,
                decimals: Number(token.precision)
              };
            }));

          case 8:
            _context5.prev = 8;
            _context5.t0 = _context5["catch"](0);
            console.log('hyperionGetTokensForAccount error', _context5.t0);
            return _context5.abrupt("return", undefined);

          case 12:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5, this, [[0, 8]]);
  }));
  return _hyperionGetTokensForAccount.apply(this, arguments);
}

function getTokenSupply(_x8, _x9) {
  return _getTokenSupply.apply(this, arguments);
}

function _getTokenSupply() {
  _getTokenSupply = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(contract, symbol) {
    var stats, _stats$symbol, supply, max_supply;

    return _regeneratorRuntime().wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.prev = 0;
            _context6.next = 3;
            return this.rpc.get_currency_stats(contract, symbol);

          case 3:
            stats = _context6.sent;
            _stats$symbol = stats[symbol], supply = _stats$symbol.supply, max_supply = _stats$symbol.max_supply;
            return _context6.abrupt("return", {
              supply: supply ? +supply.split(' ')[0] : 0,
              max_supply: max_supply ? +max_supply.split(' ')[0] : 0
            });

          case 8:
            _context6.prev = 8;
            _context6.t0 = _context6["catch"](0);
            console.log(_context6.t0);
            return _context6.abrupt("return", {
              supply: 0,
              max_supply: 0
            });

          case 12:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6, this, [[0, 8]]);
  }));
  return _getTokenSupply.apply(this, arguments);
}

function getHistoryTransaction(_x, _x2) {
  return _getHistoryTransaction.apply(this, arguments);
}

function _getHistoryTransaction() {
  _getHistoryTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(txId, blockHint) {
    var eosTransactions, tx;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (blockHint === void 0) {
              blockHint = 0;
            }

            eosTransactions = new _proton_js__WEBPACK_IMPORTED_MODULE_0__.JsonRpc(this.constants.TRANSACTIONS_ENDPOINTS);
            _context.next = 4;
            return eosTransactions.history_get_transaction(txId, blockHint);

          case 4:
            tx = _context.sent;

            if (tx) {
              _context.next = 7;
              break;
            }

            throw new Error('TX not found');

          case 7:
            return _context.abrupt("return", (0,_bloks_utils__WEBPACK_IMPORTED_MODULE_4__.historyTransformTransaction)(tx));

          case 8:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));
  return _getHistoryTransaction.apply(this, arguments);
}

function getDeferredTransaction(_x3) {
  return _getDeferredTransaction.apply(this, arguments);
}

function _getDeferredTransaction() {
  _getDeferredTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(txId) {
    var _yield$this$rpc$get_s, transactions;

    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return this.rpc.get_scheduled_transactions(true, txId, 1);

          case 2:
            _yield$this$rpc$get_s = _context2.sent;
            transactions = _yield$this$rpc$get_s.transactions;

            if (!(transactions.length > 0 && transactions[0].trx_id.substring(0, 6) === txId.substring(0, 6))) {
              _context2.next = 6;
              break;
            }

            return _context2.abrupt("return", (0,_bloks_utils__WEBPACK_IMPORTED_MODULE_4__.historyTransformDeferredTransaction)(transactions[0]));

          case 6:
            return _context2.abrupt("return", {});

          case 7:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));
  return _getDeferredTransaction.apply(this, arguments);
}

function getHyperionTransaction(_x4) {
  return _getHyperionTransaction.apply(this, arguments);
}

function _getHyperionTransaction() {
  _getHyperionTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(id) {
    var result;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (!this.constants.HYPERION_URL) {
              _context3.next = 6;
              break;
            }

            _context3.next = 3;
            return this.hyperion.get_transaction(id);

          case 3:
            result = _context3.sent;
            _context3.next = 9;
            break;

          case 6:
            _context3.next = 8;
            return this.get((0,_bloks_utils__WEBPACK_IMPORTED_MODULE_4__.urlBuilder)(this.constants.API_URL, 'hyperion', {
              type: 'get_transaction',
              id: id,
              options: {}
            }));

          case 8:
            result = _context3.sent;

          case 9:
            if (!(!result || !result.actions || !result.actions.length)) {
              _context3.next = 11;
              break;
            }

            throw new Error('TX not found');

          case 11:
            return _context3.abrupt("return", (0,_bloks_utils__WEBPACK_IMPORTED_MODULE_4__.hyperionTransformTransaction)(result));

          case 12:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));
  return _getHyperionTransaction.apply(this, arguments);
}

function generateTransactionSettings(_x5, _x6, _x7) {
  return _generateTransactionSettings.apply(this, arguments);
}

function _generateTransactionSettings() {
  _generateTransactionSettings = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(expireSeconds, blocksBehind, delaySec) {
    var info, refBlock, result;
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            if (expireSeconds === void 0) {
              expireSeconds = 3000;
            }

            if (blocksBehind === void 0) {
              blocksBehind = 12;
            }

            if (delaySec === void 0) {
              delaySec = 0;
            }

            _context4.next = 5;
            return this.rpc.get_info();

          case 5:
            info = _context4.sent;
            result = {};

            if (!info) {
              _context4.next = 12;
              break;
            }

            _context4.next = 10;
            return this.rpc.get_block(info.head_block_num - blocksBehind);

          case 10:
            refBlock = _context4.sent;
            result = _proton_js__WEBPACK_IMPORTED_MODULE_0__.Serialize.transactionHeader(refBlock, expireSeconds);

          case 12:
            return _context4.abrupt("return", _extends({
              max_net_usage_words: 0,
              max_cpu_usage_ms: 0,
              delay_sec: delaySec,
              context_free_actions: [],
              actions: [],
              transaction_extensions: []
            }, result));

          case 13:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4, this);
  }));
  return _generateTransactionSettings.apply(this, arguments);
}

function getControlledAccounts(accountName) {
  if (this.constants.HISTORY_TYPES.includes('native')) {
    return this.actionsRpc.history_get_controlled_accounts(accountName);
  } else if (this.constants.HISTORY_TYPES.includes('hyperion')) {
    var actionsRpc = new _proton_js__WEBPACK_IMPORTED_MODULE_0__.JsonRpc([this.constants.HYPERION_URL]);
    return actionsRpc.history_get_controlled_accounts(accountName);
  } else {
    return [];
  }
}
function getPermissionLinks(_x) {
  return _getPermissionLinks.apply(this, arguments);
}

function _getPermissionLinks() {
  _getPermissionLinks = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(account) {
    var lightAccount, _yield$this$get, linked_permissions, _yield$this$hyperion$, links;

    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!this.constants.LIGHT_API) {
              _context.next = 12;
              break;
            }

            _context.prev = 1;
            _context.next = 4;
            return this.getAccountLightData(account);

          case 4:
            lightAccount = _context.sent;

            if (!lightAccount) {
              _context.next = 7;
              break;
            }

            return _context.abrupt("return", lightAccount.linkauth.map(function (auth) {
              return {
                action: auth.type,
                contract: auth.code,
                permission_name: auth.requirement
              };
            }));

          case 7:
            _context.next = 12;
            break;

          case 9:
            _context.prev = 9;
            _context.t0 = _context["catch"](1);
            console.log(_context.t0);

          case 12:
            if (!this.constants.HISTORY_TYPES.includes('dfuse')) {
              _context.next = 25;
              break;
            }

            _context.prev = 13;
            _context.next = 16;
            return this.get(this.constants.API_URL + "/dfuse?type=state_permission_links&account=" + account);

          case 16:
            _yield$this$get = _context.sent;
            linked_permissions = _yield$this$get.linked_permissions;

            if (!linked_permissions) {
              _context.next = 20;
              break;
            }

            return _context.abrupt("return", linked_permissions);

          case 20:
            _context.next = 25;
            break;

          case 22:
            _context.prev = 22;
            _context.t1 = _context["catch"](13);
            console.log(_context.t1);

          case 25:
            if (!this.constants.HISTORY_TYPES.includes('hyperion')) {
              _context.next = 37;
              break;
            }

            _context.prev = 26;
            _context.next = 29;
            return this.hyperion.get_links(account);

          case 29:
            _yield$this$hyperion$ = _context.sent;
            links = _yield$this$hyperion$.links;
            return _context.abrupt("return", links.map(function (link) {
              return {
                action: link.action,
                contract: link.code,
                permission_name: link.permission
              };
            }));

          case 34:
            _context.prev = 34;
            _context.t2 = _context["catch"](26);
            console.log(_context.t2);

          case 37:
            console.log('Permission links not available on chain');
            return _context.abrupt("return", []);

          case 39:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this, [[1, 9], [13, 22], [26, 34]]);
  }));
  return _getPermissionLinks.apply(this, arguments);
}

function dfuseGetKeyAccounts(_x2) {
  return _dfuseGetKeyAccounts.apply(this, arguments);
}

function _dfuseGetKeyAccounts() {
  _dfuseGetKeyAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(key) {
    var _yield$this$get2, account_names;

    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.prev = 0;
            _context2.next = 3;
            return this.get(this.constants.API_URL + "/dfuse?type=state_key_accounts&publicKey=" + key);

          case 3:
            _yield$this$get2 = _context2.sent;
            account_names = _yield$this$get2.account_names;
            return _context2.abrupt("return", account_names && account_names.length ? account_names : []);

          case 8:
            _context2.prev = 8;
            _context2.t0 = _context2["catch"](0);
            console.log(_context2.t0);
            console.log('No dfuse accounts found associated with key:', key);
            return _context2.abrupt("return", []);

          case 13:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this, [[0, 8]]);
  }));
  return _dfuseGetKeyAccounts.apply(this, arguments);
}

function nativeGetKeyAccounts(_x3) {
  return _nativeGetKeyAccounts.apply(this, arguments);
}

function _nativeGetKeyAccounts() {
  _nativeGetKeyAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(key) {
    var keyAccounts, fioAccount, _yield$this$rpc$get_a, accounts;

    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.prev = 0;
            keyAccounts = [];

            if (!['fio', 'fio-test'].includes(this.constants.CHAIN)) {
              _context3.next = 7;
              break;
            }

            fioAccount = (0,_bloks_utils__WEBPACK_IMPORTED_MODULE_4__.fioKeyToActor)(key.replace('EOS', 'FIO'), _proton_js__WEBPACK_IMPORTED_MODULE_0__.Numeric.stringToPublicKey);

            if (keyAccounts.indexOf(fioAccount) === -1) {
              keyAccounts.push(fioAccount);
            }

            _context3.next = 12;
            break;

          case 7:
            _context3.next = 9;
            return this.rpc.get_accounts_by_authorizers([], [key]);

          case 9:
            _yield$this$rpc$get_a = _context3.sent;
            accounts = _yield$this$rpc$get_a.accounts;
            keyAccounts = Array.from(new Set(accounts.map(function (account) {
              return account.account_name;
            })));

          case 12:
            return _context3.abrupt("return", keyAccounts);

          case 15:
            _context3.prev = 15;
            _context3.t0 = _context3["catch"](0);
            console.log(_context3.t0);
            throw _context3.t0;

          case 19:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, this, [[0, 15]]);
  }));
  return _nativeGetKeyAccounts.apply(this, arguments);
}

function hyperionGetKeyAccounts(_x4) {
  return _hyperionGetKeyAccounts.apply(this, arguments);
}

function _hyperionGetKeyAccounts() {
  _hyperionGetKeyAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(key) {
    var legacyPublicKey, _yield$this$hyperion$2, account_names;

    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            if (this.hyperion) {
              _context4.next = 2;
              break;
            }

            throw new Error('Hyperion API not supported');

          case 2:
            legacyPublicKey = _proton_js__WEBPACK_IMPORTED_MODULE_0__.Key.PublicKey.fromString(key).toLegacyString();
            _context4.next = 5;
            return this.hyperion.get_key_accounts(legacyPublicKey);

          case 5:
            _yield$this$hyperion$2 = _context4.sent;
            account_names = _yield$this$hyperion$2.account_names;

            if (!(account_names && account_names.length)) {
              _context4.next = 11;
              break;
            }

            return _context4.abrupt("return", account_names);

          case 11:
            throw new Error('No keys found');

          case 12:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4, this);
  }));
  return _hyperionGetKeyAccounts.apply(this, arguments);
}

function lightGetKeyAccounts(_x5) {
  return _lightGetKeyAccounts.apply(this, arguments);
}

function _lightGetKeyAccounts() {
  _lightGetKeyAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(key) {
    var lightChain, accountsByChain, accounts;
    return _regeneratorRuntime().wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            if (this.lightApi) {
              _context5.next = 2;
              break;
            }

            throw new Error('Light API not supported');

          case 2:
            lightChain = this.constants.CHAIN.toLowerCase().replace('-', '');
            _context5.next = 5;
            return this.lightApi.get_key_accounts(key);

          case 5:
            accountsByChain = _context5.sent;
            accounts = accountsByChain[lightChain].accounts;
            return _context5.abrupt("return", Array.from(new Set(Object.keys(accounts))));

          case 8:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5, this);
  }));
  return _lightGetKeyAccounts.apply(this, arguments);
}

function getKeyAccountsByType(_x6, _x7) {
  return _getKeyAccountsByType.apply(this, arguments);
}
/**
 * Tries all histories to get keys.
 * @param {*} key
 */

function _getKeyAccountsByType() {
  _getKeyAccountsByType = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(key, type) {
    return _regeneratorRuntime().wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.t0 = type;
            _context6.next = _context6.t0 === 'dfuse' ? 3 : _context6.t0 === 'native' ? 6 : _context6.t0 === 'hyperion' ? 9 : _context6.t0 === 'light' ? 12 : 12;
            break;

          case 3:
            _context6.next = 5;
            return this.dfuseGetKeyAccounts(key);

          case 5:
            return _context6.abrupt("return", _context6.sent);

          case 6:
            _context6.next = 8;
            return this.nativeGetKeyAccounts(key);

          case 8:
            return _context6.abrupt("return", _context6.sent);

          case 9:
            _context6.next = 11;
            return this.hyperionGetKeyAccounts(key);

          case 11:
            return _context6.abrupt("return", _context6.sent);

          case 12:
            _context6.next = 14;
            return this.lightGetKeyAccounts(key);

          case 14:
            return _context6.abrupt("return", _context6.sent);

          case 15:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6, this);
  }));
  return _getKeyAccountsByType.apply(this, arguments);
}

function getKeyAccounts(_x8) {
  return _getKeyAccounts.apply(this, arguments);
}

function _getKeyAccounts() {
  _getKeyAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(key) {
    var _i, _arr, historyType, res;

    return _regeneratorRuntime().wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            if (key.startsWith('FIO')) {
              key = key.replace('FIO', 'EOS');
            }

            _i = 0, _arr = [this.constants.HISTORY_TYPES[0], 'light'].concat(this.constants.HISTORY_TYPES.slice(1));

          case 2:
            if (!(_i < _arr.length)) {
              _context7.next = 19;
              break;
            }

            historyType = _arr[_i];
            _context7.prev = 4;
            _context7.next = 7;
            return this.getKeyAccountsByType(key, historyType);

          case 7:
            res = _context7.sent;

            if (!res) {
              _context7.next = 10;
              break;
            }

            return _context7.abrupt("return", res);

          case 10:
            _context7.next = 16;
            break;

          case 12:
            _context7.prev = 12;
            _context7.t0 = _context7["catch"](4);
            console.log(_context7.t0);
            return _context7.abrupt("continue", 16);

          case 16:
            _i++;
            _context7.next = 2;
            break;

          case 19:
            return _context7.abrupt("return", []);

          case 20:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7, this, [[4, 12]]);
  }));
  return _getKeyAccounts.apply(this, arguments);
}

function getKeyAccountsForAllChains(_x9) {
  return _getKeyAccountsForAllChains.apply(this, arguments);
}
/**
 * Recursively resolves all required permissions
 * @param accountName
 * @param permission
 */

function _getKeyAccountsForAllChains() {
  _getKeyAccountsForAllChains = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(key) {
    var keyAccounts, combined;
    return _regeneratorRuntime().wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            if (this.lightApi) {
              _context8.next = 2;
              break;
            }

            throw new Error('Light API not supported');

          case 2:
            _context8.prev = 2;
            _context8.next = 5;
            return this.lightApi.get_all_key_accounts(key);

          case 5:
            keyAccounts = _context8.sent;
            combined = keyAccounts.reduce(function (acc, obj) {
              return _extends({}, acc, obj);
            }, {});
            return _context8.abrupt("return", Object.entries(combined).reduce(function (acc, _ref) {
              var chain = _ref[0],
                  accountsByName = _ref[1].accounts;
              var accounts = Object.keys(accountsByName);

              if (accounts.length) {
                acc.push({
                  chain: chain,
                  accounts: accounts
                });
              }

              return acc;
            }, []));

          case 10:
            _context8.prev = 10;
            _context8.t0 = _context8["catch"](2);
            console.log(_context8.t0);
            return _context8.abrupt("return", []);

          case 14:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8, this, [[2, 10]]);
  }));
  return _getKeyAccountsForAllChains.apply(this, arguments);
}

function getRequiredAccounts(_x10, _x11, _x12, _x13, _x14) {
  return _getRequiredAccounts.apply(this, arguments);
}

function _getRequiredAccounts() {
  _getRequiredAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(accountName, permissionName, allPermissions, currentLevel, maxLevel) {
    var accountInfo, _iterator, _step, permission, accounts, producers, _iterator2, _step2, account;

    return _regeneratorRuntime().wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            if (allPermissions === void 0) {
              allPermissions = [];
            }

            if (currentLevel === void 0) {
              currentLevel = 1;
            }

            if (maxLevel === void 0) {
              maxLevel = 2;
            }

            _context9.next = 5;
            return this.getAccount(accountName);

          case 5:
            accountInfo = _context9.sent;
            _iterator = _createForOfIteratorHelperLoose(accountInfo.permissions);

          case 7:
            if ((_step = _iterator()).done) {
              _context9.next = 31;
              break;
            }

            permission = _step.value;

            if (!(permission.perm_name === permissionName)) {
              _context9.next = 29;
              break;
            }

            // Get all account (e.g. gyy, hartono, thompson)
            accounts = [];

            if (!(accountName === 'eosio' && ['owner', 'active'].includes(permission.perm_name))) {
              _context9.next = 16;
              break;
            }

            _context9.next = 14;
            return this.getProducersLocal();

          case 14:
            producers = _context9.sent;
            accounts = producers.map(function (producer) {
              return {
                actor: producer.owner,
                permission: 'active'
              };
            });

          case 16:
            if (!accounts.length) {
              accounts = permission.required_auth.accounts.map(function (account) {
                return account.permission;
              });
            }

            if (!accounts.length) {
              allPermissions.push({
                actor: accountName,
                permission: permissionName
              });
            } // For each account (e.g. hartono)


            _iterator2 = _createForOfIteratorHelperLoose(accounts);

          case 19:
            if ((_step2 = _iterator2()).done) {
              _context9.next = 29;
              break;
            }

            account = _step2.value;

            if (!(currentLevel < maxLevel)) {
              _context9.next = 26;
              break;
            }

            _context9.next = 24;
            return this.getRequiredAccounts(account.actor, account.permission, allPermissions, ++currentLevel, maxLevel);

          case 24:
            _context9.next = 27;
            break;

          case 26:
            allPermissions.push({
              actor: account.actor,
              permission: account.permission
            });

          case 27:
            _context9.next = 19;
            break;

          case 29:
            _context9.next = 7;
            break;

          case 31:
            return _context9.abrupt("return", allPermissions);

          case 32:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9, this);
  }));
  return _getRequiredAccounts.apply(this, arguments);
}

function getUsersFromKeys(_x15) {
  return _getUsersFromKeys.apply(this, arguments);
}

function _getUsersFromKeys() {
  _getUsersFromKeys = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(keys) {
    var _this = this;

    var users, promises;
    return _regeneratorRuntime().wrap(function _callee12$(_context12) {
      while (1) {
        switch (_context12.prev = _context12.next) {
          case 0:
            users = [];
            promises = keys.map( /*#__PURE__*/function () {
              var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(key) {
                var account_names, promises2;
                return _regeneratorRuntime().wrap(function _callee11$(_context11) {
                  while (1) {
                    switch (_context11.prev = _context11.next) {
                      case 0:
                        _context11.next = 2;
                        return _this.getKeyAccounts(key);

                      case 2:
                        account_names = _context11.sent;
                        promises2 = account_names.map( /*#__PURE__*/function () {
                          var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(account) {
                            var accountInfo, _iterator3, _step3, permission;

                            return _regeneratorRuntime().wrap(function _callee10$(_context10) {
                              while (1) {
                                switch (_context10.prev = _context10.next) {
                                  case 0:
                                    _context10.next = 2;
                                    return _this.getAccount(account);

                                  case 2:
                                    accountInfo = _context10.sent;

                                    // For every permission, add to array
                                    for (_iterator3 = _createForOfIteratorHelperLoose(accountInfo.permissions); !(_step3 = _iterator3()).done;) {
                                      permission = _step3.value;

                                      // If key exists
                                      if (permission.required_auth.keys.find(function (permKey) {
                                        return permKey.key === key;
                                      })) {
                                        users.push({
                                          actor: account,
                                          permission: permission.perm_name,
                                          publicKey: key
                                        });
                                      }
                                    }

                                  case 4:
                                  case "end":
                                    return _context10.stop();
                                }
                              }
                            }, _callee10);
                          }));

                          return function (_x17) {
                            return _ref3.apply(this, arguments);
                          };
                        }());
                        _context11.next = 6;
                        return Promise.all(promises2);

                      case 6:
                      case "end":
                        return _context11.stop();
                    }
                  }
                }, _callee11);
              }));

              return function (_x16) {
                return _ref2.apply(this, arguments);
              };
            }());
            _context12.next = 4;
            return Promise.all(promises);

          case 4:
            return _context12.abrupt("return", users);

          case 5:
          case "end":
            return _context12.stop();
        }
      }
    }, _callee12);
  }));
  return _getUsersFromKeys.apply(this, arguments);
}

var ApiClass = /*#__PURE__*/function () {
  function ApiClass(chain) {
    this.rpc = undefined;
    this.actionsRpc = undefined;
    this.api = undefined;
    this.hyperion = undefined;
    this.lightApi = undefined;
    this.isInitialized = false;
    this.constants = undefined;
    this.http = http;
    this.get = get;
    this.post = post;
    this.getAccount = getAccount;
    this.getGravatar = getGravatar;
    this.searchAccount = searchAccount;
    this.getParent = getParent;
    this.getAccountLightData = getAccountLightData;
    this.getActionsFromNative = getActionsFromNative;
    this.getActions = getActions;
    this.getActionsFromDfuse = getActionsFromDfuse;
    this.getActionsFromHyperion = getActionsFromHyperion;
    this.getDappStats = getDappStats;
    this.getDspPackages = getDspPackages;
    this.getDapphodlBalance = getDapphodlBalance;
    this.getDappBalance = getDappBalance;
    this.getDappStakes = getDappStakes;
    this.getDapphodlStakes = getDapphodlStakes;
    this.getDappUnstakes = getDappUnstakes;
    this.getDapphodlUnstakes = getDapphodlUnstakes;
    this.getFIOVoter = getFIOVoter;
    this.getFIOAddressByName = getFIOAddressByName;
    this.getFIODomainByName = getFIODomainByName;
    this.getNFTsByFioAddress = getNFTsByFioAddress;
    this.getDomains = getDomains;
    this.getAddresses = getAddresses;
    this.getFIOProducers = getFIOProducers;
    this.getFIOSupplyBreakdown = getFIOSupplyBreakdown;
    this.getFIOFees = getFIOFees;
    this.addFIOFeeToActions = addFIOFeeToActions;
    this.getFIOAddresses = getFIOAddresses;
    this.getFIODomains = getFIODomains;
    this.getFIOAddressesAndDomains = getFIOAddressesAndDomains;
    this.getFIOBalance = getFIOBalance;
    this.getControlledAccounts = getControlledAccounts;
    this.getPermissionLinks = getPermissionLinks;
    this.dfuseGetKeyAccounts = dfuseGetKeyAccounts;
    this.nativeGetKeyAccounts = nativeGetKeyAccounts;
    this.hyperionGetKeyAccounts = hyperionGetKeyAccounts;
    this.lightGetKeyAccounts = lightGetKeyAccounts;
    this.getKeyAccountsByType = getKeyAccountsByType;
    this.getKeyAccounts = getKeyAccounts;
    this.getKeyAccountsForAllChains = getKeyAccountsForAllChains;
    this.getRequiredAccounts = getRequiredAccounts;
    this.getUsersFromKeys = getUsersFromKeys;
    this.getAllMsigs = getAllMsigs;
    this.parsePackedMsigActions = parsePackedMsigActions;
    this.parsePackedMsig = parsePackedMsig;
    this.getFullMsigProposal = getFullMsigProposal;
    this.getMsigApprovals = getMsigApprovals;
    this.getAccountsMsigProposals = getAccountsMsigProposals;
    this.hyperionGetMsig = hyperionGetMsig;
    this.getMsigProposal = getMsigProposal;
    this.getRentbwState = getRentbwState;
    this.delegatedBandwidth = delegatedBandwidth;
    this.getAccountDelegatedBandwidth = getAccountDelegatedBandwidth;
    this.getAccountResources = getAccountResources;
    this.getRamPriceInEos = getRamPriceInEos;
    this.getRexQueued = getRexQueued;
    this.getRexPool = getRexPool;
    this.getRexBalance = getRexBalance;
    this.getRexCpuLoans = getRexCpuLoans;
    this.getRexNetLoans = getRexNetLoans;
    this.getEosDepositedIntoRex = getEosDepositedIntoRex;
    this.getRexReturnRate = getRexReturnRate;
    this.getRexPriceChart = getRexPriceChart;
    this.getEosTopStakes = getEosTopStakes;
    this.getEosTopRams = getEosTopRams;
    this.getCurrentNameBids = getCurrentNameBids;
    this.getEosBalance = getEosBalance;
    this.getTokenBalance = getTokenBalance;
    this.hyperionGetTokensForAccount = hyperionGetTokensForAccount;
    this.getTokenSupply = getTokenSupply;
    this.lightGetTokens = lightGetTokens;
    this.getAccountTokens = getAccountTokens;
    this.getHistoryTransaction = getHistoryTransaction;
    this.getDeferredTransaction = getDeferredTransaction;
    this.getHyperionTransaction = getHyperionTransaction;
    this.generateTransactionSettings = generateTransactionSettings;
    this.getProxies = getProxies;
    this.getVoters = getVoters;
    this.calculateVoteWeight = calculateVoteWeight;
    this.weightedVoteToNumber = weightedVoteToNumber;
    this.getProxyData = getProxyData;
    this.getVoter = getVoter;
    this.getProducers = getProducers;
    this.getProducersLocal = getProducersLocal;
    this.getChainTable = getChainTable;
    this.fetchKycCountries = fetchKycCountries;
    this.checkUserKycStatus = checkUserKycStatus;
    this.applyForKyc = applyForKyc;
    this.currentLocation = currentLocation;
    this.getAvailableFeatures = getAvailableFeatures;
    this.otcQuote = otcQuote;
    this.otcOrder = otcOrder;
    this.generateAddress = generateAddress;
    this.deleteAddress = deleteAddress;
    this.withdrawMetal = withdrawMetal;
    this.withdrawalHistoryMetal = withdrawalHistoryMetal;
    this.getTokenPrices = getTokenPrices;
    this.getWithdrawalFee = getWithdrawalFee;
    this.getChainInfo = getChainInfo;
    this.createAccount = createAccount;
    this.loginAccount = loginAccount;
    this.getXprTotalStakedAndApr = getXprTotalStakedAndApr;
    this.getXprVoter = getXprVoter;
    this.getXprAccountStakes = getXprAccountStakes;
    this.getXprAccountRefund = getXprAccountRefund;
    this.getXprOracleData = getXprOracleData;
    this.getAllOracleFeeds = getAllOracleFeeds;
    this.getAllOracleData = getAllOracleData;
    this.getSpecificOracleData = getSpecificOracleData;
    this.getProtonAvatar = getProtonAvatar;
    this.getProtonAvatars = getProtonAvatars;

    if (chain) {
      _bloks_constants__WEBPACK_IMPORTED_MODULE_1__.constants.initialize(chain);
      this.initialize(_bloks_constants__WEBPACK_IMPORTED_MODULE_1__.constants);
    }
  }

  var _proto = ApiClass.prototype;

  _proto.initialize = function initialize(constants, _temp) {
    var _ref = _temp === void 0 ? {} : _temp,
        rpcEndpoints = _ref.rpcEndpoints,
        actionsRpcEndpoints = _ref.actionsRpcEndpoints,
        lightEndpoint = _ref.lightEndpoint,
        hyperionEndpoint = _ref.hyperionEndpoint;

    this.constants = constants;
    this.rpc = new _proton_js__WEBPACK_IMPORTED_MODULE_0__.JsonRpc(rpcEndpoints || this.constants.DEFAULT_ENDPOINTS);
    this.actionsRpc = new _proton_js__WEBPACK_IMPORTED_MODULE_0__.JsonRpc(actionsRpcEndpoints || this.constants.ACTIONS_ENDPOINTS);
    this.api = new _proton_js__WEBPACK_IMPORTED_MODULE_0__.Api({
      rpc: this.rpc
    });
    var lightUrl = lightEndpoint || this.constants.LIGHT_API;

    if (lightUrl) {
      this.lightApi = new _proton_light_api__WEBPACK_IMPORTED_MODULE_3__.JsonRpc(this.constants.CHAIN.toLowerCase().replace('-', ''), {
        endpoint: lightUrl
      });
    }

    var hyperionUrl = hyperionEndpoint || this.constants.HYPERION_URL;

    if (hyperionUrl) {
      this.hyperion = new _proton_hyperion__WEBPACK_IMPORTED_MODULE_2__.JsonRpc(hyperionUrl);
    }

    this.isInitialized = true;
  };

  return ApiClass;
}();


//# sourceMappingURL=api.esm.js.map


/***/ }),

/***/ "./node_modules/@proton/hyperion/dist/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@proton/hyperion/dist/index.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
// TypeScript Definitions
__exportStar(__webpack_require__(/*! ./src/types/action_trace */ "./node_modules/@proton/hyperion/dist/src/types/action_trace.js"), exports);
__exportStar(__webpack_require__(/*! ./src/types/api */ "./node_modules/@proton/hyperion/dist/src/types/api.js"), exports);
// Hyperion API
__exportStar(__webpack_require__(/*! ./src/jsonrpc */ "./node_modules/@proton/hyperion/dist/src/jsonrpc.js"), exports);
__exportStar(__webpack_require__(/*! ./src/endpoints */ "./node_modules/@proton/hyperion/dist/src/endpoints.js"), exports);
__exportStar(__webpack_require__(/*! ./src/rpcerror */ "./node_modules/@proton/hyperion/dist/src/rpcerror.js"), exports);
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@proton/hyperion/dist/src/endpoints.js":
/*!*************************************************************!*\
  !*** ./node_modules/@proton/hyperion/dist/src/endpoints.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.V2_GET_TRANSFERS = exports.V2_GET_TRANSACTION = exports.V2_GET_TRANSACTED_ACCOUNTS = exports.V2_GET_DELTAS = exports.V2_GET_CREATOR = exports.V2_GET_CREATED_ACCOUNTS = exports.V2_GET_ACTIONS = exports.V2_GET_ABI_SNAPSHOT = exports.V2_GET_PROPOSALS = exports.V2_GET_LINKS = exports.V2_GET_VOTERS = exports.V2_GET_TOKENS = exports.V2_GET_KEY_ACCOUNTS = exports.V2_ALIVE = void 0;
// State
exports.V2_ALIVE = "/v2/state/alive";
exports.V2_GET_KEY_ACCOUNTS = "/v2/state/get_key_accounts";
exports.V2_GET_TOKENS = "/v2/state/get_tokens";
exports.V2_GET_VOTERS = "/v2/state/get_voters";
exports.V2_GET_LINKS = "/v2/state/get_links";
exports.V2_GET_PROPOSALS = "/v2/state/get_proposals";
// History
exports.V2_GET_ABI_SNAPSHOT = "/v2/history/get_abi_snapshot";
exports.V2_GET_ACTIONS = "/v2/history/get_actions";
exports.V2_GET_CREATED_ACCOUNTS = "/v2/history/get_created_accounts";
exports.V2_GET_CREATOR = "/v2/history/get_creator";
exports.V2_GET_DELTAS = "/v2/history/get_deltas";
exports.V2_GET_TRANSACTED_ACCOUNTS = "/v2/history/get_transacted_accounts";
exports.V2_GET_TRANSACTION = "/v2/history/get_transaction";
exports.V2_GET_TRANSFERS = "/v2/history/get_transfers";
//# sourceMappingURL=endpoints.js.map

/***/ }),

/***/ "./node_modules/@proton/hyperion/dist/src/jsonrpc.js":
/*!***********************************************************!*\
  !*** ./node_modules/@proton/hyperion/dist/src/jsonrpc.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.JsonRpc = void 0;
var endpoints_1 = __webpack_require__(/*! ./endpoints */ "./node_modules/@proton/hyperion/dist/src/endpoints.js");
var rpcerror_1 = __webpack_require__(/*! ./rpcerror */ "./node_modules/@proton/hyperion/dist/src/rpcerror.js");
var cross_fetch_1 = __importDefault(__webpack_require__(/*! cross-fetch */ "./node_modules/cross-fetch/dist/browser-ponyfill.js"));
function queryParams(params) {
    var entries = [];
    for (var _i = 0, _a = Object.keys(params); _i < _a.length; _i++) {
        var key = _a[_i];
        var value = params[key];
        if (value !== undefined) {
            entries.push(encodeURIComponent(key) + "=" + encodeURIComponent(value));
        }
    }
    return entries.join("&");
}
function fetchWithTimeout(resource, options) {
    return __awaiter(this, void 0, void 0, function () {
        var timeout, controller, id, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    timeout = options.timeout;
                    controller = new AbortController();
                    id = setTimeout(function () { return controller.abort(); }, timeout);
                    return [4 /*yield*/, (0, cross_fetch_1.default)(resource, __assign(__assign({}, (options || {})), { signal: controller.signal }))];
                case 1:
                    response = _a.sent();
                    clearTimeout(id);
                    return [2 /*return*/, response];
            }
        });
    });
}
/**
 * JsonRpc
 *
 * @param {string} endpoint hyperion endpoint
 * @example
 *
 * const endpoint = "https://br.eosrio.io"
 * const rpc = new JsonRpc(endpoint, { fetch })
 */
var JsonRpc = /** @class */ (function () {
    function JsonRpc(endpoint, args) {
        if (args === void 0) { args = {}; }
        this.timeout = 8000;
        this.endpoint = endpoint;
        if (args.timeout) {
            this.timeout = args.timeout;
        }
    }
    /**
     * post
     *
     * POST `body` to `endpoint + path`.
     * Throws detailed error information in `RpcError` when available.
     *
     * @private
     */
    JsonRpc.prototype.post = function (path, body) {
        return __awaiter(this, void 0, void 0, function () {
            var response, json, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        return [4 /*yield*/, fetchWithTimeout(this.endpoint + path, {
                                body: JSON.stringify(body),
                                method: "POST",
                                timeout: this.timeout
                            })];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.json()];
                    case 2:
                        json = _a.sent();
                        if (json.processed && json.processed.except) {
                            throw new rpcerror_1.RpcError(json);
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _a.sent();
                        e_1.isFetchError = true;
                        throw e_1;
                    case 4:
                        if (!response.ok) {
                            throw new rpcerror_1.RpcError(json);
                        }
                        return [2 /*return*/, json];
                }
            });
        });
    };
    /**
     * get
     *
     * GET `params` to `endpoint + path`.
     * Throws detailed error information in `RpcError` when available.
     *
     * @private
     */
    JsonRpc.prototype.get = function (path, params) {
        return __awaiter(this, void 0, void 0, function () {
            var response, json, url, e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = this.endpoint + path + "?" + queryParams(params);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 4, , 5]);
                        return [4 /*yield*/, fetchWithTimeout(url, {
                                method: "GET",
                                timeout: this.timeout
                            })];
                    case 2:
                        response = _a.sent();
                        if (response.status !== 200) {
                            throw new rpcerror_1.RpcStatusError(response);
                        }
                        return [4 /*yield*/, response.json()];
                    case 3:
                        json = _a.sent();
                        if (json.processed && json.processed.except) {
                            throw new rpcerror_1.RpcError(json);
                        }
                        return [3 /*break*/, 5];
                    case 4:
                        e_2 = _a.sent();
                        e_2.isFetchError = true;
                        throw e_2;
                    case 5:
                        if (!response.ok) {
                            throw new rpcerror_1.RpcError(json);
                        }
                        return [2 /*return*/, json];
                }
            });
        });
    };
    /**
     * [GET /v2/state/alive](https://eos.hyperion.eosrio.io/v2/docs/index.html#/state/get_v2_state_alive)
     *
     * simple server healthcheck
     *
     * @returns {Promise<Alive>} alive
     * @example
     *
     * const response = await rpc.alive();
     * console.log(response);
     * // => {"status": "OK"}
     */
    JsonRpc.prototype.alive = function () {
        return this.get(endpoints_1.V2_ALIVE, {});
    };
    /**
     * [GET /v2/history/get_abi_snapshot](https://eos.hyperion.eosrio.io/v2/docs/index.html#/history/get_v2_history_get_abi_snapshot)
     *
     * fetch contract abi at specific block
     *
     * @param {string} contract contract account
     * @param {number} number target block
     * @returns {Promise<GetAbiSnapshot>} abi snapshot
     * @example
     *
     * const response = await rpc.get_abi_snapshot("eosio", 200);
     * console.log(response.version);
     * // => "eosio::abi/1.0"
     *
     * for (const table of response.tables) {
     *     console.log(table);
     *     // => { name: 'producers', index_type: 'i64', key_names: [ 'owner' ], key_types: [ 'uint64' ], type: 'producer_info' }
     * }
     */
    JsonRpc.prototype.get_abi_snapshot = function (contract, block) {
        var params = {
            contract: contract,
            block: block,
        };
        return this.get(endpoints_1.V2_GET_ABI_SNAPSHOT, params);
    };
    /**
     * [GET /v2/state/get_voters](https://eos.hyperion.eosrio.io/v2/docs/index.html#/state/get_v2_state_get_voters)
     *
     * get voters
     *
     * @param {object} [options={}] Optional parameters
     * @param {string} [options.producer] filter by voted producer (comma separated)
     * @param {boolean} [options.proxy] true or false
     * @param {number} [options.skip] skip [n] actions (pagination)
     * @param {number} [options.limit] limit of [n] actions per page
     * @returns {Promise<GetVoters>} voters
     * @example
     *
     * const response = await rpc.get_voters({ producer: "eoscafeblock", limit: 100 });
     * console.log(response.voters);
     * // => "[{
     * //   "account": "guzdkmrtgage",
     * //   "weight": 78434695236505280,
     * //   "last_vote": 64804768
     * // }]"
     */
    JsonRpc.prototype.get_voters = function (options) {
        return this.get(endpoints_1.V2_GET_VOTERS, options);
    };
    /**
     * [GET /v2/state/get_links](https://eos.hyperion.eosrio.io/v2/docs/index.html#/state/get_v2_state_links)
     *
     * get voters
     *
     * @param {string} [account] account to get links for
     * @returns {Promise<GetLinks>} links
     * @example
     *
     * const response = await rpc.get_links("eoscafeblock");
     * console.log(response.links);
     * // => "[{
     * "block_num":26088072,
     * "timestamp":"2019-11-22T23:17:42.000",
     * "account":"eosriobrazil",
     * "permission":"claim2",
     * "code":"eosio",
     * "action":"voteproducer"
     * }]"
     */
    JsonRpc.prototype.get_links = function (account) {
        return this.get(endpoints_1.V2_GET_LINKS, { account: account });
    };
    /**
     * [GET /v2/state/get_proposals](https://eos.hyperion.eosrio.io/v2/docs/index.html#/state/get_v2_state_get_proposals)
     *
     * get proposals
     *
     * @param {string} [account] account to get proposals for
     * @param {object} [options={}] Optional parameters
     * @param {string} [options.proposer] filter by proposer
     * @param {string} [options.proposal] filter by proposal name
     * @param {string} [options.account] filter by either requested or provided account
     * @param {string} [options.requested] filter by requested account
     * @param {string} [options.provided] filter by provided account
     * @param {string} [options.track] total results to track (count) [number or true]
     * @param {number} [options.skip] skip [n] actions (pagination)
     * @param {number} [options.limit] limit of [n] actions per page
     * @returns {Promise<GetProposals>} proposals
     */
    JsonRpc.prototype.get_proposals = function (options) {
        return this.get(endpoints_1.V2_GET_PROPOSALS, options);
    };
    /**
     * [GET /v2/history/get_actions](https://eos.hyperion.eosrio.io/v2/docs/index.html#/history/get_v2_history_get_actions)
     *
     * get actions based on notified account
     *
     * @param {string} account notified account
     * @param {object} [options={}] Optional parameters
     * @param {string} [options.filter] code::name filter
     * @param {number} [options.skip] skip [n] actions (pagination)
     * @param {number} [options.limit] limit of [n] actions per page
     * @param {string} [options.sort] sort direction
     * @param {string} [options.after] filter after specified date (ISO8601)
     * @param {string} [options.before] filter before specified date (ISO8601)
     * @param {string} [options.transfer_to] transfer filter to
     * @param {string} [options.transfer_from]  transfer filter from
     * @param {string} [options.transfer_symbol]  transfer filter symbol
     * @param {string} [options.act_name]  act name
     * @param {string} [options.act_account]  act account
     * @returns {Promise<GetActions>} get actions
     * @example
     *
     * const response = await rpc.get_actions("eoscafeblock", {
     *     filter: "eosio.token:*",
     *     skip: 100,
     *     limit: 100,
     * });
     *
     * for (const action of response.actions) {
     *     console.log(action);
     *     // => { act: { account: 'eosio.token', name: 'transfer', ... } }
     * }
     */
    JsonRpc.prototype.get_actions = function (account, options) {
        if (options === void 0) { options = {}; }
        var params = Object.assign({}, { account: account }, options);
        return this.get(endpoints_1.V2_GET_ACTIONS, params);
    };
    /**
     * [GET /v2/history/get_created_accounts](https://eos.hyperion.eosrio.io/v2/docs/index.html#/history/get_v2_history_get_created_accounts)
     *
     * get created accounts
     *
     * @param {string} account created account
     * @returns {Promise<GetCreatedAccounts>} get creator
     * @example
     *
     * const response = await rpc.get_created_accounts("eosnationftw");
     * console.log(response);
     * // => {"accounts": [{"name":"eosnationdsp","trx_id":"728d4a4da36a98d9048080461dacaf975ad083e8158ef84edea60cc755ab2c1a","timestamp":"2019-02-28T22:36:45.000"}, ... ]}
     */
    JsonRpc.prototype.get_created_accounts = function (account) {
        var params = {
            account: account,
        };
        return this.get(endpoints_1.V2_GET_CREATED_ACCOUNTS, params);
    };
    /**
     * [GET /v2/history/get_creator](https://eos.hyperion.eosrio.io/v2/docs/index.html#/history/get_v2_history_get_creator)
     *
     * get creator
     *
     * @param {string} account created account
     * @returns {Promise<GetCreator>} get creator
     * @example
     *
     * const response = await rpc.get_creator("eosnationftw");
     * console.log(response);
     * // => { account: 'eosnationftw', creator: 'gyztcmrvgqge', timestamp: '2018-06-10T13:06:43.500', ... }
     */
    JsonRpc.prototype.get_creator = function (account) {
        var params = {
            account: account,
        };
        return this.get(endpoints_1.V2_GET_CREATOR, params);
    };
    /**
     * [GET /v2/history/get_deltas](https://eos.hyperion.eosrio.io/v2/docs/index.html#/history/get_v2_history_get_deltas)
     *
     * get deltas
     *
     * @param {string} code contract account
     * @param {string} scope table scope
     * @param {string} table table name
     * @param {string} payer payer account
     * @returns {Promise<GetDeltas>} get deltas
     * @example
     *
     * const response = await rpc.get_deltas("eosio.token", "eosnationftw", "accounts", "eosnationftw");
     * console.log(response);
     * // => { "query_time": 19, "total": { "value": 486, "relation": "eq" }, "deltas": [ ... ] }
     */
    JsonRpc.prototype.get_deltas = function (code, scope, table, payer, options) {
        var params = Object.assign({}, options, {
            code: code,
            scope: scope,
            table: table,
            payer: payer,
        });
        return this.get(endpoints_1.V2_GET_DELTAS, params);
    };
    /**
     * [GET/v2/state/get_key_accounts](https://eos.hyperion.eosrio.io/v2/docs/index.html#/state/get_v2_state_get_key_accounts)
     *
     * get account by public key
     *
     * @param {string} public_key Contract account targeted by the action.
     * @returns {Promise<GetKeyAccounts>} key accounts
     * @example
     *
     * const response = await rpc.get_key_accounts("EOS5Mto3Km6BCVxowb6LkkFaT9oaUwLVgswgcxvY4Qgc4rhHry4Tv");
     * console.log(response.account_names);
     * // => [ 'eoscafeblock' ]
     */
    JsonRpc.prototype.get_key_accounts = function (public_key) {
        var params = {
            public_key: public_key,
        };
        return this.get(endpoints_1.V2_GET_KEY_ACCOUNTS, params);
    };
    /**
     * [GET /v2/state/get_tokens](https://eos.hyperion.eosrio.io/v2/docs/index.html#/state/get_v2_state_get_tokens)
     *
     * get tokens
     *
     * @param {string} account account
     * @returns {Promise<GetTokens>} get tokens
     * @example
     *
     * const response = await rpc.get_tokens("eosnationftw");
     * for (const token of response.tokens) {
     *     console.log(token);
     *     // => { symbol: 'ZOS', precision: 4, amount: 140, contract: 'zosdiscounts' }
     * }
     */
    JsonRpc.prototype.get_tokens = function (account) {
        var params = {
            account: account,
        };
        return this.get(endpoints_1.V2_GET_TOKENS, params);
    };
    /**
     * [GET /v2/history/get_transacted_accounts](https://eos.hyperion.eosrio.io/v2/docs/index.html#/history/get_v2_history_get_transacted_accounts)
     *
     * get all account that interacted with the source account provided
     *
     * @param {string} account source account
     * @param {string} direction search direction (in, out or both)
     * @returns {Promise<GetTransactedAccounts>} transacted accounts
     * @example
     *
     * const response = await rpc.get_transacted_accounts("eoscafeblock", "in");
     * console.log(response);
     * // => { query_time: 268, account: 'eoscafeblock', total_in: 1092369.1827, inputs: [ ... ] }
     */
    JsonRpc.prototype.get_transacted_accounts = function (account, direction, options) {
        if (options === void 0) { options = {}; }
        var params = Object.assign({}, { account: account, direction: direction }, options);
        return this.get(endpoints_1.V2_GET_TRANSACTED_ACCOUNTS, params);
    };
    /**
     * [GET /v2/history/get_transaction](https://eos.hyperion.eosrio.io/v2/docs/index.html#/history/get_v2_history_get_transaction)
     *
     * get all actions belonging to the same transaction
     *
     * @param {string} id transaction id
     * @returns {Promise<GetTransaction>} transaction
     * @example
     *
     * const response = await rpc.get_transaction("42dacd5722001b734be46a2140917e06cd21d42425f927f506c07b4388b07f62");
     * for (const action of response.actions) {
     *     console.log(action);
     *     // => { act: { account: 'eosio', name: 'buyrambytes', ... }}
     * }
     */
    JsonRpc.prototype.get_transaction = function (id) {
        var params = {
            id: id,
        };
        return this.get(endpoints_1.V2_GET_TRANSACTION, params);
    };
    /**
     * [GET /v2/history/get_transfers](https://eos.hyperion.eosrio.io/v2/docs/index.html#/history/get_v2_history_get_transfers)
     *
     * get token transfers utilizing the eosio.token standard
     *
     * @param {object} [options={}] Optional parameters
     * @param {string} [options.from] source account
     * @param {string} [options.to] destination account
     * @param {string} [options.symbol] token symbol
     * @param {string} [options.contract] token contract
     * @param {number} [options.skip] skip [n] actions (pagination)
     * @param {number} [options.limit] limit of [n] actions per page
     * @param {string} [options.after] filter after specified date (ISO8601)
     * @param {string} [options.before] filter before specified date (ISO8601)
     * @returns {Promise<GetTransfers>} transfers
     * @example
     *
     * const response = await rpc.get_transfers({to: "eosnewyorkio"});
     * for (const action of response.actions) {
     *     console.log(action.act.data);
     *     // => { from: 'eosio.bpay', to: 'eosnewyorkio', amount: 326.524, symbol: 'EOS', memo: 'producer block pay' }
     * }
     */
    JsonRpc.prototype.get_transfers = function (options) {
        if (options === void 0) { options = {}; }
        var params = Object.assign({}, options);
        return this.get(endpoints_1.V2_GET_TRANSFERS, params);
    };
    return JsonRpc;
}());
exports.JsonRpc = JsonRpc;
//# sourceMappingURL=jsonrpc.js.map

/***/ }),

/***/ "./node_modules/@proton/hyperion/dist/src/rpcerror.js":
/*!************************************************************!*\
  !*** ./node_modules/@proton/hyperion/dist/src/rpcerror.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RpcStatusError = exports.RpcError = void 0;
/**
 * @private
 * @module RPC-Error
 *
 * copyright defined in eosjs/LICENSE.txt
 */
var RpcError = /** @class */ (function (_super) {
    __extends(RpcError, _super);
    function RpcError(json) {
        var _this = this;
        if (json.error && json.error.details && json.error.details.length && json.error.details[0].message) {
            _this = _super.call(this, json.error.details[0].message) || this;
        }
        else if (json.processed && json.processed.except && json.processed.except.message) {
            _this = _super.call(this, json.processed.except.message) || this;
        }
        else {
            _this = _super.call(this, json.message) || this;
        }
        Object.setPrototypeOf(_this, RpcError.prototype);
        _this.json = json;
        return _this;
    }
    return RpcError;
}(Error));
exports.RpcError = RpcError;
/**
 * @private
 */
var RpcStatusError = /** @class */ (function (_super) {
    __extends(RpcStatusError, _super);
    function RpcStatusError(response) {
        var _this = this;
        if (response.status === 405) {
            _this = _super.call(this, response.statusText) || this;
        }
        else {
            _this = _super.call(this) || this;
        }
        Object.setPrototypeOf(_this, RpcStatusError.prototype);
        _this.response = response;
        return _this;
    }
    return RpcStatusError;
}(Error));
exports.RpcStatusError = RpcStatusError;
//# sourceMappingURL=rpcerror.js.map

/***/ }),

/***/ "./node_modules/@proton/hyperion/dist/src/types/action_trace.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@proton/hyperion/dist/src/types/action_trace.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=action_trace.js.map

/***/ }),

/***/ "./node_modules/@proton/hyperion/dist/src/types/api.js":
/*!*************************************************************!*\
  !*** ./node_modules/@proton/hyperion/dist/src/types/api.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=api.js.map

/***/ }),

/***/ "./node_modules/@proton/light-api/dist/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@proton/light-api/dist/index.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
// TypeScript Definitions
__exportStar(__webpack_require__(/*! ./src/types/api */ "./node_modules/@proton/light-api/dist/src/types/api.js"), exports);
// Light API
__exportStar(__webpack_require__(/*! ./src/jsonrpc */ "./node_modules/@proton/light-api/dist/src/jsonrpc.js"), exports);
__exportStar(__webpack_require__(/*! ./src/endpoints */ "./node_modules/@proton/light-api/dist/src/endpoints.js"), exports);
__exportStar(__webpack_require__(/*! ./src/rpcerror */ "./node_modules/@proton/light-api/dist/src/rpcerror.js"), exports);
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@proton/light-api/dist/src/endpoints.js":
/*!**************************************************************!*\
  !*** ./node_modules/@proton/light-api/dist/src/endpoints.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GET_ACCOUNTS_FROM_KEYS = exports.GET_TOKEN_HOLDERS = exports.GET_TOKEN_HOLDER_COUNT = exports.GET_CODEHASH = exports.GET_TOPSTAKE = exports.GET_TOPRAM = exports.GET_USERCOUNT = exports.GET_TOPHOLDERS = exports.GET_TOKEN_BALANCE = exports.GET_SYNC_INFO = exports.GET_NETWORKS = exports.GET_KEY_ACCOUNTS = exports.GET_BALANCES = exports.GET_ACCOUNT_INFO = exports.GET_ACCOUNT = void 0;
exports.GET_ACCOUNT = "/api/account";
exports.GET_ACCOUNT_INFO = "/api/accinfo";
exports.GET_BALANCES = "/api/balances";
exports.GET_KEY_ACCOUNTS = "/api/key";
exports.GET_NETWORKS = "/api/networks";
exports.GET_SYNC_INFO = "/api/sync";
exports.GET_TOKEN_BALANCE = "/api/tokenbalance";
exports.GET_TOPHOLDERS = "/api/topholders";
exports.GET_USERCOUNT = "/api/usercount";
exports.GET_TOPRAM = "/api/topram";
exports.GET_TOPSTAKE = "/api/topstake";
exports.GET_CODEHASH = "/api/codehash";
exports.GET_TOKEN_HOLDER_COUNT = "/api/holdercount";
exports.GET_TOKEN_HOLDERS = "get_token_holders";
exports.GET_ACCOUNTS_FROM_KEYS = "get_accounts_from_keys";
//# sourceMappingURL=endpoints.js.map

/***/ }),

/***/ "./node_modules/@proton/light-api/dist/src/jsonrpc.js":
/*!************************************************************!*\
  !*** ./node_modules/@proton/light-api/dist/src/jsonrpc.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.JsonRpc = void 0;
var endpoints_1 = __webpack_require__(/*! ./endpoints */ "./node_modules/@proton/light-api/dist/src/endpoints.js");
var rpcerror_1 = __webpack_require__(/*! ./rpcerror */ "./node_modules/@proton/light-api/dist/src/rpcerror.js");
var cross_fetch_1 = __importDefault(__webpack_require__(/*! cross-fetch */ "./node_modules/cross-fetch/dist/browser-ponyfill.js"));
var jsonrpc2_ws_1 = __webpack_require__(/*! jsonrpc2-ws */ "./node_modules/jsonrpc2-ws/lib/index.js");
var chainToEndpoint = {
    eos: "https://api.light.xeos.me",
    telos: "https://api.light.xeos.me",
    jungle: "https://lightapi.eosgeneva.io",
    bos: "https://lightapi.eosamsterdam.net",
    instar: "https://lightapi.eosamsterdam.net",
    proton: "https://proton.light-api.net",
    wax: "https://lightapi.eosamsterdam.net",
    worbli: "https://lightapi.eosamsterdam.net",
    xec: "https://lightapi.eosamsterdam.net",
    protontest: "https://testnet-lightapi.eosams.xeos.me",
    telostest: "https://testnet-lightapi.eosams.xeos.me",
    waxtest: "https://testnet-lightapi.eosams.xeos.me",
    coffe: "https://hyperion.coffe.io",
};
function fetchWithTimeout(resource, options) {
    return __awaiter(this, void 0, void 0, function () {
        var timeout, controller, id, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    timeout = options.timeout;
                    controller = new AbortController();
                    id = setTimeout(function () { return controller.abort(); }, timeout);
                    return [4 /*yield*/, (0, cross_fetch_1.default)(resource, __assign(__assign({}, (options || {})), { signal: controller.signal }))];
                case 1:
                    response = _a.sent();
                    clearTimeout(id);
                    return [2 /*return*/, response];
            }
        });
    });
}
/**
 * JsonRpc
 *
 * @param {string} endpoint LIGHT API endpoint
 * @example
 *
 * const rpc = new JsonRpc("proton")
 */
var JsonRpc = /** @class */ (function () {
    function JsonRpc(chain, args) {
        if (args === void 0) { args = {}; }
        this.timeout = 5000;
        this.wsRequestId = 100;
        this.chain = chain;
        this.endpoint = args.endpoint || chainToEndpoint[chain];
        this.wsClient = new jsonrpc2_ws_1.Client(this.endpoint.replace('https:', 'wss:') + '/wsapi');
        if (!this.endpoint) {
            throw new Error("Chain ".concat(chain, " does not have a default endpoint, provide one in args"));
        }
        if (args.timeout) {
            this.timeout = args.timeout;
        }
    }
    /**
     * get
     *
     * GET `params` to `endpoint + path`.
     * Throws detailed error information in `RpcError` when available.
     *
     * @private
     */
    JsonRpc.prototype.get = function (path, endpoint) {
        if (endpoint === void 0) { endpoint = this.endpoint; }
        return __awaiter(this, void 0, void 0, function () {
            var response, json, url, text, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = endpoint + path;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 4, , 5]);
                        return [4 /*yield*/, fetchWithTimeout(url, {
                                method: "GET",
                                timeout: this.timeout,
                            })];
                    case 2:
                        response = _a.sent();
                        if (response.status !== 200) {
                            throw new rpcerror_1.RpcStatusError(response);
                        }
                        return [4 /*yield*/, response.text()];
                    case 3:
                        text = _a.sent();
                        try {
                            json = JSON.parse(text);
                            if (json.processed && json.processed.except) {
                                throw new rpcerror_1.RpcError(json);
                            }
                        }
                        catch (_b) {
                            json = text;
                        }
                        return [3 /*break*/, 5];
                    case 4:
                        e_1 = _a.sent();
                        e_1.isFetchError = true;
                        throw e_1;
                    case 5:
                        if (!response.ok) {
                            throw new rpcerror_1.RpcError(json);
                        }
                        return [2 /*return*/, json];
                }
            });
        });
    };
    /**
     * [GET /api/account]
     *
     * Retrieve all token balances, resources and authorization information for an account:
     *
     * @param {string} accountName name of account
     * @returns {Promise<GetAccount>} account
     */
    JsonRpc.prototype.get_account = function (accountName) {
        var url = "".concat(endpoints_1.GET_ACCOUNT, "/").concat(this.chain, "/").concat(accountName);
        return this.get(url);
    };
    /**
     * [GET /api/accinfo]
     *
     * Retrieve all resources and authorization information for an account:
     *
     * @param {string} accountName name of account
     * @returns {Promise<GetAccountInfo>} account
     */
    JsonRpc.prototype.get_account_info = function (accountName) {
        var url = "".concat(endpoints_1.GET_ACCOUNT_INFO, "/").concat(this.chain, "/").concat(accountName);
        return this.get(url);
    };
    /**
     * [GET /api/balances]
     *
     * Retrieve only token balances for an account
     *
     * @param {string} accountName name of account
     * @returns {Promise<GetBalances>} balances
     */
    JsonRpc.prototype.get_balances = function (accountName) {
        var url = "".concat(endpoints_1.GET_BALANCES, "/").concat(this.chain, "/").concat(accountName);
        return this.get(url);
    };
    /**
     * [GET /api/key]
     *
     * Retrieve all accounts in all known EOS networks dependent on a public key:
     *
     * @param {string} key public key
     * @returns {Promise<GetKeyAccounts[]>} accounts per network
     */
    JsonRpc.prototype.get_all_key_accounts = function (key) {
        return __awaiter(this, void 0, void 0, function () {
            var promises;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        promises = __spreadArray([], __read(new Set(Object.values(chainToEndpoint))), false).map(function (endpoint) {
                            var url = "".concat(endpoints_1.GET_KEY_ACCOUNTS, "/").concat(key);
                            return _this.get(url, endpoint);
                        });
                        return [4 /*yield*/, Promise.all(promises)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * [GET /api/key]
     *
     * Retrieve all accounts in network
     *
     * @param {string} key public key
     * @returns {Promise<GetKeyAccounts>} accounts
     */
    JsonRpc.prototype.get_key_accounts = function (key) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                url = "".concat(endpoints_1.GET_KEY_ACCOUNTS, "/").concat(key);
                return [2 /*return*/, this.get(url)];
            });
        });
    };
    /**
     * [GET /api/networks]
     *
     * Retrieve all accounts in all known EOS networks dependent on a public key:
     *
     * @returns {Promise<GetNetworks>} accounts
     */
    JsonRpc.prototype.get_networks = function () {
        return this.get(endpoints_1.GET_NETWORKS);
    };
    /**
     * [GET /api/sync]
     *
     * returns a plain text with delay in seconds that this server's blockchain database is behind the real time, and a status: OK if the delay is within 180 seconds, or 'OUT_OF_SYNC' otherwise.
     *
     * @returns {Promise<string>} get sync
     */
    JsonRpc.prototype.get_sync_info = function () {
        var url = "".concat(endpoints_1.GET_SYNC_INFO, "/").concat(this.chain);
        return this.get(url);
    };
    /**
     * [GET /api/tokenbalance]
     *
     *  returns a plain text with numeric output indicating the token balance. Zero is returned if the token is not present or does not exist.
     *
     * @param {string} account owner of token
     * @param {string} contract token contract
     * @param {string} token token symbol
     * @returns {Promise<string>} token balance
     */
    JsonRpc.prototype.get_token_balance = function (account, contract, token) {
        var url = "".concat(endpoints_1.GET_TOKEN_BALANCE, "/").concat(this.chain, "/").concat(account, "/").concat(contract, "/").concat(token);
        return this.get(url);
    };
    /**
     * [GET /api/topholders]
     *
     * returns top NUM holders of a specified token in a JSON array containing arrays of (account, amount) pairs. NUM must not be less than 10 or more than 1000.
     *
     * @param {string} contract token contract
     * @param {string} token token symbol
     * @param {string} num number of top holders (min 10, max 1000)
     *
     * @returns {Promise<string>} token balance
     */
    JsonRpc.prototype.get_topholders = function (contract, token, num) {
        var url = "".concat(endpoints_1.GET_TOPHOLDERS, "/").concat(this.chain, "/").concat(contract, "/").concat(token, "/").concat(num);
        return this.get(url);
    };
    /**
     * [GET /api/usercount]
     *
     * returns a plain text with total number of accounts in the network.
     *
     * @returns {Promise<string>} token balance
     */
    JsonRpc.prototype.get_usercount = function () {
        var url = "".concat(endpoints_1.GET_USERCOUNT, "/").concat(this.chain);
        return this.get(url);
    };
    /**
     * [GET /api/topram]
     *
     * returns top NUM RAM buyers in a JSON array containing arrays of (account, bytes) pairs. NUM must not be less than 10 or more than 1000.
     *
     * @param {string} num number of top holders (min 10, max 1000)
     *
     * @returns {Promise<GetTopRam>} top ram holders
     */
    JsonRpc.prototype.get_topram = function (num) {
        var url = "".concat(endpoints_1.GET_TOPRAM, "/").concat(this.chain, "/").concat(num);
        return this.get(url);
    };
    /**
     * [GET /api/topstake]
     *
     * returns top NUM RAM buyers in a JSON array containing arrays of (account, bytes) pairs. NUM must not be less than 10 or more than 1000.
     *
     * @param {string} num returns top NUM stake holders by sum of CPU and Net stakes, in a JSON array containing arrays of (account, cpu_weight, net_weight) tuples. NUM must not be less than 10 or more than 1000.
     *
     * @returns {Promise<GetTopStake>} top stake holders
     */
    JsonRpc.prototype.get_topstake = function (num) {
        var url = "".concat(endpoints_1.GET_TOPSTAKE, "/").concat(this.chain, "/").concat(num);
        return this.get(url);
    };
    /**
     * [GET /api/codehash]
     *
     * retrieves all accounts in all known EOS networks by contract hash.
     *
     * @param {string} num returns top NUM stake holders by sum of CPU and Net stakes, in a JSON array containing arrays of (account, cpu_weight, net_weight) tuples. NUM must not be less than 10 or more than 1000.
     *
     * @returns {Promise<GetCodehash>} accounts
     */
    JsonRpc.prototype.get_codehash = function (hash) {
        var url = "".concat(endpoints_1.GET_CODEHASH, "/").concat(hash);
        return this.get(url);
    };
    /**
     * [GET /api/holdercount]
     *
     * returns a plaintext integer indicating the number of accounts with positive balance for a specified token.
     *
     * @param {string} contract token contract
     * @param {string} token token symbol
     *
     * @returns {Promise<number>} count
     */
    JsonRpc.prototype.get_tokenholder_count = function (contract, token) {
        var url = "".concat(endpoints_1.GET_TOKEN_HOLDER_COUNT, "/").concat(this.chain, "/").concat(contract, "/").concat(token);
        return this.get(url);
    };
    /**
     * [WS get_token_holders]
     *
     * Get all token holders of a contract and symbol
     *
     * @param contract token contract
     * @param token token symbol
     * @returns
     */
    JsonRpc.prototype.get_token_holders = function (contract, token) {
        var _this = this;
        var reqId = ++this.wsRequestId;
        var balances = [];
        return new Promise(function (resolve, reject) {
            _this.wsClient.on('error', function (err) { return reject(err); });
            _this.wsClient.methods.set('reqdata', function (_, params) {
                if (params.end) {
                    resolve(balances);
                }
                balances.push({
                    account: params.data.account,
                    amount: +params.data.amount,
                });
            });
            try {
                _this.wsClient.call(endpoints_1.GET_TOKEN_HOLDERS, {
                    reqid: reqId,
                    network: _this.chain,
                    contract: contract,
                    currency: token,
                });
            }
            catch (err) {
                reject(err);
                return;
            }
        });
    };
    /**
     * [WS get_accounts_from_keys]
     *
     * Get all token holders of a contract and symbol
     *
     * @param keys[] array of keys
     * @returns
     */
    JsonRpc.prototype.get_accounts_from_keys = function (keys) {
        var _this = this;
        var reqId = ++this.wsRequestId;
        var accounts = [];
        return new Promise(function (resolve, reject) {
            _this.wsClient.on('error', function (err) { return reject(err); });
            _this.wsClient.methods.set('reqdata', function (_, params) {
                if (params.end) {
                    resolve(accounts);
                }
                accounts.push({
                    account_name: params.data.account_name,
                    perm: params.data.perm,
                    weight: +params.data.weight,
                    pubkey: params.data.pubkey,
                });
            });
            try {
                _this.wsClient.call(endpoints_1.GET_ACCOUNTS_FROM_KEYS, {
                    reqid: reqId,
                    network: _this.chain,
                    keys: keys,
                });
            }
            catch (err) {
                reject(err);
                return;
            }
        });
    };
    return JsonRpc;
}());
exports.JsonRpc = JsonRpc;
//# sourceMappingURL=jsonrpc.js.map

/***/ }),

/***/ "./node_modules/@proton/light-api/dist/src/rpcerror.js":
/*!*************************************************************!*\
  !*** ./node_modules/@proton/light-api/dist/src/rpcerror.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RpcStatusError = exports.RpcError = void 0;
/**
 * @private
 * @module RPC-Error
 *
 * copyright defined in eosjs/LICENSE.txt
 */
var RpcError = /** @class */ (function (_super) {
    __extends(RpcError, _super);
    function RpcError(json) {
        var _this = this;
        if (json.error && json.error.details && json.error.details.length && json.error.details[0].message) {
            _this = _super.call(this, json.error.details[0].message) || this;
        }
        else if (json.processed && json.processed.except && json.processed.except.message) {
            _this = _super.call(this, json.processed.except.message) || this;
        }
        else {
            _this = _super.call(this, json.message) || this;
        }
        Object.setPrototypeOf(_this, RpcError.prototype);
        _this.json = json;
        return _this;
    }
    return RpcError;
}(Error));
exports.RpcError = RpcError;
/**
 * @private
 */
var RpcStatusError = /** @class */ (function (_super) {
    __extends(RpcStatusError, _super);
    function RpcStatusError(response) {
        var _this = this;
        if (response.status === 405) {
            _this = _super.call(this, response.statusText) || this;
        }
        else {
            _this = _super.call(this) || this;
        }
        Object.setPrototypeOf(_this, RpcStatusError.prototype);
        _this.response = response;
        return _this;
    }
    return RpcStatusError;
}(Error));
exports.RpcStatusError = RpcStatusError;
//# sourceMappingURL=rpcerror.js.map

/***/ }),

/***/ "./node_modules/@proton/light-api/dist/src/types/api.js":
/*!**************************************************************!*\
  !*** ./node_modules/@proton/light-api/dist/src/types/api.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=api.js.map

/***/ }),

/***/ "./node_modules/@proton/wrap-constants/dist/wrap-constants.esm.js":
/*!************************************************************************!*\
  !*** ./node_modules/@proton/wrap-constants/dist/wrap-constants.esm.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Chains": () => (/* binding */ Chains),
/* harmony export */   "ExtendedAssetParser": () => (/* binding */ ExtendedAssetParser),
/* harmony export */   "Networks": () => (/* binding */ Networks),
/* harmony export */   "Status": () => (/* binding */ Status),
/* harmony export */   "Type": () => (/* binding */ Type),
/* harmony export */   "WRAP_AUTH_ACTION": () => (/* binding */ WRAP_AUTH_ACTION),
/* harmony export */   "WRAP_CONTRACT": () => (/* binding */ WRAP_CONTRACT),
/* harmony export */   "accountParser": () => (/* binding */ accountParser),
/* harmony export */   "addressParser": () => (/* binding */ addressParser),
/* harmony export */   "authorizationParser": () => (/* binding */ authorizationParser),
/* harmony export */   "authorizationsParser": () => (/* binding */ authorizationsParser),
/* harmony export */   "baseActionParser": () => (/* binding */ baseActionParser),
/* harmony export */   "baseActionSerializedParser": () => (/* binding */ baseActionSerializedParser),
/* harmony export */   "createAbstractAuthParser": () => (/* binding */ createAbstractAuthParser),
/* harmony export */   "depositBodyParser": () => (/* binding */ depositBodyParser),
/* harmony export */   "exchangeRateParser": () => (/* binding */ exchangeRateParser),
/* harmony export */   "exchangeRatesParser": () => (/* binding */ exchangeRatesParser),
/* harmony export */   "explorerLinkByChain": () => (/* binding */ explorerLinkByChain),
/* harmony export */   "generateAddressBodyParser": () => (/* binding */ generateAddressBodyParser),
/* harmony export */   "generateAddressResponse": () => (/* binding */ generateAddressResponse),
/* harmony export */   "generateAuthParser": () => (/* binding */ generateAuthParser),
/* harmony export */   "initializeCoins": () => (/* binding */ initializeCoins),
/* harmony export */   "initializeConstants": () => (/* binding */ initializeConstants),
/* harmony export */   "isSameToken": () => (/* binding */ isSameToken),
/* harmony export */   "otcOrderResponseParser": () => (/* binding */ otcOrderResponseParser),
/* harmony export */   "otcQuoteBodyParser": () => (/* binding */ otcQuoteBodyParser),
/* harmony export */   "otcQuoteResponseParser": () => (/* binding */ otcQuoteResponseParser),
/* harmony export */   "rateParser": () => (/* binding */ rateParser),
/* harmony export */   "similarChains": () => (/* binding */ similarChains),
/* harmony export */   "singleActionTransactionParser": () => (/* binding */ singleActionTransactionParser),
/* harmony export */   "transactionParser": () => (/* binding */ transactionParser),
/* harmony export */   "webauthActionParser": () => (/* binding */ webauthActionParser),
/* harmony export */   "withdrawBodyParser": () => (/* binding */ withdrawBodyParser),
/* harmony export */   "withdrawHistoryMetalResponseParser": () => (/* binding */ withdrawHistoryMetalResponseParser),
/* harmony export */   "withdrawHistoryMetalSwapParser": () => (/* binding */ withdrawHistoryMetalSwapParser),
/* harmony export */   "withdrawMetalResponseParser": () => (/* binding */ withdrawMetalResponseParser),
/* harmony export */   "withdrawalFeeQuoteParser": () => (/* binding */ withdrawalFeeQuoteParser),
/* harmony export */   "wrapParser": () => (/* binding */ wrapParser),
/* harmony export */   "wrapSetConfParser": () => (/* binding */ wrapSetConfParser),
/* harmony export */   "wrapStartParser": () => (/* binding */ wrapStartParser)
/* harmony export */ });
/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/index.js");
/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(zod__WEBPACK_IMPORTED_MODULE_0__);


var _similarChains, _explorerLinkByChain;

var Chains;

(function (Chains) {
  Chains["BitcoinMainnet"] = "Bitcoin";
  Chains["BitcoinTestnet"] = "Bitcoin (Testnet)";
  Chains["EthereumMainnet"] = "Ethereum";
  Chains["EthereumRopsten"] = "Ethereum (Ropsten)";
  Chains["LitecoinMainnet"] = "Litecoin";
  Chains["LitecoinTestnet"] = "Litecoin (Testnet)";
  Chains["BitcoinCashMainnet"] = "Bitcoin Cash";
  Chains["BitcoinCashTestnet"] = "Bitcoin Cash (Testnet)";
  Chains["StellarMainnet"] = "Stellar";
  Chains["StellarTestnet"] = "Stellar (Testnet)";
  Chains["ProtonMainnet"] = "Proton";
  Chains["ProtonTestnet"] = "Proton (Testnet)";
  Chains["PolkadotMainnet"] = "Polkadot";
  Chains["BinanceBEP2"] = "Binance (BEP2)";
  Chains["BinanceBEP20"] = "Binance (BEP20)";
  Chains["EosMainnet"] = "EOS";
  Chains["EosTestnet"] = "EOS (Jungle Testnet)";
  Chains["HederaMainnet"] = "Hedera (Mainnet)";
  Chains["HederaTestnet"] = "Hedera (Testnet)";
  Chains["DogeMainnet"] = "Dogecoin";
  Chains["CardanoMainnet"] = "Cardano";
  Chains["AvalancheXChain"] = "Avalanche X-Chain";
  Chains["AvalancheCChain"] = "Avalanche C-Chain";
  Chains["PolygonMainnet"] = "Polygon";
  Chains["TerraMainnet"] = "Terra";
})(Chains || (Chains = {}));

var Networks;

(function (Networks) {
  Networks["Mainnet"] = "mainnet";
  Networks["Testnet"] = "testnet";
  Networks["Ropsten"] = "ropsten";
  Networks["ERC20"] = "erc20";
  Networks["BEP20"] = "bep20";
  Networks["XLM"] = "xlm";
})(Networks || (Networks = {}));

var similarChains = (_similarChains = {}, _similarChains[Chains.EthereumMainnet] = [Chains.BinanceBEP20], _similarChains[Chains.BinanceBEP20] = [Chains.EthereumMainnet], _similarChains);
var explorerLinkByChain = (_explorerLinkByChain = {}, _explorerLinkByChain[Chains.BitcoinMainnet] = function (txid) {
  return "https://blockchain.com/btc/tx/" + txid;
}, _explorerLinkByChain[Chains.BitcoinTestnet] = function (txid) {
  return "https://blockstream.info/testnet/tx/" + txid;
}, _explorerLinkByChain[Chains.EthereumMainnet] = function (txid) {
  return "https://etherscan.io/tx/" + txid;
}, _explorerLinkByChain[Chains.EthereumRopsten] = function (txid) {
  return "https://ropsten.etherscan.io/tx/" + txid;
}, _explorerLinkByChain[Chains.LitecoinMainnet] = function (txid) {
  return "https://blockchair.com/litecoin/transaction/" + txid;
}, _explorerLinkByChain[Chains.LitecoinTestnet] = function (txid) {
  return "https://blockexplorer.one/litecoin/testnet/blockHash/" + txid;
}, _explorerLinkByChain[Chains.BitcoinCashMainnet] = function (txid) {
  return "https://blockchair.com/bitcoin-cash/transaction/" + txid;
}, _explorerLinkByChain[Chains.BitcoinCashTestnet] = function (txid) {
  return "https://blockexplorer.one/bitcoin-cash/testnet/blockHash/" + txid;
}, _explorerLinkByChain[Chains.StellarMainnet] = function (txid) {
  return "https://blockchair.com/stellar/transaction/" + txid;
}, _explorerLinkByChain[Chains.StellarTestnet] = function (txid) {
  return "https://testnet.steexp.com/tx/" + txid;
}, _explorerLinkByChain[Chains.ProtonMainnet] = function (txid) {
  return "https://proton.bloks.io/transaction/" + txid;
}, _explorerLinkByChain[Chains.ProtonTestnet] = function (txid) {
  return "https://proton-test.bloks.io/transaction/" + txid;
}, _explorerLinkByChain[Chains.PolkadotMainnet] = function (txid) {
  return "https://polkadot.subscan.io/extrinsic/" + txid;
}, _explorerLinkByChain[Chains.BinanceBEP2] = function (txid) {
  return "https://binance.mintscan.io/txs/" + txid;
}, _explorerLinkByChain[Chains.BinanceBEP20] = function (txid) {
  return "https://bscscan.com/tx/" + txid;
}, _explorerLinkByChain[Chains.EosMainnet] = function (txid) {
  return "https://bloks.io/transaction/" + txid;
}, _explorerLinkByChain[Chains.EosTestnet] = function (txid) {
  return "https://jungle.bloks.io/transaction/" + txid;
}, _explorerLinkByChain[Chains.HederaMainnet] = function (txid) {
  return "https://app.dragonglass.me/transactions/" + txid;
}, _explorerLinkByChain[Chains.HederaTestnet] = function (txid) {
  return "https://testnet.dragonglass.me/transactions/" + txid;
}, _explorerLinkByChain[Chains.DogeMainnet] = function (txid) {
  return "https://blockchair.com/dogecoin/transaction/" + txid;
}, _explorerLinkByChain[Chains.CardanoMainnet] = function (txid) {
  return "https://explorer.cardano.org/en/transaction?id=" + txid;
}, _explorerLinkByChain[Chains.AvalancheXChain] = function (txid) {
  return "https://avascan.info/blockchain/x/tx/" + txid;
}, _explorerLinkByChain[Chains.AvalancheCChain] = function (txid) {
  return "https://snowtrace.io/tx/" + txid;
}, _explorerLinkByChain[Chains.PolygonMainnet] = function (txid) {
  return "https://polygonscan.com/tx/" + txid;
}, _explorerLinkByChain[Chains.TerraMainnet] = function (txid) {
  return "https://terra.stake.id/?#/tx/" + txid;
}, _explorerLinkByChain);
var initializeCoins = function initializeCoins(protonChain) {
  var IS_MAINNET = protonChain === 'proton';
  var IS_TESTNET = protonChain === 'proton-test';
  var coins = [{
    allowSwap: true,
    allowBridge: IS_MAINNET,
    allowLend: true,
    allowBorrow: true,
    name: 'Proton',
    coin: 'XPR',
    xtokenSymbol: 'XPR',
    xtokenPrecision: 4,
    xtokenContract: 'eosio.token',
    wallets: [].concat(IS_MAINNET ? [{
      wallet: 'XPR-ERC20',
      symbol: 'XPR',
      chain: Chains.EthereumMainnet,
      network: Networks.ERC20,
      precision: 4,
      contract: '0xD7EFB00D12C2C13131FD319336FDF952525DA2AF',
      hasWithdrawMemo: false
    }, {
      wallet: 'XPR-BEP20',
      symbol: 'XPR',
      chain: Chains.BinanceBEP20,
      network: Networks.BEP20,
      precision: 4,
      contract: '0x5DE3939B2F811A61D830E6F52D13B066881412AB',
      hasWithdrawMemo: false
    }] : []),
    image: 'https://www.protonchain.com/images/tokens/eosio-tokenXPR.png',
    coingeckoId: 'proton'
  }, {
    allowSwap: true,
    allowBridge: true,
    allowLend: true,
    allowBorrow: true,
    name: 'USD Coin',
    coin: 'USDC',
    xtokenSymbol: 'XUSDC',
    xtokenPrecision: 6,
    xtokenContract: 'xtokens',
    wallets: [].concat(IS_MAINNET ? [{
      wallet: 'USDC',
      symbol: 'USDC',
      chain: Chains.EthereumMainnet,
      network: Networks.ERC20,
      precision: 6,
      contract: '0xA0B86991C6218B36C1D19D4A2E9EB0CE3606EB48',
      hasWithdrawMemo: false
    }, {
      wallet: 'USDC-BEP20',
      symbol: 'USDC',
      chain: Chains.BinanceBEP20,
      network: Networks.BEP20,
      precision: 18,
      contract: '0x8AC76A51CC950D9822D68B83FE1AD97B32CD580D',
      hasWithdrawMemo: false
    }, {
      wallet: 'USDC-XLM',
      symbol: 'USDC',
      chain: Chains.StellarMainnet,
      network: Networks.XLM,
      precision: 7,
      contract: undefined,
      hasWithdrawMemo: true
    }] : [], IS_TESTNET ? [{
      wallet: 'USDC',
      symbol: 'USDC',
      chain: Chains.EthereumRopsten,
      network: Networks.Ropsten,
      precision: 6,
      contract: '0xA0B86991C6218B36C1D19D4A2E9EB0CE3606EB48',
      hasWithdrawMemo: false
    }] : []),
    image: 'https://www.protonchain.com/images/tokens/xtokensXUSDC.png',
    coingeckoId: 'usd-coin'
  }, {
    allowSwap: true,
    allowBridge: IS_MAINNET,
    allowLend: true,
    allowBorrow: true,
    name: 'Metal',
    coin: 'MTL',
    xtokenSymbol: 'XMT',
    xtokenPrecision: 8,
    xtokenContract: 'xtokens',
    wallets: [].concat(IS_MAINNET ? [{
      wallet: 'MTL',
      symbol: 'MTL',
      chain: Chains.EthereumMainnet,
      network: Networks.ERC20,
      precision: 8,
      contract: '0xF433089366899D83A9F26A773D59EC7ECF30355E',
      hasWithdrawMemo: false
    }] : []),
    image: 'https://www.protonchain.com/images/tokens/xtokensXMT.png',
    coingeckoId: 'metal'
  }, {
    allowSwap: true,
    allowBridge: true,
    allowLend: true,
    allowBorrow: true,
    name: 'Bitcoin',
    coin: 'BTC',
    xtokenSymbol: 'XBTC',
    xtokenPrecision: 8,
    xtokenContract: 'xtokens',
    wallets: [].concat(IS_MAINNET ? [{
      wallet: 'BTC',
      symbol: 'BTC',
      chain: Chains.BitcoinMainnet,
      network: Networks.Mainnet,
      precision: 8,
      contract: undefined,
      hasWithdrawMemo: false
    }] : [], IS_TESTNET ? [{
      wallet: 'BTC',
      symbol: 'BTC',
      chain: Chains.BitcoinTestnet,
      network: Networks.Testnet,
      precision: 8,
      contract: undefined,
      hasWithdrawMemo: false
    }] : []),
    image: 'https://www.protonchain.com/images/tokens/xtokensXBTC.png',
    coingeckoId: 'bitcoin'
  }, {
    allowSwap: true,
    allowBridge: true,
    allowLend: true,
    allowBorrow: true,
    name: 'Ethereum',
    coin: 'ETH',
    xtokenSymbol: 'XETH',
    xtokenPrecision: 8,
    xtokenContract: 'xtokens',
    wallets: [].concat(IS_MAINNET ? [{
      wallet: 'ETH',
      symbol: 'ETH',
      chain: Chains.EthereumMainnet,
      network: Networks.Mainnet,
      precision: 18,
      contract: '0x0000000000000000000000000000000000000000',
      hasWithdrawMemo: false
    }] : [], IS_TESTNET ? [{
      wallet: 'ETH',
      symbol: 'ETH',
      chain: Chains.EthereumRopsten,
      network: Networks.Ropsten,
      precision: 18,
      contract: '0x0000000000000000000000000000000000000000',
      hasWithdrawMemo: false
    }] : []),
    image: 'https://www.protonchain.com/images/tokens/xtokensXETH.png',
    coingeckoId: 'ethereum'
  }, {
    allowSwap: true,
    allowBridge: false,
    allowLend: false,
    allowBorrow: false,
    name: 'Loan',
    coin: 'LOAN',
    xtokenSymbol: 'LOAN',
    xtokenPrecision: 4,
    xtokenContract: 'loan.token',
    wallets: [],
    image: 'https://www.protonchain.com/images/tokens/loan.tokenLOAN.png',
    coingeckoId: 'proton-loan'
  }, {
    allowSwap: IS_MAINNET,
    allowBridge: true,
    allowLend: false,
    allowBorrow: false,
    name: 'Tether',
    coin: 'USDT',
    xtokenSymbol: 'XUSDT',
    xtokenPrecision: 6,
    xtokenContract: 'xtokens',
    wallets: [].concat(IS_MAINNET ? [{
      wallet: 'USDT',
      symbol: 'USDT',
      chain: Chains.EthereumMainnet,
      network: Networks.ERC20,
      precision: 6,
      contract: '0xDAC17F958D2EE523A2206206994597C13D831EC7',
      hasWithdrawMemo: false
    }] : [], IS_TESTNET ? [{
      wallet: 'USDT',
      symbol: 'USDT',
      chain: Chains.EthereumRopsten,
      network: Networks.Ropsten,
      precision: 6,
      contract: '0xDAC17F958D2EE523A2206206994597C13D831EC7',
      hasWithdrawMemo: false
    }] : []),
    image: 'https://www.protonchain.com/images/tokens/xtokensXUSDT.png',
    coingeckoId: 'tether'
  }, {
    allowSwap: false,
    allowBridge: IS_MAINNET,
    allowLend: false,
    allowBorrow: false,
    name: 'TrueUSD',
    coin: 'TUSD',
    xtokenSymbol: 'XTUSD',
    xtokenPrecision: 6,
    xtokenContract: 'xtokens',
    wallets: [].concat(IS_MAINNET ? [{
      wallet: 'TUSD',
      symbol: 'TUSD',
      chain: Chains.EthereumMainnet,
      network: Networks.ERC20,
      precision: 18,
      contract: '0x0000000000085D4780B73119B644AE5ECD22B376',
      hasWithdrawMemo: false
    }] : []),
    image: 'https://www.protonchain.com/images/tokens/xtokensXTUSD.png',
    coingeckoId: 'true-usd'
  }, {
    allowSwap: false,
    allowBridge: IS_MAINNET,
    allowLend: false,
    allowBorrow: false,
    name: 'Paxos Standard',
    coin: 'PAX',
    xtokenSymbol: 'XPAX',
    xtokenPrecision: 6,
    xtokenContract: 'xtokens',
    wallets: [].concat(IS_MAINNET ? [{
      wallet: 'PAX',
      symbol: 'PAX',
      chain: Chains.EthereumMainnet,
      network: Networks.ERC20,
      precision: 18,
      contract: '0x8E870D67F660D95D5BE530380D0EC0BD388289E1',
      hasWithdrawMemo: false
    }] : []),
    image: 'https://www.protonchain.com/images/tokens/xtokensXPAX.png',
    coingeckoId: 'usdp'
  }, {
    allowSwap: false,
    allowBridge: true,
    allowLend: false,
    allowBorrow: false,
    name: 'Paxos Gold',
    coin: 'PAXG',
    xtokenSymbol: 'XPAXG',
    xtokenPrecision: 8,
    xtokenContract: 'xtokens',
    wallets: [].concat(IS_MAINNET ? [{
      wallet: 'PAXG',
      symbol: 'PAXG',
      chain: Chains.EthereumMainnet,
      network: Networks.ERC20,
      precision: 18,
      contract: '0x45804880DE22913DAFE09F4980848ECE6ECBAF78',
      hasWithdrawMemo: false
    }] : [], IS_TESTNET ? [{
      wallet: 'PAXG',
      symbol: 'PAXG',
      chain: Chains.EthereumRopsten,
      network: Networks.Ropsten,
      precision: 18,
      contract: '0x45804880DE22913DAFE09F4980848ECE6ECBAF78',
      hasWithdrawMemo: false
    }] : []),
    image: 'https://www.protonchain.com/images/tokens/xtokensXPAXG.png',
    coingeckoId: 'pax-gold'
  }, {
    allowSwap: IS_MAINNET,
    allowBridge: true,
    allowLend: false,
    allowBorrow: false,
    name: 'Uniswap',
    coin: 'UNI',
    xtokenSymbol: 'XUNI',
    xtokenPrecision: 6,
    xtokenContract: 'xtokens',
    wallets: [].concat(IS_MAINNET ? [{
      wallet: 'UNI',
      symbol: 'UNI',
      chain: Chains.EthereumMainnet,
      network: Networks.ERC20,
      precision: 18,
      contract: '0x1F9840A85D5AF5BF1D1762F925BDADDC4201F984',
      hasWithdrawMemo: false
    }] : [], IS_TESTNET ? [{
      wallet: 'UNI',
      symbol: 'UNI',
      chain: Chains.EthereumRopsten,
      network: Networks.Ropsten,
      precision: 18,
      contract: '0x1F9840A85D5AF5BF1D1762F925BDADDC4201F984',
      hasWithdrawMemo: false
    }] : []),
    image: 'https://www.protonchain.com/images/tokens/xtokensXUNI.png',
    coingeckoId: 'uniswap'
  }, {
    allowSwap: false,
    allowBridge: false,
    allowLend: false,
    allowBorrow: false,
    name: '1INCH',
    coin: '1INCH',
    xtokenSymbol: 'XINCH',
    xtokenPrecision: 6,
    xtokenContract: 'xtokens',
    wallets: [].concat(IS_MAINNET ? [{
      wallet: '1INCH',
      symbol: '1INCH',
      chain: Chains.EthereumMainnet,
      network: Networks.ERC20,
      precision: 18,
      contract: '0x111111111117DC0AA78B770FA6A738034120C302',
      hasWithdrawMemo: false
    }] : []),
    image: 'https://www.protonchain.com/images/tokens/xtokensXINCH.png',
    coingeckoId: '1inch'
  }, {
    allowSwap: false,
    allowBridge: false,
    allowLend: false,
    allowBorrow: false,
    name: 'Chainlink',
    coin: 'LINK',
    xtokenSymbol: 'XLINK',
    xtokenPrecision: 6,
    xtokenContract: 'xtokens',
    wallets: [].concat(IS_MAINNET ? [{
      wallet: 'LINK',
      symbol: 'LINK',
      chain: Chains.EthereumMainnet,
      network: Networks.ERC20,
      precision: 18,
      contract: '0x514910771AF9CA656AF840DFF83E8264ECF986CA',
      hasWithdrawMemo: false
    }] : []),
    image: 'https://www.protonchain.com/images/tokens/xtokensXLINK.png',
    coingeckoId: 'chainlink'
  }, {
    allowSwap: IS_MAINNET,
    allowBridge: true,
    allowLend: false,
    allowBorrow: false,
    name: 'Litecoin',
    coin: 'LTC',
    xtokenSymbol: 'XLTC',
    xtokenPrecision: 8,
    xtokenContract: 'xtokens',
    wallets: [].concat(IS_MAINNET ? [{
      wallet: 'LTC',
      symbol: 'LTC',
      chain: Chains.LitecoinMainnet,
      network: Networks.Mainnet,
      precision: 8,
      contract: undefined,
      hasWithdrawMemo: false
    }] : [], IS_TESTNET ? [{
      wallet: 'LTC',
      symbol: 'LTC',
      chain: Chains.LitecoinTestnet,
      network: Networks.Testnet,
      precision: 8,
      contract: undefined,
      hasWithdrawMemo: false
    }] : []),
    image: 'https://www.protonchain.com/images/tokens/xtokensXLTC.png',
    coingeckoId: 'litecoin'
  }, {
    allowSwap: IS_MAINNET,
    allowBridge: true,
    allowLend: false,
    allowBorrow: false,
    name: 'Bitcoin Cash',
    coin: 'BCH',
    xtokenSymbol: 'XBCH',
    xtokenPrecision: 8,
    xtokenContract: 'xtokens',
    wallets: [].concat(IS_MAINNET ? [{
      wallet: 'BCH',
      symbol: 'BCH',
      chain: Chains.BitcoinCashMainnet,
      network: Networks.Mainnet,
      precision: 8,
      contract: undefined,
      hasWithdrawMemo: false
    }] : [], IS_TESTNET ? [{
      wallet: 'BCH',
      symbol: 'BCH',
      chain: Chains.BitcoinCashTestnet,
      network: Networks.Testnet,
      precision: 8,
      contract: undefined,
      hasWithdrawMemo: false
    }] : []),
    image: 'https://www.protonchain.com/images/tokens/xtokensXBCH.png',
    coingeckoId: 'bitcoin-cash'
  }, {
    allowSwap: false,
    allowBridge: false,
    allowLend: false,
    allowBorrow: false,
    name: 'Stellar',
    coin: 'XLM',
    xtokenSymbol: 'XXLM',
    xtokenPrecision: 6,
    xtokenContract: 'xtokens',
    wallets: [].concat(IS_MAINNET ? [{
      wallet: 'XLM',
      symbol: 'XLM',
      chain: Chains.StellarMainnet,
      network: Networks.Mainnet,
      precision: 7,
      contract: undefined,
      hasWithdrawMemo: true
    }] : [], IS_TESTNET ? [{
      wallet: 'XLM',
      symbol: 'XLM',
      chain: Chains.StellarTestnet,
      network: Networks.Testnet,
      precision: 7,
      contract: undefined,
      hasWithdrawMemo: true
    }] : []),
    image: 'https://www.protonchain.com/images/tokens/xtokensXXLM.png',
    coingeckoId: 'stellar'
  }, {
    allowSwap: IS_MAINNET,
    allowBridge: false,
    allowLend: false,
    allowBorrow: false,
    name: 'Sense',
    coin: 'SENSE',
    xtokenSymbol: 'XSENSE',
    xtokenPrecision: 4,
    xtokenContract: 'sense',
    wallets: [],
    image: 'https://www.protonchain.com/images/tokens/senseXSENSE.png',
    coingeckoId: 'sense'
  }, {
    allowSwap: false,
    allowBridge: false,
    allowLend: false,
    allowBorrow: false,
    name: 'Polkadot',
    coin: 'DOT',
    xtokenSymbol: 'XDOT',
    xtokenPrecision: 8,
    xtokenContract: 'xtokens',
    wallets: [].concat(IS_MAINNET ? [{
      wallet: 'DOT',
      symbol: 'DOT',
      chain: Chains.PolkadotMainnet,
      network: Networks.Mainnet,
      precision: 10,
      contract: undefined,
      hasWithdrawMemo: false
    }] : []),
    image: 'https://www.protonchain.com/images/tokens/xtokensXDOT.png',
    coingeckoId: 'polkadot'
  }, {
    allowSwap: true,
    allowBridge: IS_MAINNET,
    allowLend: false,
    allowBorrow: false,
    name: 'Binance Coin',
    coin: 'BNB',
    xtokenSymbol: 'XBNB',
    xtokenPrecision: 8,
    xtokenContract: 'xtokens',
    wallets: [].concat(IS_MAINNET ? [{
      wallet: 'BNB',
      symbol: 'BNB',
      chain: Chains.BinanceBEP20,
      network: Networks.BEP20,
      precision: 18,
      contract: undefined,
      hasWithdrawMemo: false
    }] : []),
    image: 'https://www.protonchain.com/images/tokens/xtokensXBNB.png',
    coingeckoId: 'binancecoin'
  }, {
    allowSwap: true,
    allowBridge: true,
    allowLend: false,
    allowBorrow: false,
    name: 'EOS',
    coin: 'EOS',
    xtokenSymbol: 'XEOS',
    xtokenPrecision: 4,
    xtokenContract: 'xtokens',
    wallets: [].concat(IS_MAINNET ? [{
      wallet: 'EOS',
      symbol: 'EOS',
      chain: Chains.EosMainnet,
      network: Networks.Mainnet,
      precision: 4,
      contract: undefined,
      hasWithdrawMemo: true
    }] : [], IS_TESTNET ? [{
      wallet: 'EOS',
      symbol: 'EOS',
      chain: Chains.EosTestnet,
      network: Networks.Testnet,
      precision: 4,
      contract: undefined,
      hasWithdrawMemo: true
    }] : []),
    image: 'https://www.protonchain.com/images/tokens/xtokensXEOS.png',
    coingeckoId: 'eos'
  }, {
    allowSwap: IS_MAINNET,
    allowBridge: IS_MAINNET,
    allowLend: true,
    allowBorrow: true,
    name: 'Dogecoin',
    coin: 'DOGE',
    xtokenSymbol: 'XDOGE',
    xtokenPrecision: 6,
    xtokenContract: 'xtokens',
    wallets: [].concat(IS_MAINNET ? [{
      wallet: 'DOGE',
      symbol: 'DOGE',
      chain: Chains.DogeMainnet,
      network: Networks.Mainnet,
      precision: 8,
      contract: undefined,
      hasWithdrawMemo: false
    }] : []),
    image: 'https://www.protonchain.com/images/tokens/xtokensXDOGE.png',
    coingeckoId: 'dogecoin'
  }, {
    allowSwap: IS_MAINNET,
    allowBridge: IS_MAINNET,
    allowLend: false,
    allowBorrow: false,
    name: 'Cardano',
    coin: 'ADA',
    xtokenSymbol: 'XADA',
    xtokenPrecision: 6,
    xtokenContract: 'xtokens',
    wallets: [].concat(IS_MAINNET ? [{
      wallet: 'ADA',
      symbol: 'ADA',
      chain: Chains.CardanoMainnet,
      network: Networks.Mainnet,
      precision: 6,
      contract: undefined,
      hasWithdrawMemo: false
    }] : []),
    image: 'https://www.protonchain.com/images/tokens/xtokensXADA.png',
    coingeckoId: 'cardano'
  }, {
    allowSwap: false,
    allowBridge: false,
    allowLend: false,
    allowBorrow: false,
    name: 'Avalanche',
    coin: 'AVAX',
    xtokenSymbol: 'XAVAX',
    xtokenPrecision: 9,
    xtokenContract: 'xtokens',
    wallets: [].concat(IS_MAINNET ? [{
      wallet: 'AVAX',
      symbol: 'AVAX',
      chain: Chains.AvalancheXChain,
      network: Networks.Mainnet,
      precision: 9,
      contract: undefined,
      hasWithdrawMemo: false
    }, {
      wallet: 'AVAX',
      symbol: 'AVAX',
      chain: Chains.AvalancheCChain,
      network: Networks.Mainnet,
      precision: 9,
      contract: undefined,
      hasWithdrawMemo: false
    }] : []),
    image: 'https://www.protonchain.com/images/tokens/xtokensXAVAX.png',
    coingeckoId: 'avalanche-2'
  }, {
    allowSwap: false,
    allowBridge: false,
    allowLend: false,
    allowBorrow: false,
    name: 'Polygon',
    coin: 'MATIC',
    xtokenSymbol: 'XMATIC',
    xtokenPrecision: 8,
    xtokenContract: 'xtokens',
    wallets: [].concat(IS_MAINNET ? [{
      wallet: 'MATIC',
      symbol: 'MATIC',
      chain: Chains.PolygonMainnet,
      network: Networks.Mainnet,
      precision: 18,
      contract: '0x0000000000000000000000000000000000000000',
      hasWithdrawMemo: false
    }] : []),
    image: 'https://www.protonchain.com/images/tokens/xtokensXMATIC.png',
    coingeckoId: 'matic-network'
  }, {
    allowSwap: false,
    allowBridge: false,
    allowLend: false,
    allowBorrow: false,
    name: 'Luna',
    coin: 'LUNA',
    xtokenSymbol: 'XLUNA',
    xtokenPrecision: 6,
    xtokenContract: 'xtokens',
    wallets: [].concat(IS_MAINNET ? [{
      wallet: 'LUNA',
      symbol: 'LUNA',
      chain: Chains.TerraMainnet,
      network: Networks.Mainnet,
      precision: 6,
      contract: undefined,
      hasWithdrawMemo: true
    }] : []),
    image: 'https://www.protonchain.com/images/tokens/xtokensXLUNA.png',
    coingeckoId: 'terra-luna'
  }, {
    allowSwap: false,
    allowBridge: false,
    allowLend: false,
    allowBorrow: false,
    name: 'TerraUSD',
    coin: 'UST',
    xtokenSymbol: 'XUST',
    xtokenPrecision: 6,
    xtokenContract: 'xtokens',
    wallets: [].concat(IS_MAINNET ? [{
      wallet: 'UST',
      symbol: 'UST',
      chain: Chains.TerraMainnet,
      network: Networks.Mainnet,
      precision: 6,
      contract: undefined,
      hasWithdrawMemo: true
    }] : []),
    image: 'https://www.protonchain.com/images/tokens/xtokensXUST.png',
    coingeckoId: 'terrausd'
  }, {
    allowSwap: false,
    allowBridge: IS_TESTNET,
    allowLend: false,
    allowBorrow: false,
    name: 'HBAR',
    coin: 'HBAR',
    xtokenSymbol: 'XHBAR',
    xtokenPrecision: 6,
    xtokenContract: 'xtokens',
    wallets: [].concat(IS_TESTNET ? [{
      wallet: 'HBAR',
      symbol: 'HBAR',
      chain: Chains.HederaTestnet,
      network: Networks.Testnet,
      precision: 8,
      contract: undefined,
      hasWithdrawMemo: true
    }] : []),
    image: 'https://www.protonchain.com/images/tokens/xtokensXHBAR.png',
    coingeckoId: 'hedera-hashgraph'
  }]; // Validation

  var walletWithDuplicateChains = coins.find(function (coin) {
    var chains = coin.wallets.map(function (wallet) {
      return wallet.chain;
    });
    return new Set(chains).size !== chains.length;
  });

  if (walletWithDuplicateChains) {
    throw new Error("Coin " + walletWithDuplicateChains.coin + " has duplicate chains in wallet");
  }

  return {
    allCoins: coins,
    swapCoins: coins.filter(function (coin) {
      return coin.allowSwap;
    }),
    bridgeCoins: coins.filter(function (coin) {
      return coin.allowBridge;
    }),
    lendCoins: coins.filter(function (coin) {
      return coin.allowLend;
    }),
    borrowCoins: coins.filter(function (coin) {
      return coin.allowBorrow;
    }),
    loanCoins: coins.filter(function (coin) {
      return coin.allowLend || coin.allowBorrow;
    }),
    allEnabledCoins: coins.filter(function (coin) {
      return coin.allowSwap || coin.allowBridge;
    })
  };
};

var accountParser = /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)().regex(/^[.1-5a-z]{0,12}[.1-5a-j]?$/);
var authorizationParser = /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.object)({
  actor: accountParser,
  permission: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)()
});
var authorizationsParser = /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.array)(authorizationParser).min(1);
var ExtendedAssetParser = /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.object)({
  quantity: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)(),
  contract: accountParser
});

var rawTransactionParser = /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.object)({
  expiration: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)(),
  ref_block_num: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.number)(),
  ref_block_prefix: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.number)(),
  max_net_usage_words: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.number)(),
  max_cpu_usage_ms: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.number)(),
  delay_sec: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.number)(),
  context_free_actions: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.array)( /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.any)()),
  transaction_extensions: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.array)( /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.any)())
});
var baseActionParser = function baseActionParser(contract, action, data) {
  return (0,zod__WEBPACK_IMPORTED_MODULE_0__.object)({
    account: contract === '*' ? accountParser : (0,zod__WEBPACK_IMPORTED_MODULE_0__.literal)(contract),
    name: (0,zod__WEBPACK_IMPORTED_MODULE_0__.literal)(action),
    data: (0,zod__WEBPACK_IMPORTED_MODULE_0__.object)(data),
    authorization: authorizationsParser
  });
};
var baseActionSerializedParser = function baseActionSerializedParser(contract, action, data) {
  return (0,zod__WEBPACK_IMPORTED_MODULE_0__.object)({
    account: contract === '*' ? accountParser : (0,zod__WEBPACK_IMPORTED_MODULE_0__.literal)(contract),
    name: (0,zod__WEBPACK_IMPORTED_MODULE_0__.literal)(action),
    data: (0,zod__WEBPACK_IMPORTED_MODULE_0__.string)().or((0,zod__WEBPACK_IMPORTED_MODULE_0__.object)(data)),
    authorization: authorizationsParser
  });
};
var webauthActionParser = function webauthActionParser(contract, action, data) {
  return (0,zod__WEBPACK_IMPORTED_MODULE_0__.object)({
    account: (0,zod__WEBPACK_IMPORTED_MODULE_0__.literal)('webauthn'),
    name: (0,zod__WEBPACK_IMPORTED_MODULE_0__.literal)('exec'),
    data: (0,zod__WEBPACK_IMPORTED_MODULE_0__.object)({
      account: accountParser,
      key: (0,zod__WEBPACK_IMPORTED_MODULE_0__.object)({
        key: (0,zod__WEBPACK_IMPORTED_MODULE_0__.array)((0,zod__WEBPACK_IMPORTED_MODULE_0__.string)().or((0,zod__WEBPACK_IMPORTED_MODULE_0__.object)({
          modulus: (0,zod__WEBPACK_IMPORTED_MODULE_0__.string)(),
          exponent: (0,zod__WEBPACK_IMPORTED_MODULE_0__.string)()
        }))),
        user_presence: (0,zod__WEBPACK_IMPORTED_MODULE_0__.number)(),
        rpid: (0,zod__WEBPACK_IMPORTED_MODULE_0__.string)()
      }),
      nonce: (0,zod__WEBPACK_IMPORTED_MODULE_0__.number)(),
      permissions: authorizationsParser,
      signature: (0,zod__WEBPACK_IMPORTED_MODULE_0__.object)({
        auth_data: (0,zod__WEBPACK_IMPORTED_MODULE_0__.string)(),
        client_json: (0,zod__WEBPACK_IMPORTED_MODULE_0__.string)(),
        signature: (0,zod__WEBPACK_IMPORTED_MODULE_0__.string)()
      }),
      trx: rawTransactionParser.merge((0,zod__WEBPACK_IMPORTED_MODULE_0__.object)({
        actions: (0,zod__WEBPACK_IMPORTED_MODULE_0__.array)(baseActionSerializedParser(contract, action, data)).length(1)
      }))
    }),
    authorization: authorizationsParser
  });
};
var singleActionTransactionParser = function singleActionTransactionParser(contract, action, data) {
  var baseAction = baseActionParser(contract, action, data);
  var webauthAction = webauthActionParser(contract, action, data);
  return rawTransactionParser.merge((0,zod__WEBPACK_IMPORTED_MODULE_0__.object)({
    actions: (0,zod__WEBPACK_IMPORTED_MODULE_0__.array)(baseAction.or(webauthAction)).length(1)
  }));
};

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var WRAP_CONTRACT = 'proton.wrap';
var WRAP_AUTH_ACTION = 'generateauth';
var initializeConstants = function initializeConstants(chain) {
  var _initializeCoins = initializeCoins(chain),
      swapCoins = _initializeCoins.swapCoins,
      bridgeCoins = _initializeCoins.bridgeCoins,
      allEnabledCoins = _initializeCoins.allEnabledCoins,
      allCoins = _initializeCoins.allCoins,
      lendCoins = _initializeCoins.lendCoins,
      borrowCoins = _initializeCoins.borrowCoins,
      loanCoins = _initializeCoins.loanCoins;

  var constants = {
    SWAP_CONTRACT: 'proton.swaps',
    FEE_FACTOR: 10000,
    GOOGLE_MAPS_KEY: 'AIzaSyDb2_CrK032kSIqBXbkdwmaLKWELl0SxVs',
    SWAP_URL: chain === 'proton' ? 'https://otc.protonswap.com' : 'https://otc-test.protonswap.com',
    WRAP_SERVER_URL: chain === 'proton' ? 'https://www.api.bloks.io/proton-wrap-public2' : 'https://www.api.bloks.io/proton-wrap-testnet-public2',
    WRAP_CONTRACT: WRAP_CONTRACT,
    WRAP_ACTIONS: {
      SAVE_ADDRESS: 'saveaddress2',
      DELETE_ADDRESS: 'deladdress2',
      WRAP_START: 'wrapstart2',
      WRAP_FINISH: 'wrapfinish2',
      WRAP_PROCESS: 'wrapprocess2',
      WRAP_SET_CONF: 'wrapsetconf2'
    },
    WRAP_TABLES: {
      ADDRESSES: 'addresses2',
      WRAPS: 'wraps2'
    },
    ADDRESSES_INDEXES: {
      BY_ACCOUNT: 2,
      BY_ADDR_HASH: 3
    },
    WRAPS_INDEXES: {
      BY_ACCOUNT: 2,
      BY_STATUS: 3,
      BY_WRAP_HASH: 4
    },
    WRAP_PROCESS_TIMER: 5000,
    FARM_CONTRACT: 'yield.farms',
    WEBHOOK_PERMISSION: 'webhook',
    PUBLIC_PERMISSION: 'public',
    LIGHT_PERMISSION: 'light',
    WRAP_AUTH_ACTION: WRAP_AUTH_ACTION,
    METAL_ENDPOINT: chain === 'proton' ? 'https://cirrus.metalpay.com' : 'https://cirrus-dev.metalpay.com',
    METAL_PROTON_ENDPOINT: chain === 'proton' ? 'https://api.protonchain.com' : 'https://api-dev.protonchain.com',
    PROTON_ENDPOINTS: chain === 'proton' ? ['https://proton.greymass.com', 'https://proton.eoscafeblock.com', 'https://proton.cryptolions.io', 'https://proton.eosusa.news'] : ['https://testnet.protonchain.com'],
    CHAIN_ID: chain === 'proton' ? '384da888112027f0321850a169f737c33e53b388aad48b5adace4bab97f437e0' : '71ee83bcf52142d61019d95f9cc5427ba6a0d7ff8accd9e2088ae2abeaf3d3dd',
    CHAIN: chain,
    SWAP_COINS: swapCoins,
    BRIDGE_COINS: bridgeCoins,
    ALL_ENABLED_COINS: allEnabledCoins,
    LEND_COINS: lendCoins,
    BORROW_COINS: borrowCoins,
    LOAN_COINS: loanCoins,
    ALL_COINS: allCoins,
    findBridgeCoinWalletByXtokenAndChain: function findBridgeCoinWalletByXtokenAndChain(xtokenSymbol, chain) {
      var bridgeCoin = constants.BRIDGE_COINS.find(function (bridgeCoin) {
        return bridgeCoin.xtokenSymbol === xtokenSymbol;
      });
      if (!bridgeCoin) return undefined;
      var bridgeWallet = bridgeCoin.wallets.find(function (bridgeWallet) {
        return bridgeWallet.chain === chain;
      });
      if (!bridgeWallet) return undefined;
      return _extends({}, bridgeCoin, bridgeWallet);
    },
    findBridgeCoinWallet: function findBridgeCoinWallet(coin, wallet) {
      var bridgeCoin = constants.BRIDGE_COINS.find(function (bridgeCoin) {
        return bridgeCoin.coin === coin;
      });
      if (!bridgeCoin) return undefined;
      var bridgeWallet = bridgeCoin.wallets.find(function (bridgeWallet) {
        return bridgeWallet.wallet === wallet;
      });
      if (!bridgeWallet) return undefined;
      return _extends({}, bridgeCoin, bridgeWallet);
    },
    findBridgeCoinNetwork: function findBridgeCoinNetwork(coin, network) {
      var bridgeCoin = constants.BRIDGE_COINS.find(function (bridgeCoin) {
        return bridgeCoin.coin === coin;
      });
      if (!bridgeCoin) return undefined;
      var bridgeWallet = bridgeCoin.wallets.find(function (bridgeWallet) {
        return bridgeWallet.network === network;
      });
      if (!bridgeWallet) return undefined;
      return _extends({}, bridgeCoin, bridgeWallet);
    }
  };
  return constants;
};

var createAbstractAuthParser = function createAbstractAuthParser(contract, action, data) {
  return (0,zod__WEBPACK_IMPORTED_MODULE_0__.object)({
    signer: authorizationParser,
    signatures: (0,zod__WEBPACK_IMPORTED_MODULE_0__.array)((0,zod__WEBPACK_IMPORTED_MODULE_0__.string)()).length(1),
    transaction: singleActionTransactionParser(contract, action, data)
  });
};
var generateAuthData = {
  time: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)(),
  protonAccount: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)()
};
var generateAuthParser = /*#__PURE__*/createAbstractAuthParser(WRAP_CONTRACT, WRAP_AUTH_ACTION, generateAuthData);

var addressParser = /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.object)({
  index: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.number)(),
  account: accountParser,
  chain: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)(),
  address: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)(),
  address_hash: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)()
});
var generateAddressBodyParser = /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.object)({
  coin: (0,zod__WEBPACK_IMPORTED_MODULE_0__.string)(),
  wallet: (0,zod__WEBPACK_IMPORTED_MODULE_0__.string)()
}).merge(generateAuthParser);
var generateAddressResponse = /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.object)({
  id: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)(),
  address: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)(),
  coin: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)(),
  wallet: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)(),
  memo: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)().optional()
});

var rateParser = /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.object)({
  counterCurrency: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)(),
  price: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.number)(),
  priceChangePercent: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.number)(),
  marketCap: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.number)(),
  volume: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.number)(),
  timestamp: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.number)()
});
var exchangeRateParser = /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.object)({
  contract: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)(),
  symbol: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)(),
  rank: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.number)(),
  rates: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.array)(rateParser)
});
var exchangeRatesParser = /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.array)(exchangeRateParser);

var Type;

(function (Type) {
  Type["RECEIVE"] = "receive";
  Type["SEND"] = "send";
})(Type || (Type = {}));

var depositBodyParser = /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.object)({
  id: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)(),
  type: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.nativeEnum)(Type),
  hash: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)(),
  coin: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)(),
  wallet: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)()
});
var transactionParser = /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.object)({
  id: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)(),
  wallet: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)(),
  value: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.number)(),
  valueString: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)(),
  address: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)(),
  type: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.nativeEnum)(Type),
  state: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)(),
  confirmations: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.number)(),
  hash: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)(),
  blockHash: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)().optional().nullable(),
  blockHeight: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.number)().optional().nullable()
});

var otcOrderResponseParser = /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.object)({
  success: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.boolean)(),
  transaction_id: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)(),
  errormsg: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)().optional()
});
var otcQuoteBodyParser = /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.object)({
  baseAmount: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.number)(),
  baseSymbol: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)(),
  quoteSymbol: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)()
});
var otcQuoteResponseParser = /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.object)({
  success: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.boolean)(),
  token: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)(),
  qty: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.number)(),
  errormsg: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)().optional()
});

var withdrawData = {
  from: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)().refine(function (val) {
    return val !== WRAP_CONTRACT;
  }, {
    message: WRAP_CONTRACT + " must be receiver"
  }),
  to: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.literal)(WRAP_CONTRACT),
  quantity: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)(),
  memo: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)()
};
var withdrawBodyParser = /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.object)({
  signer: authorizationParser,
  signatures: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.array)((0,zod__WEBPACK_IMPORTED_MODULE_0__.string)()).length(1),
  transaction: /*#__PURE__*/singleActionTransactionParser('*', 'transfer', withdrawData),
  quoteId: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)(),
  provider: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)().optional()
});
var withdrawMetalResponseParser = /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.object)({
  success: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.boolean)(),
  id: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)()
});
var withdrawalFeeQuoteParser = /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.object)({
  quoteId: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)(),
  estimatedFee: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)(),
  currency: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)(),
  network: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)()
});

var withdrawHistoryMetalSwapParser = /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.object)({
  id: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)(),
  status: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)(),
  amount: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)(),
  currency: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)(),
  network: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)(),
  created: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)(),
  withdrawalAddress: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)(),
  withdrawalHash: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)().optional()
});
var withdrawHistoryMetalResponseParser = /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.object)({
  swaps: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.array)(withdrawHistoryMetalSwapParser),
  page: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.number)(),
  pageSize: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.number)(),
  numberOfElements: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.number)(),
  totalPages: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.number)(),
  totalElements: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.number)()
});

var Status;

(function (Status) {
  Status["PENDING"] = "pending";
  Status["SUCCESS"] = "success";
  Status["FAIL"] = "fail";
  Status["PROCESSING"] = "processing";
})(Status || (Status = {}));

var wrapStartParser = /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.object)({
  balance: ExtendedAssetParser,
  id: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)(),
  txid: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)(),
  chain: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)(),
  deposit_address: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)(),
  confirmations: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.number)()
});
var wrapSetConfParser = /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.object)({
  wrap_hash: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)(),
  confirmations: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.number)()
});
var wrapParser = /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.object)({
  index: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.number)(),
  proton_account: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)(),
  balance: ExtendedAssetParser,
  id: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)(),
  txid: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)(),
  chain: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)(),
  deposit_address: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)(),
  status: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.nativeEnum)(Status),
  finish_txid: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)(),
  wrap_hash: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.string)(),
  confirmations: /*#__PURE__*/(0,zod__WEBPACK_IMPORTED_MODULE_0__.number)()
});

var isSameToken = function isSameToken(token1, token2) {
  return token1.xtokenSymbol === token2.xtokenSymbol && token1.xtokenPrecision === token2.xtokenPrecision && token1.xtokenContract === token2.xtokenContract;
};


//# sourceMappingURL=wrap-constants.esm.js.map


/***/ }),

/***/ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/ZodError.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/ZodError.js ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var util_1 = __webpack_require__(/*! ./helpers/util */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/helpers/util.js");
exports.ZodErrorCode = util_1.util.arrayToEnum([
    'invalid_type',
    'nonempty_array_is_empty',
    'custom_error',
    'invalid_union',
    'invalid_literal_value',
    'invalid_enum_value',
    'unrecognized_keys',
    'invalid_arguments',
    'invalid_return_type',
    'invalid_date',
    'invalid_string',
    'too_small',
    'too_big',
]);
exports.quotelessJson = function (obj) {
    var json = JSON.stringify(obj, null, 2); // {"name":"John Smith"}
    return json.replace(/"([^"]+)":/g, '$1:');
};
var ZodError = /** @class */ (function (_super) {
    __extends(ZodError, _super);
    function ZodError(errors) {
        var _newTarget = this.constructor;
        var _this = _super.call(this) || this;
        _this.errors = [];
        _this.addError = function (sub) {
            _this.errors = _this.errors.concat([sub]);
        };
        _this.addErrors = function (subs) {
            if (subs === void 0) { subs = []; }
            _this.errors = _this.errors.concat(subs);
        };
        _this.flatten = function () {
            var fieldErrors = {};
            var formErrors = [];
            for (var _i = 0, _a = _this.errors; _i < _a.length; _i++) {
                var sub = _a[_i];
                if (sub.path.length > 0) {
                    fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
                    fieldErrors[sub.path[0]].push(sub.message);
                }
                else {
                    formErrors.push(sub.message);
                }
            }
            return { formErrors: formErrors, fieldErrors: fieldErrors };
        };
        // restore prototype chain
        var actualProto = _newTarget.prototype;
        if (Object.setPrototypeOf) {
            Object.setPrototypeOf(_this, actualProto);
        }
        else {
            _this.__proto__ = actualProto;
        }
        _this.errors = errors;
        return _this;
    }
    Object.defineProperty(ZodError.prototype, "message", {
        get: function () {
            // return JSON.stringify(this.errors, null, 2);
            var errorMessage = [
                this.errors.length + " validation issue(s)",
                '',
            ];
            for (var _i = 0, _a = this.errors; _i < _a.length; _i++) {
                var err = _a[_i];
                var pathString = err.path.join('.') || '[[root]]';
                errorMessage.push("  Issue #" + this.errors.indexOf(err) + ": " + err.code + " at " + pathString);
                errorMessage.push("  " + err.message);
                errorMessage.push('');
            }
            return errorMessage.join('\n');
            // return quotelessJson(this);
            // .map(({ path, message }) => {
            //   return path.length ? `${path.join('./index')}: ${message}` : `${message}`;
            // })
            // .join('\n');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ZodError.prototype, "isEmpty", {
        get: function () {
            return this.errors.length === 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ZodError.prototype, "formErrors", {
        get: function () {
            return this.flatten();
        },
        enumerable: true,
        configurable: true
    });
    ZodError.create = function (errors) {
        var error = new ZodError(errors);
        return error;
    };
    return ZodError;
}(Error));
exports.ZodError = ZodError;
//# sourceMappingURL=ZodError.js.map

/***/ }),

/***/ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/codegen.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/codegen.js ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var z = __importStar(__webpack_require__(/*! ./index */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/index.js"));
var util_1 = __webpack_require__(/*! ./helpers/util */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/helpers/util.js");
var isOptional = function (schema) {
    var def = schema._def;
    if (def.t === z.ZodTypes.undefined)
        return true;
    else if (def.t === z.ZodTypes.intersection) {
        return isOptional(def.right) && isOptional(def.left);
    }
    else if (def.t === z.ZodTypes.union) {
        return def.options.map(isOptional).some(function (x) { return x === true; });
    }
    return false;
};
var ZodCodeGenerator = /** @class */ (function () {
    function ZodCodeGenerator() {
        var _this = this;
        this.seen = [];
        this.serial = 0;
        this.randomId = function () {
            return "IZod" + _this.serial++;
        };
        this.findBySchema = function (schema) {
            return _this.seen.find(function (s) { return s.schema === schema; });
        };
        this.findById = function (id) {
            var found = _this.seen.find(function (s) { return s.id === id; });
            if (!found)
                throw new Error("Unfound ID: " + id);
            return found;
        };
        this.dump = function () {
            return "\ntype Identity<T> = T;\n\n" + _this.seen
                .map(function (item) { return "type " + item.id + " = Identity<" + item.type + ">;"; })
                .join('\n\n') + "\n";
        };
        this.setType = function (id, type) {
            var found = _this.findById(id);
            found.type = type;
            return found;
        };
        this.generate = function (schema) {
            var found = _this.findBySchema(schema);
            if (found)
                return found;
            var def = schema._def;
            var id = _this.randomId();
            var ty = {
                schema: schema,
                id: id,
                type: "__INCOMPLETE__",
            };
            _this.seen.push(ty);
            switch (def.t) {
                case z.ZodTypes.string:
                    return _this.setType(id, "string");
                case z.ZodTypes.number:
                    return _this.setType(id, "number");
                case z.ZodTypes.bigint:
                    return _this.setType(id, "bigint");
                case z.ZodTypes.boolean:
                    return _this.setType(id, "boolean");
                case z.ZodTypes.date:
                    return _this.setType(id, "Date");
                case z.ZodTypes.undefined:
                    return _this.setType(id, "undefined");
                case z.ZodTypes.null:
                    return _this.setType(id, "null");
                case z.ZodTypes.any:
                    return _this.setType(id, "any");
                case z.ZodTypes.unknown:
                    return _this.setType(id, "unknown");
                case z.ZodTypes.void:
                    return _this.setType(id, "void");
                case z.ZodTypes.literal:
                    var val = def.value;
                    var literalType = typeof val === 'string' ? "\"" + val + "\"" : "" + val;
                    return _this.setType(id, literalType);
                case z.ZodTypes.enum:
                    return _this.setType(id, def.values.map(function (v) { return "\"" + v + "\""; }).join(' | '));
                case z.ZodTypes.object:
                    var objectLines = [];
                    var shape = def.shape();
                    for (var key in shape) {
                        var childSchema = shape[key];
                        var childType = _this.generate(childSchema);
                        var OPTKEY = isOptional(childSchema) ? '?' : '';
                        objectLines.push("" + key + OPTKEY + ": " + childType.id);
                    }
                    var baseStruct = "{\n" + objectLines
                        .map(function (line) { return "  " + line + ";"; })
                        .join('\n') + "\n}";
                    _this.setType(id, "" + baseStruct);
                    break;
                case z.ZodTypes.tuple:
                    var tupleLines = [];
                    for (var _i = 0, _a = def.items; _i < _a.length; _i++) {
                        var elSchema = _a[_i];
                        var elType = _this.generate(elSchema);
                        tupleLines.push(elType.id);
                    }
                    var baseTuple = "[\n" + tupleLines
                        .map(function (line) { return "  " + line + ","; })
                        .join('\n') + "\n]";
                    return _this.setType(id, "" + baseTuple);
                case z.ZodTypes.array:
                    return _this.setType(id, _this.generate(def.type).id + "[]");
                case z.ZodTypes.function:
                    var args = _this.generate(def.args);
                    var returns = _this.generate(def.returns);
                    return _this.setType(id, "(...args: " + args.id + ")=>" + returns.id);
                case z.ZodTypes.promise:
                    var promValue = _this.generate(def.type);
                    return _this.setType(id, "Promise<" + promValue.id + ">");
                case z.ZodTypes.union:
                    var unionLines = [];
                    for (var _b = 0, _c = def.options; _b < _c.length; _b++) {
                        var elSchema = _c[_b];
                        var elType = _this.generate(elSchema);
                        unionLines.push(elType.id);
                    }
                    return _this.setType(id, unionLines.join(" | "));
                case z.ZodTypes.intersection:
                    return _this.setType(id, _this.generate(def.left).id + " & " + _this.generate(def.right).id);
                case z.ZodTypes.record:
                    return _this.setType(id, "{[k:string]: " + _this.generate(def.valueType).id + "}");
                case z.ZodTypes.lazy:
                    var lazyType = def.getter();
                    return _this.setType(id, _this.generate(lazyType).id);
                case z.ZodTypes.nativeEnum:
                    // const lazyType = def.getter();
                    return _this.setType(id, 'asdf');
                case z.ZodTypes.keyof:
                    // const lazyType = def.getter();
                    return _this.setType(id, "keyof [" + def.values
                        .map(function (val) { return (typeof val === 'string' ? "\"" + val + "\"" : val); })
                        .join(', ') + "]");
                default:
                    util_1.util.assertNever(def);
            }
            return _this.findById(id);
        };
    }
    ZodCodeGenerator.create = function () { return new ZodCodeGenerator(); };
    return ZodCodeGenerator;
}());
exports.ZodCodeGenerator = ZodCodeGenerator;
//# sourceMappingURL=codegen.js.map

/***/ }),

/***/ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/defaultErrorMap.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/defaultErrorMap.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var ZodError_1 = __webpack_require__(/*! ./ZodError */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/ZodError.js");
var util_1 = __webpack_require__(/*! ./helpers/util */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/helpers/util.js");
exports.defaultErrorMap = function (error, _ctx) {
    var message;
    switch (error.code) {
        case ZodError_1.ZodErrorCode.invalid_type:
            if (error.received === 'undefined') {
                message = 'Required';
            }
            else {
                message = "Expected " + error.expected + ", received " + error.received;
            }
            break;
        case ZodError_1.ZodErrorCode.nonempty_array_is_empty:
            message = "List must contain at least one item";
            break;
        case ZodError_1.ZodErrorCode.unrecognized_keys:
            message = "Unrecognized key(s) in object: " + error.keys.map(function (k) { return "'" + k + "'"; }).join(', ');
            break;
        case ZodError_1.ZodErrorCode.invalid_union:
            message = "Invalid input";
            break;
        // case ZodErrorCode.invalid_tuple_length:
        //   message = `Expected list of ${error.expected} items, received ${error.received} items`;
        //   break;
        case ZodError_1.ZodErrorCode.invalid_literal_value:
            message = "Input must be \"" + error.expected + "\"";
            break;
        case ZodError_1.ZodErrorCode.invalid_enum_value:
            message = "Input must be one of these values: " + error.options.join(', ');
            break;
        case ZodError_1.ZodErrorCode.invalid_arguments:
            message = "Invalid function arguments";
            break;
        case ZodError_1.ZodErrorCode.invalid_return_type:
            message = "Invalid function return type";
            break;
        case ZodError_1.ZodErrorCode.invalid_date:
            message = "Invalid date";
            break;
        // case ZodErrorCode.too_small:
        //   const tooShortNoun = _ctx.data === 'string' ? 'characters' : 'items';
        //   message = `Too short, should be at least ${error.minimum} ${tooShortNoun}`;
        //   break;
        // case ZodErrorCode.too_big:
        //   const tooLongNoun = _ctx.data === 'string' ? 'characters' : 'items';
        //   message = `Too short, should be at most ${error.maximum} ${tooLongNoun}`;
        //   break;
        case ZodError_1.ZodErrorCode.invalid_string:
            if (error.validation !== 'regex')
                message = "Invalid " + error.validation;
            else
                message = 'Invalid';
            break;
        // case ZodErrorCode.invalid_url:
        //   message = 'Invalid URL.';
        //   break;
        // case ZodErrorCode.invalid_uuid:
        //   message = 'Invalid UUID.';
        //   break;
        case ZodError_1.ZodErrorCode.too_small:
            if (error.type === 'array')
                message = "Should have " + (error.inclusive ? "at least" : "more than") + " " + error.minimum + " items";
            else if (error.type === 'string')
                message = "Should be " + (error.inclusive ? "at least" : "over") + " " + error.minimum + " characters";
            else if (error.type === 'number')
                message = "Value should be greater than " + (error.inclusive ? "or equal to " : "") + error.minimum;
            else
                message = 'Invalid input';
            break;
        case ZodError_1.ZodErrorCode.too_big:
            if (error.type === 'array')
                message = "Should have " + (error.inclusive ? "at most" : "less than") + " " + error.maximum + " items";
            else if (error.type === 'string')
                message = "Should be " + (error.inclusive ? "at most" : "under") + " " + error.maximum + " characters long";
            else if (error.type === 'number')
                message = "Value should be less than " + (error.inclusive ? "or equal to " : "") + error.maximum;
            else
                message = 'Invalid input';
            break;
        case ZodError_1.ZodErrorCode.custom_error:
            message = "Invalid input.";
            break;
        default:
            message = "Invalid input.";
            util_1.util.assertNever(error);
    }
    return { message: message };
    // return `Invalid input.`;
};
//# sourceMappingURL=defaultErrorMap.js.map

/***/ }),

/***/ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/helpers/errorUtil.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/helpers/errorUtil.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var errorUtil;
(function (errorUtil) {
    errorUtil.errToObj = function (message) { return (typeof message === 'string' ? { message: message } : message || {}); };
})(errorUtil = exports.errorUtil || (exports.errorUtil = {}));
//# sourceMappingURL=errorUtil.js.map

/***/ }),

/***/ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/helpers/objectUtil.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/helpers/objectUtil.js ***!
  \********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var base_1 = __webpack_require__(/*! ../types/base */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/base.js");
var intersection_1 = __webpack_require__(/*! ../types/intersection */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/intersection.js");
var object_1 = __webpack_require__(/*! ../types/object */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/object.js");
var objectUtil;
(function (objectUtil) {
    objectUtil.mergeShapes = function (first, second) {
        var firstKeys = Object.keys(first);
        var secondKeys = Object.keys(second);
        var sharedKeys = firstKeys.filter(function (k) { return secondKeys.indexOf(k) !== -1; });
        var sharedShape = {};
        for (var _i = 0, sharedKeys_1 = sharedKeys; _i < sharedKeys_1.length; _i++) {
            var k = sharedKeys_1[_i];
            sharedShape[k] = intersection_1.ZodIntersection.create(first[k], second[k]);
        }
        return __assign({}, first, second, sharedShape);
    };
    objectUtil.mergeObjects = function (first) { return function (second) {
        var mergedShape = objectUtil.mergeShapes(first._def.shape(), second._def.shape());
        var merged = new object_1.ZodObject({
            t: base_1.ZodTypes.object,
            checks: (first._def.checks || []).concat((second._def.checks || [])),
            params: {
                strict: first.params.strict && second.params.strict,
            },
            shape: function () { return mergedShape; },
        });
        return merged;
    }; };
})(objectUtil = exports.objectUtil || (exports.objectUtil = {}));
//# sourceMappingURL=objectUtil.js.map

/***/ }),

/***/ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/helpers/util.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/helpers/util.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var util;
(function (util) {
    function assertNever(_x) {
        throw new Error();
    }
    util.assertNever = assertNever;
    util.arrayToEnum = function (items) {
        var obj = {};
        for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
            var item = items_1[_i];
            obj[item] = item;
        }
        return obj;
    };
    util.getValidEnumValues = function (obj) {
        var validKeys = Object.keys(obj).filter(function (k) { return typeof obj[obj[k]] !== 'number'; });
        var filtered = {};
        for (var _i = 0, validKeys_1 = validKeys; _i < validKeys_1.length; _i++) {
            var k = validKeys_1[_i];
            filtered[k] = obj[k];
        }
        return util.getValues(filtered);
    };
    util.getValues = function (obj) {
        return Object.keys(obj).map(function (e) {
            return obj[e];
        });
    };
    util.objectValues = function (obj) {
        return Object.keys(obj).map(function (e) {
            return obj[e];
        });
    };
})(util = exports.util || (exports.util = {}));
//# sourceMappingURL=util.js.map

/***/ }),

/***/ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/index.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/index.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* ZOD */
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", ({ value: true }));
var string_1 = __webpack_require__(/*! ./types/string */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/string.js");
exports.ZodString = string_1.ZodString;
var number_1 = __webpack_require__(/*! ./types/number */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/number.js");
exports.ZodNumber = number_1.ZodNumber;
var bigint_1 = __webpack_require__(/*! ./types/bigint */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/bigint.js");
exports.ZodBigInt = bigint_1.ZodBigInt;
var boolean_1 = __webpack_require__(/*! ./types/boolean */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/boolean.js");
exports.ZodBoolean = boolean_1.ZodBoolean;
var date_1 = __webpack_require__(/*! ./types/date */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/date.js");
exports.ZodDate = date_1.ZodDate;
var undefined_1 = __webpack_require__(/*! ./types/undefined */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/undefined.js");
exports.ZodUndefined = undefined_1.ZodUndefined;
var null_1 = __webpack_require__(/*! ./types/null */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/null.js");
exports.ZodNull = null_1.ZodNull;
var any_1 = __webpack_require__(/*! ./types/any */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/any.js");
exports.ZodAny = any_1.ZodAny;
var unknown_1 = __webpack_require__(/*! ./types/unknown */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/unknown.js");
exports.ZodUnknown = unknown_1.ZodUnknown;
var void_1 = __webpack_require__(/*! ./types/void */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/void.js");
exports.ZodVoid = void_1.ZodVoid;
var array_1 = __webpack_require__(/*! ./types/array */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/array.js");
exports.ZodArray = array_1.ZodArray;
var object_1 = __webpack_require__(/*! ./types/object */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/object.js");
exports.ZodObject = object_1.ZodObject;
var union_1 = __webpack_require__(/*! ./types/union */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/union.js");
exports.ZodUnion = union_1.ZodUnion;
var intersection_1 = __webpack_require__(/*! ./types/intersection */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/intersection.js");
exports.ZodIntersection = intersection_1.ZodIntersection;
var tuple_1 = __webpack_require__(/*! ./types/tuple */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/tuple.js");
exports.ZodTuple = tuple_1.ZodTuple;
var record_1 = __webpack_require__(/*! ./types/record */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/record.js");
exports.ZodRecord = record_1.ZodRecord;
var function_1 = __webpack_require__(/*! ./types/function */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/function.js");
exports.ZodFunction = function_1.ZodFunction;
var lazy_1 = __webpack_require__(/*! ./types/lazy */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/lazy.js");
exports.ZodLazy = lazy_1.ZodLazy;
var literal_1 = __webpack_require__(/*! ./types/literal */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/literal.js");
exports.ZodLiteral = literal_1.ZodLiteral;
var enum_1 = __webpack_require__(/*! ./types/enum */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/enum.js");
exports.ZodEnum = enum_1.ZodEnum;
var nativeEnum_1 = __webpack_require__(/*! ./types/nativeEnum */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/nativeEnum.js");
exports.ZodNativeEnum = nativeEnum_1.ZodNativeEnum;
var keyof_1 = __webpack_require__(/*! ./types/keyof */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/keyof.js");
var promise_1 = __webpack_require__(/*! ./types/promise */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/promise.js");
exports.ZodPromise = promise_1.ZodPromise;
var base_1 = __webpack_require__(/*! ./types/base */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/base.js");
exports.ZodType = base_1.ZodType;
exports.Schema = base_1.ZodType;
exports.ZodSchema = base_1.ZodType;
exports.ZodTypes = base_1.ZodTypes;
// import { ZodError, ZodErrorCode, ZodInvalidTypeError,
// ZodNonEmptyArrayIsEmptyError,
// ZodUnrecognizedKeysError,
// ZodInvalidUnionError,
// ZodInvalidLiteralValueError,
// ZodInvalidEnumValueError,
// ZodInvalidArgumentsError,
// ZodInvalidReturnTypeError,
// ZodInvalidDateError,
// ZodInvalidStringError,
// ZodTooSmallError,
// ZodTooBigError,
// ZodCustomError } from './ZodError';
var parser_1 = __webpack_require__(/*! ./parser */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/parser.js");
exports.ZodParsedType = parser_1.ZodParsedType;
var codegen_1 = __webpack_require__(/*! ./codegen */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/codegen.js");
exports.ZodCodeGenerator = codegen_1.ZodCodeGenerator;
var stringType = string_1.ZodString.create;
exports.string = stringType;
var numberType = number_1.ZodNumber.create;
exports.number = numberType;
var bigIntType = bigint_1.ZodBigInt.create;
exports.bigint = bigIntType;
var booleanType = boolean_1.ZodBoolean.create;
exports.boolean = booleanType;
var dateType = date_1.ZodDate.create;
exports.date = dateType;
var undefinedType = undefined_1.ZodUndefined.create;
exports.undefined = undefinedType;
var nullType = null_1.ZodNull.create;
exports["null"] = nullType;
var anyType = any_1.ZodAny.create;
exports.any = anyType;
var unknownType = unknown_1.ZodUnknown.create;
exports.unknown = unknownType;
var voidType = void_1.ZodVoid.create;
exports["void"] = voidType;
var arrayType = array_1.ZodArray.create;
exports.array = arrayType;
var objectType = object_1.ZodObject.create;
exports.object = objectType;
var unionType = union_1.ZodUnion.create;
exports.union = unionType;
var intersectionType = intersection_1.ZodIntersection.create;
exports.intersection = intersectionType;
var tupleType = tuple_1.ZodTuple.create;
exports.tuple = tupleType;
var recordType = record_1.ZodRecord.create;
exports.record = recordType;
var functionType = function_1.ZodFunction.create;
exports["function"] = functionType;
var lazyType = lazy_1.ZodLazy.create;
exports.lazy = lazyType;
var literalType = literal_1.ZodLiteral.create;
exports.literal = literalType;
var enumType = enum_1.ZodEnum.create;
exports["enum"] = enumType;
var nativeEnumType = nativeEnum_1.ZodNativeEnum.create;
exports.nativeEnum = nativeEnumType;
var promiseType = promise_1.ZodPromise.create;
exports.promise = promiseType;
var keyofType = keyof_1.ZodKeyof.create;
exports.keyof = keyofType;
var ostring = function () { return stringType().optional(); };
exports.ostring = ostring;
var onumber = function () { return numberType().optional(); };
exports.onumber = onumber;
var oboolean = function () { return booleanType().optional(); };
exports.oboolean = oboolean;
var codegen = codegen_1.ZodCodeGenerator.create;
exports.codegen = codegen;
exports.custom = function (check, params) { return anyType().refine(check, params); };
var instanceOfType = function (cls, params) {
    if (params === void 0) { params = {
        message: "Input not instance of " + cls.name,
    }; }
    return exports.custom(function (data) { return data instanceof cls; }, params);
};
exports["instanceof"] = instanceOfType;
exports.late = {
    object: object_1.ZodObject.lazycreate,
};
__export(__webpack_require__(/*! ./ZodError */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/ZodError.js"));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/isScalar.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/isScalar.js ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var z = __importStar(__webpack_require__(/*! ./index */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/index.js"));
var util_1 = __webpack_require__(/*! ./helpers/util */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/helpers/util.js");
exports.isScalar = function (schema, params) {
    if (params === void 0) { params = { root: true }; }
    var def = schema._def;
    var returnValue = false;
    switch (def.t) {
        case z.ZodTypes.string:
            returnValue = true;
            break;
        case z.ZodTypes.number:
            returnValue = true;
            break;
        case z.ZodTypes.bigint:
            returnValue = true;
            break;
        case z.ZodTypes.boolean:
            returnValue = true;
            break;
        case z.ZodTypes.undefined:
            returnValue = true;
            break;
        case z.ZodTypes.null:
            returnValue = true;
            break;
        case z.ZodTypes.any:
            returnValue = false;
            break;
        case z.ZodTypes.unknown:
            returnValue = false;
            break;
        case z.ZodTypes.void:
            returnValue = false;
            break;
        case z.ZodTypes.array:
            if (params.root === false)
                return false;
            returnValue = exports.isScalar(def.type, { root: false });
            break;
        case z.ZodTypes.object:
            returnValue = false;
            break;
        case z.ZodTypes.union:
            returnValue = def.options.every(function (x) { return exports.isScalar(x); });
            break;
        case z.ZodTypes.intersection:
            returnValue = exports.isScalar(def.left) && exports.isScalar(def.right);
            break;
        case z.ZodTypes.tuple:
            returnValue = false;
            break;
        case z.ZodTypes.lazy:
            returnValue = exports.isScalar(def.getter());
            break;
        case z.ZodTypes.literal:
            returnValue = true;
            break;
        case z.ZodTypes.enum:
            returnValue = true;
            break;
        case z.ZodTypes.nativeEnum:
            returnValue = true;
            break;
        case z.ZodTypes.function:
            returnValue = false;
            break;
        case z.ZodTypes.record:
            returnValue = false;
            break;
        case z.ZodTypes.date:
            returnValue = true;
            break;
        case z.ZodTypes.promise:
            returnValue = false;
            break;
        case z.ZodTypes.keyof:
            returnValue = true;
            break;
        default:
            util_1.util.assertNever(def);
        // returnValue = false; break;
    }
    return returnValue;
};
//# sourceMappingURL=isScalar.js.map

/***/ }),

/***/ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/parser.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/parser.js ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var _this = this;
Object.defineProperty(exports, "__esModule", ({ value: true }));
var z = __importStar(__webpack_require__(/*! ./types/base */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/base.js"));
var ZodError_1 = __webpack_require__(/*! ./ZodError */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/ZodError.js");
var util_1 = __webpack_require__(/*! ./helpers/util */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/helpers/util.js");
var defaultErrorMap_1 = __webpack_require__(/*! ./defaultErrorMap */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/defaultErrorMap.js");
exports.getParsedType = function (data) {
    if (typeof data === 'string')
        return 'string';
    if (typeof data === 'number') {
        if (Number.isNaN(data))
            return 'nan';
        return 'number';
    }
    if (typeof data === 'boolean')
        return 'boolean';
    if (typeof data === 'bigint')
        return 'bigint';
    if (typeof data === 'symbol')
        return 'symbol';
    if (data instanceof Date)
        return 'date';
    if (typeof data === 'function')
        return 'function';
    if (data === undefined)
        return 'undefined';
    if (typeof data === 'undefined')
        return 'undefined';
    if (typeof data === 'object') {
        if (Array.isArray(data))
            return 'array';
        if (!data)
            return 'null';
        if (data.then &&
            typeof data.then === 'function' &&
            data.catch &&
            typeof data.catch === 'function') {
            return 'promise';
        }
        return 'object';
    }
    return 'unknown';
};
exports.ZodParsedType = util_1.util.arrayToEnum([
    'string',
    'nan',
    'number',
    'integer',
    'boolean',
    'date',
    'bigint',
    'symbol',
    'function',
    'undefined',
    'null',
    'array',
    'object',
    'unknown',
    'promise',
    'void',
]);
exports.find = function (arr, checker) {
    for (var _i = 0, arr_1 = arr; _i < arr_1.length; _i++) {
        var item = arr_1[_i];
        if (checker(item))
            return item;
    }
    return undefined;
};
var makeError = function (params, obj, errorData) {
    var errorArg = __assign({}, errorData, { path: params.path.concat((errorData.path || [])) });
    var ctxArg = { data: obj };
    var defaultError = defaultErrorMap_1.defaultErrorMap === params.errorMap
        ? { message: "Invalid value." }
        : defaultErrorMap_1.defaultErrorMap(errorArg, __assign({}, ctxArg, { defaultError: "Invalid value." }));
    return __assign({}, errorData, { path: params.path.concat((errorData.path || [])), message: errorData.message ||
            params.errorMap(errorArg, __assign({}, ctxArg, { defaultError: defaultError.message })).message });
};
exports.ZodParser = function (schemaDef) { return function (obj, baseParams) {
    if (baseParams === void 0) { baseParams = { seen: [], errorMap: defaultErrorMap_1.defaultErrorMap, path: [] }; }
    var params = {
        seen: baseParams.seen || [],
        path: baseParams.path || [],
        errorMap: baseParams.errorMap || defaultErrorMap_1.defaultErrorMap,
    };
    var def = schemaDef;
    var parsedType = exports.getParsedType(obj);
    var schemaSeen = exports.find(params.seen, function (x) { return x.schema === schemaDef; });
    var isNonprimitive = ['array', 'object'].indexOf(parsedType) !== -1;
    if (isNonprimitive) {
        if (schemaSeen) {
            var found = exports.find(schemaSeen.objects, function (x) { return x.data === obj; });
            if (found) {
                if (found.error) {
                    throw found.error;
                }
                found.times = found.times + 1;
                if (found.times > 5 && isNonprimitive) {
                    return Symbol('recursion depth exceeded.');
                }
                else if (found.times > 2) {
                }
            }
            else {
                //
                schemaSeen.objects.push(obj);
            }
        }
        else {
            params.seen.push({
                schema: schemaDef,
                objects: [{ data: obj, error: undefined, times: 1 }],
            });
        }
    }
    // const setError = (error: Error) => {
    //   const schemaSeen = params.seen.find(x => x.schema === schemaDef);
    //   if (schemaSeen) {
    //     const found = schemaSeen.objects.find(x => x.data === obj);
    //     if (found) {
    //       found.error = error;
    //     }
    //   }
    // };
    var error = new ZodError_1.ZodError([]);
    var returnValue = obj;
    switch (def.t) {
        case z.ZodTypes.string:
            if (parsedType !== exports.ZodParsedType.string) {
                error.addError(makeError(params, obj, {
                    code: ZodError_1.ZodErrorCode.invalid_type,
                    expected: exports.ZodParsedType.string,
                    received: parsedType,
                }));
                // setError(error);
                throw error;
            }
            break;
        case z.ZodTypes.number:
            if (parsedType !== exports.ZodParsedType.number) {
                error.addError(makeError(params, obj, {
                    code: ZodError_1.ZodErrorCode.invalid_type,
                    expected: exports.ZodParsedType.number,
                    received: parsedType,
                }));
                // setError(error);
                throw error;
            }
            if (Number.isNaN(obj)) {
                error.addError(makeError(params, obj, {
                    code: ZodError_1.ZodErrorCode.invalid_type,
                    expected: exports.ZodParsedType.number,
                    received: exports.ZodParsedType.nan,
                }));
                // setError(error);
                throw error;
            }
            break;
        case z.ZodTypes.bigint:
            if (parsedType !== exports.ZodParsedType.bigint) {
                error.addError(makeError(params, obj, {
                    code: ZodError_1.ZodErrorCode.invalid_type,
                    expected: exports.ZodParsedType.number,
                    received: parsedType,
                }));
                // setError(error);
                throw error;
            }
            break;
        case z.ZodTypes.boolean:
            if (parsedType !== exports.ZodParsedType.boolean) {
                error.addError(makeError(params, obj, {
                    code: ZodError_1.ZodErrorCode.invalid_type,
                    expected: exports.ZodParsedType.boolean,
                    received: parsedType,
                }));
                // setError(error);
                throw error;
            }
            break;
        case z.ZodTypes.undefined:
            if (parsedType !== exports.ZodParsedType.undefined) {
                error.addError(makeError(params, obj, {
                    code: ZodError_1.ZodErrorCode.invalid_type,
                    expected: exports.ZodParsedType.undefined,
                    received: parsedType,
                }));
                // setError(error);
                throw error;
            }
            break;
        case z.ZodTypes.null:
            if (parsedType !== exports.ZodParsedType.null) {
                error.addError(makeError(params, obj, {
                    code: ZodError_1.ZodErrorCode.invalid_type,
                    expected: exports.ZodParsedType.null,
                    received: parsedType,
                }));
                // setError(error);
                throw error;
            }
            break;
        case z.ZodTypes.any:
            break;
        case z.ZodTypes.unknown:
            break;
        case z.ZodTypes.void:
            if (parsedType !== exports.ZodParsedType.undefined &&
                parsedType !== exports.ZodParsedType.null) {
                error.addError(makeError(params, obj, {
                    code: ZodError_1.ZodErrorCode.invalid_type,
                    expected: exports.ZodParsedType.void,
                    received: parsedType,
                }));
                // setError(error);
                throw error;
            }
            break;
        case z.ZodTypes.array:
            if (parsedType !== exports.ZodParsedType.array) {
                error.addError(makeError(params, obj, {
                    code: ZodError_1.ZodErrorCode.invalid_type,
                    expected: exports.ZodParsedType.array,
                    received: parsedType,
                }));
                // setError(error);
                throw error;
            }
            var data = obj;
            if (def.nonempty === true && obj.length === 0) {
                error.addError(makeError(params, obj, {
                    code: ZodError_1.ZodErrorCode.nonempty_array_is_empty,
                }));
                // setError(error);
                throw error;
            }
            data.map(function (item, i) {
                try {
                    var parsedItem = def.type.parse(item, __assign({}, params, { path: params.path.concat([i]) }));
                    return parsedItem;
                }
                catch (err) {
                    var zerr = err;
                    error.addErrors(zerr.errors);
                }
            });
            if (!error.isEmpty) {
                // setError(error);
                throw error;
            }
            break;
        case z.ZodTypes.object:
            if (parsedType !== exports.ZodParsedType.object) {
                error.addError(makeError(params, obj, {
                    code: ZodError_1.ZodErrorCode.invalid_type,
                    expected: exports.ZodParsedType.object,
                    received: parsedType,
                }));
                // setError(error);
                throw error;
            }
            var shape = def.shape();
            if (def.params.strict) {
                var shapeKeys_1 = Object.keys(shape);
                var objKeys = Object.keys(obj);
                var extraKeys = objKeys.filter(function (k) { return shapeKeys_1.indexOf(k) === -1; });
                if (extraKeys.length) {
                    error.addError(makeError(params, obj, {
                        code: ZodError_1.ZodErrorCode.unrecognized_keys,
                        keys: extraKeys,
                    }));
                }
            }
            for (var key in shape) {
                try {
                    def
                        .shape()[key].parse(obj[key], __assign({}, params, { path: params.path.concat([key]) }));
                }
                catch (err) {
                    var zerr = err;
                    error.addErrors(zerr.errors);
                }
            }
            break;
        case z.ZodTypes.union:
            var isValid = false;
            var unionErrors = [];
            for (var _i = 0, _a = def.options; _i < _a.length; _i++) {
                var option = _a[_i];
                try {
                    option.parse(obj, params);
                    isValid = true;
                }
                catch (err) {
                    unionErrors.push(err);
                }
            }
            if (!isValid) {
                var filteredErrors = unionErrors.filter(function (err) {
                    return err.errors[0].code !== 'invalid_type';
                });
                if (filteredErrors.length === 1) {
                    error.addErrors(filteredErrors[0].errors);
                }
                else {
                    error.addError(makeError(params, obj, {
                        code: ZodError_1.ZodErrorCode.invalid_union,
                        unionErrors: unionErrors,
                    }));
                }
            }
            break;
        case z.ZodTypes.intersection:
            try {
                def.left.parse(obj, params);
            }
            catch (err) {
                error.addErrors(err.errors);
            }
            try {
                def.right.parse(obj, params);
            }
            catch (err) {
                error.addErrors(err.errors);
            }
            break;
        case z.ZodTypes.tuple:
            if (parsedType !== exports.ZodParsedType.array) {
                error.addError(makeError(params, obj, {
                    code: ZodError_1.ZodErrorCode.invalid_type,
                    expected: exports.ZodParsedType.array,
                    received: parsedType,
                }));
                // setError(error);
                throw error;
            }
            if (obj.length > def.items.length) {
                error.addError(makeError(params, obj, {
                    code: ZodError_1.ZodErrorCode.too_big,
                    maximum: def.items.length,
                    inclusive: true,
                    type: 'array',
                }));
            }
            else if (obj.length < def.items.length) {
                error.addError(makeError(params, obj, {
                    code: ZodError_1.ZodErrorCode.too_small,
                    minimum: def.items.length,
                    inclusive: true,
                    type: 'array',
                }));
            }
            var parsedTuple = [];
            var tupleData = obj;
            for (var index in tupleData) {
                var item = tupleData[index];
                var itemParser = def.items[index];
                try {
                    parsedTuple.push(itemParser.parse(item, __assign({}, params, { path: params.path.concat([index]) })));
                }
                catch (err) {
                    error.addErrors(err.errors);
                }
            }
            break;
        case z.ZodTypes.lazy:
            var lazySchema = def.getter();
            lazySchema.parse(obj, params);
            break;
        case z.ZodTypes.literal:
            if (obj !== def.value) {
                error.addError(makeError(params, obj, {
                    code: ZodError_1.ZodErrorCode.invalid_literal_value,
                    expected: def.value,
                }));
            }
            break;
        case z.ZodTypes.enum:
            if (def.values.indexOf(obj) === -1) {
                error.addError(makeError(params, obj, {
                    code: ZodError_1.ZodErrorCode.invalid_enum_value,
                    options: def.values,
                }));
            }
            break;
        case z.ZodTypes.nativeEnum:
            if (util_1.util.getValidEnumValues(def.values).indexOf(obj) === -1) {
                error.addError(makeError(params, obj, {
                    code: ZodError_1.ZodErrorCode.invalid_enum_value,
                    options: util_1.util.getValues(def.values),
                }));
            }
            break;
        case z.ZodTypes.keyof:
            if (util_1.util.getValidEnumValues(def.values).indexOf(obj) === -1) {
                error.addError(makeError(params, obj, {
                    code: ZodError_1.ZodErrorCode.invalid_enum_value,
                    options: util_1.util.getValues(def.values),
                }));
            }
            break;
        case z.ZodTypes.function:
            if (parsedType !== exports.ZodParsedType.function) {
                error.addError(makeError(params, obj, {
                    code: ZodError_1.ZodErrorCode.invalid_type,
                    expected: exports.ZodParsedType.function,
                    received: parsedType,
                }));
                // setError(error);
                throw error;
            }
            var validatedFunc = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                try {
                    def.args.parse(args);
                }
                catch (err) {
                    if (err instanceof ZodError_1.ZodError) {
                        var argsError = new ZodError_1.ZodError([]);
                        argsError.addError(makeError(params, obj, {
                            code: ZodError_1.ZodErrorCode.invalid_arguments,
                            argumentsError: err,
                        }));
                        throw argsError;
                    }
                    throw err;
                }
                var result = obj.apply(void 0, args);
                try {
                    return def.returns.parse(result);
                }
                catch (err) {
                    if (err instanceof ZodError_1.ZodError) {
                        var returnsError = new ZodError_1.ZodError([]);
                        returnsError.addError(makeError(params, obj, {
                            code: ZodError_1.ZodErrorCode.invalid_return_type,
                            returnTypeError: err,
                        }));
                        throw returnsError;
                    }
                    throw err;
                }
            };
            return validatedFunc;
        case z.ZodTypes.record:
            if (parsedType !== exports.ZodParsedType.object) {
                error.addError(makeError(params, obj, {
                    code: ZodError_1.ZodErrorCode.invalid_type,
                    expected: exports.ZodParsedType.object,
                    received: parsedType,
                }));
                // setError(error);
                throw error;
            }
            for (var key in obj) {
                try {
                    def.valueType.parse(obj[key], __assign({}, params, { path: params.path.concat([key]) }));
                }
                catch (err) {
                    error.addErrors(err.errors);
                }
            }
            break;
        case z.ZodTypes.date:
            if (!(obj instanceof Date)) {
                error.addError(makeError(params, obj, {
                    code: ZodError_1.ZodErrorCode.invalid_type,
                    expected: exports.ZodParsedType.date,
                    received: parsedType,
                }));
                // setError(error);
                throw error;
            }
            if (isNaN(obj.getTime())) {
                error.addError(makeError(params, obj, {
                    code: ZodError_1.ZodErrorCode.invalid_date,
                }));
                // setError(error);
                throw error;
            }
            break;
        case z.ZodTypes.promise:
            if (parsedType !== exports.ZodParsedType.promise) {
                error.addError(makeError(params, obj, {
                    code: ZodError_1.ZodErrorCode.invalid_type,
                    expected: exports.ZodParsedType.promise,
                    received: parsedType,
                }));
                // setError(error);
                throw error;
            }
            return new Promise(function (res, rej) { return __awaiter(_this, void 0, void 0, function () {
                var objValue, parsed;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, obj];
                        case 1:
                            objValue = _a.sent();
                            try {
                                parsed = def.type.parse(objValue, params);
                                res(parsed);
                            }
                            catch (err) {
                                rej(err);
                            }
                            return [2 /*return*/];
                    }
                });
            }); });
        default:
            util_1.util.assertNever(def);
    }
    var customChecks = def.checks || [];
    for (var _b = 0, customChecks_1 = customChecks; _b < customChecks_1.length; _b++) {
        var check = customChecks_1[_b];
        if (!check.check(returnValue)) {
            var checkMethod = check.check, noMethodCheck = __rest(check, ["check"]);
            error.addError(makeError(params, obj, noMethodCheck));
        }
    }
    if (!error.isEmpty) {
        // setError(error);
        throw error;
    }
    return returnValue;
}; };
//# sourceMappingURL=parser.js.map

/***/ }),

/***/ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/any.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/any.js ***!
  \***********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var z = __importStar(__webpack_require__(/*! ./base */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/base.js"));
var ZodAny = /** @class */ (function (_super) {
    __extends(ZodAny, _super);
    function ZodAny() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        // opt optional: () => ZodUnion<[this, ZodUndefined]> = () => ZodUnion.create([this, ZodUndefined.create()]);
        // null nullable: () => ZodUnion<[this, ZodNull]> = () => ZodUnion.create([this, ZodNull.create()]);
        _this.toJSON = function () { return _this._def; };
        return _this;
    }
    ZodAny.create = function () {
        return new ZodAny({
            t: z.ZodTypes.any,
        });
    };
    return ZodAny;
}(z.ZodType));
exports.ZodAny = ZodAny;
//# sourceMappingURL=any.js.map

/***/ }),

/***/ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/array.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/array.js ***!
  \*************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var z = __importStar(__webpack_require__(/*! ./base */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/base.js"));
// import { ZodUndefined } from './undefined';
// import { ZodNull } from './null';
// import { ZodUnion } from './union';
var ZodError_1 = __webpack_require__(/*! ../ZodError */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/ZodError.js");
var ZodArray = /** @class */ (function (_super) {
    __extends(ZodArray, _super);
    function ZodArray() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.toJSON = function () {
            return {
                t: _this._def.t,
                nonempty: _this._def.nonempty,
                type: _this._def.type.toJSON(),
            };
        };
        // opt optional: () => ZodUnion<[this, ZodUndefined]> = () => ZodUnion.create([this, ZodUndefined.create()]);
        // null nullable: () => ZodUnion<[this, ZodNull]> = () => ZodUnion.create([this, ZodNull.create()]);
        _this.min = function (minLength, message) {
            return _this._refinement(__assign({ check: function (data) { return data.length >= minLength; }, code: ZodError_1.ZodErrorCode.too_small, type: 'array', inclusive: true, minimum: minLength }, (typeof message === 'string' ? { message: message } : message)));
        };
        _this.max = function (maxLength, message) {
            return _this._refinement(__assign({ check: function (data) { return data.length <= maxLength; }, code: ZodError_1.ZodErrorCode.too_big, type: 'array', inclusive: true, maximum: maxLength }, (typeof message === 'string' ? { message: message } : message)));
        };
        _this.length = function (len, message) { return _this.min(len, { message: message }).max(len, { message: message }); };
        _this.nonempty = function () {
            return new ZodNonEmptyArray(__assign({}, _this._def, { nonempty: true }));
        };
        return _this;
    }
    Object.defineProperty(ZodArray.prototype, "element", {
        get: function () {
            return this._def.type;
        },
        enumerable: true,
        configurable: true
    });
    ZodArray.create = function (schema) {
        return new ZodArray({
            t: z.ZodTypes.array,
            type: schema,
            nonempty: false,
        });
    };
    return ZodArray;
}(z.ZodType));
exports.ZodArray = ZodArray;
var ZodNonEmptyArray = /** @class */ (function (_super) {
    __extends(ZodNonEmptyArray, _super);
    function ZodNonEmptyArray() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.toJSON = function () {
            return {
                t: _this._def.t,
                type: _this._def.type.toJSON(),
            };
        };
        // opt optional: () => ZodUnion<[this, ZodUndefined]> = () => ZodUnion.create([this, ZodUndefined.create()]);
        // null nullable: () => ZodUnion<[this, ZodNull]> = () => ZodUnion.create([this, ZodNull.create()]);
        _this.min = function (minLength, message) {
            return _this._refinement(__assign({ check: function (data) { return data.length >= minLength; }, code: ZodError_1.ZodErrorCode.too_small, minimum: minLength, type: 'array', inclusive: true }, (typeof message === 'string' ? { message: message } : message)));
        };
        _this.max = function (maxLength, message) {
            return _this._refinement(__assign({ check: function (data) { return data.length <= maxLength; }, code: ZodError_1.ZodErrorCode.too_big, maximum: maxLength, type: 'array', inclusive: true }, (typeof message === 'string' ? { message: message } : message)));
        };
        _this.length = function (len, message) { return _this.min(len, { message: message }).max(len, { message: message }); };
        return _this;
    }
    return ZodNonEmptyArray;
}(z.ZodType));
exports.ZodNonEmptyArray = ZodNonEmptyArray;
//# sourceMappingURL=array.js.map

/***/ }),

/***/ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/base.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/base.js ***!
  \************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var parser_1 = __webpack_require__(/*! ../parser */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/parser.js");
var index_1 = __webpack_require__(/*! ../index */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/index.js");
var ZodTypes;
(function (ZodTypes) {
    ZodTypes["string"] = "string";
    ZodTypes["number"] = "number";
    ZodTypes["bigint"] = "bigint";
    ZodTypes["boolean"] = "boolean";
    ZodTypes["date"] = "date";
    ZodTypes["undefined"] = "undefined";
    ZodTypes["null"] = "null";
    ZodTypes["array"] = "array";
    ZodTypes["object"] = "object";
    ZodTypes["union"] = "union";
    ZodTypes["intersection"] = "intersection";
    ZodTypes["tuple"] = "tuple";
    ZodTypes["record"] = "record";
    ZodTypes["function"] = "function";
    ZodTypes["lazy"] = "lazy";
    ZodTypes["literal"] = "literal";
    ZodTypes["enum"] = "enum";
    ZodTypes["nativeEnum"] = "nativeEnum";
    ZodTypes["promise"] = "promise";
    ZodTypes["any"] = "any";
    ZodTypes["unknown"] = "unknown";
    ZodTypes["void"] = "void";
    ZodTypes["keyof"] = "keyof";
})(ZodTypes = exports.ZodTypes || (exports.ZodTypes = {}));
var ZodType = /** @class */ (function () {
    function ZodType(def) {
        var _this = this;
        this.safeParse = function (data, params) {
            try {
                var parsed = _this.parse(data, params);
                return {
                    success: true,
                    data: parsed,
                };
            }
            catch (err) {
                if (err instanceof index_1.ZodError) {
                    return {
                        success: false,
                        error: err,
                    };
                }
                throw err;
            }
        };
        this.parseAsync = function (value, params) {
            return new Promise(function (res, rej) {
                try {
                    var parsed = _this.parse(value, params);
                    return res(parsed);
                }
                catch (err) {
                    return rej(err);
                }
            });
        };
        this.refine = function (check, message) {
            if (message === void 0) { message = 'Invalid value.'; }
            if (typeof message === 'string') {
                return _this.refinement({ check: check, message: message });
            }
            return _this.refinement(__assign({ check: check }, message));
        };
        this.refinement = function (refinement) {
            return _this._refinement(__assign({ code: index_1.ZodErrorCode.custom_error }, refinement));
        };
        this._refinement = function (refinement) {
            return new _this.constructor(__assign({}, _this._def, { checks: (_this._def.checks || []).concat([refinement]) }));
        };
        //  abstract // opt optional: () => any;
        this.optional = function () {
            return index_1.ZodUnion.create([_this, index_1.ZodUndefined.create()]);
        };
        this.nullable = function () {
            return index_1.ZodUnion.create([_this, index_1.ZodNull.create()]);
        };
        this.array = function () { return index_1.ZodArray.create(_this); };
        this.or = function (arg) {
            return index_1.ZodUnion.create([_this, arg]);
        };
        this._def = def;
        this.parse = parser_1.ZodParser(def);
    }
    ZodType.prototype.is = function (u) {
        try {
            this.parse(u);
            return true;
        }
        catch (err) {
            return false;
        }
    };
    ZodType.prototype.check = function (u) {
        try {
            this.parse(u);
            return true;
        }
        catch (err) {
            return false;
        }
    };
    return ZodType;
}());
exports.ZodType = ZodType;
//# sourceMappingURL=base.js.map

/***/ }),

/***/ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/bigint.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/bigint.js ***!
  \**************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var z = __importStar(__webpack_require__(/*! ./base */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/base.js"));
var ZodBigInt = /** @class */ (function (_super) {
    __extends(ZodBigInt, _super);
    function ZodBigInt() {
        // opt optional: () => ZodUnion<[this, ZodUndefined]> = () => ZodUnion.create([this, ZodUndefined.create()]);
        var _this = _super !== null && _super.apply(this, arguments) || this;
        // null nullable: () => ZodUnion<[this, ZodNull]> = () => ZodUnion.create([this, ZodNull.create()]);
        _this.toJSON = function () { return _this._def; };
        return _this;
    }
    ZodBigInt.create = function () {
        return new ZodBigInt({
            t: z.ZodTypes.bigint,
        });
    };
    return ZodBigInt;
}(z.ZodType));
exports.ZodBigInt = ZodBigInt;
//# sourceMappingURL=bigint.js.map

/***/ }),

/***/ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/boolean.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/boolean.js ***!
  \***************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var z = __importStar(__webpack_require__(/*! ./base */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/base.js"));
var ZodBoolean = /** @class */ (function (_super) {
    __extends(ZodBoolean, _super);
    function ZodBoolean() {
        // opt optional: () => ZodUnion<[this, ZodUndefined]> = () => ZodUnion.create([this, ZodUndefined.create()]);
        var _this = _super !== null && _super.apply(this, arguments) || this;
        // null nullable: () => ZodUnion<[this, ZodNull]> = () => ZodUnion.create([this, ZodNull.create()]);
        _this.toJSON = function () { return _this._def; };
        return _this;
    }
    ZodBoolean.create = function () {
        return new ZodBoolean({
            t: z.ZodTypes.boolean,
        });
    };
    return ZodBoolean;
}(z.ZodType));
exports.ZodBoolean = ZodBoolean;
//# sourceMappingURL=boolean.js.map

/***/ }),

/***/ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/date.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/date.js ***!
  \************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var z = __importStar(__webpack_require__(/*! ./base */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/base.js"));
var ZodDate = /** @class */ (function (_super) {
    __extends(ZodDate, _super);
    function ZodDate() {
        // opt optional: () => ZodUnion<[this, ZodUndefined]> = () => ZodUnion.create([this, ZodUndefined.create()]);
        var _this = _super !== null && _super.apply(this, arguments) || this;
        // null nullable: () => ZodUnion<[this, ZodNull]> = () => ZodUnion.create([this, ZodNull.create()]);
        _this.toJSON = function () { return _this._def; };
        return _this;
    }
    ZodDate.create = function () {
        return new ZodDate({
            t: z.ZodTypes.date,
        });
    };
    return ZodDate;
}(z.ZodType));
exports.ZodDate = ZodDate;
//# sourceMappingURL=date.js.map

/***/ }),

/***/ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/enum.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/enum.js ***!
  \************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var z = __importStar(__webpack_require__(/*! ./base */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/base.js"));
var ZodEnum = /** @class */ (function (_super) {
    __extends(ZodEnum, _super);
    function ZodEnum() {
        // opt optional: () => ZodUnion<[this, ZodUndefined]> = () => ZodUnion.create([this, ZodUndefined.create()]);
        var _this = _super !== null && _super.apply(this, arguments) || this;
        // null nullable: () => ZodUnion<[this, ZodNull]> = () => ZodUnion.create([this, ZodNull.create()]);
        _this.toJSON = function () { return _this._def; };
        return _this;
    }
    Object.defineProperty(ZodEnum.prototype, "options", {
        get: function () {
            return this._def.values;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ZodEnum.prototype, "enum", {
        get: function () {
            var enumValues = {};
            for (var _i = 0, _a = this._def.values; _i < _a.length; _i++) {
                var val = _a[_i];
                enumValues[val] = val;
            }
            return enumValues;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ZodEnum.prototype, "Values", {
        get: function () {
            var enumValues = {};
            for (var _i = 0, _a = this._def.values; _i < _a.length; _i++) {
                var val = _a[_i];
                enumValues[val] = val;
            }
            return enumValues;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ZodEnum.prototype, "Enum", {
        get: function () {
            var enumValues = {};
            for (var _i = 0, _a = this._def.values; _i < _a.length; _i++) {
                var val = _a[_i];
                enumValues[val] = val;
            }
            return enumValues;
        },
        enumerable: true,
        configurable: true
    });
    ZodEnum.create = function (values) {
        return new ZodEnum({
            t: z.ZodTypes.enum,
            values: values,
        });
    };
    return ZodEnum;
}(z.ZodType));
exports.ZodEnum = ZodEnum;
//# sourceMappingURL=enum.js.map

/***/ }),

/***/ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/function.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/function.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var z = __importStar(__webpack_require__(/*! ./base */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/base.js"));
var tuple_1 = __webpack_require__(/*! ./tuple */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/tuple.js");
var unknown_1 = __webpack_require__(/*! ./unknown */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/unknown.js");
var ZodFunction = /** @class */ (function (_super) {
    __extends(ZodFunction, _super);
    function ZodFunction() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.args = function () {
            var items = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                items[_i] = arguments[_i];
            }
            return new ZodFunction(__assign({}, _this._def, { args: tuple_1.ZodTuple.create(items) }));
        };
        _this.returns = function (returnType) {
            return new ZodFunction(__assign({}, _this._def, { returns: returnType }));
        };
        _this.implement = function (func) {
            var validatedFunc = _this.parse(func);
            return validatedFunc;
        };
        _this.validate = _this.implement;
        // opt optional: () => ZodUnion<[this, ZodUndefined]> = () => ZodUnion.create([this, ZodUndefined.create()]);
        // null nullable: () => ZodUnion<[this, ZodNull]> = () => ZodUnion.create([this, ZodNull.create()]);
        _this.toJSON = function () {
            return {
                t: _this._def.t,
                args: _this._def.args.toJSON(),
                returns: _this._def.returns.toJSON(),
            };
        };
        return _this;
    }
    ZodFunction.create = function (args, returns) {
        return new ZodFunction({
            t: z.ZodTypes.function,
            args: args || tuple_1.ZodTuple.create([]),
            returns: returns || unknown_1.ZodUnknown.create(),
        });
    };
    return ZodFunction;
}(z.ZodType));
exports.ZodFunction = ZodFunction;
//# sourceMappingURL=function.js.map

/***/ }),

/***/ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/intersection.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/intersection.js ***!
  \********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var z = __importStar(__webpack_require__(/*! ./base */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/base.js"));
var ZodIntersection = /** @class */ (function (_super) {
    __extends(ZodIntersection, _super);
    function ZodIntersection() {
        // opt optional: () => ZodUnion<[this, ZodUndefined]> = () => ZodUnion.create([this, ZodUndefined.create()]);
        var _this = _super !== null && _super.apply(this, arguments) || this;
        // null nullable: () => ZodUnion<[this, ZodNull]> = () => ZodUnion.create([this, ZodNull.create()]);
        _this.toJSON = function () { return ({
            t: _this._def.t,
            left: _this._def.left.toJSON(),
            right: _this._def.right.toJSON(),
        }); };
        return _this;
    }
    ZodIntersection.create = function (left, right) {
        return new ZodIntersection({
            t: z.ZodTypes.intersection,
            left: left,
            right: right,
        });
    };
    return ZodIntersection;
}(z.ZodType));
exports.ZodIntersection = ZodIntersection;
//# sourceMappingURL=intersection.js.map

/***/ }),

/***/ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/keyof.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/keyof.js ***!
  \*************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var z = __importStar(__webpack_require__(/*! ./base */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/base.js"));
var ZodKeyof = /** @class */ (function (_super) {
    __extends(ZodKeyof, _super);
    function ZodKeyof() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.toJSON = function () { return ({
            t: _this._def.t,
            values: _this._def.values.map(function (x) { return x.toString(); }),
        }); };
        return _this;
    }
    ZodKeyof.create = function (object) {
        return new ZodKeyof({
            t: z.ZodTypes.keyof,
            // Note that this cast is not correct in the general case
            // See e.g. https://github.com/Microsoft/TypeScript/issues/12870
            values: Object.keys(object),
        });
    };
    return ZodKeyof;
}(z.ZodType));
exports.ZodKeyof = ZodKeyof;
//# sourceMappingURL=keyof.js.map

/***/ }),

/***/ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/lazy.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/lazy.js ***!
  \************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var z = __importStar(__webpack_require__(/*! ./base */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/base.js"));
var ZodLazy = /** @class */ (function (_super) {
    __extends(ZodLazy, _super);
    function ZodLazy() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        // opt optional: () => ZodUnion<[this, ZodUndefined]> = () => ZodUnion.create([this, ZodUndefined.create()]);
        // null nullable: () => ZodUnion<[this, ZodNull]> = () => ZodUnion.create([this, ZodNull.create()]);
        _this.toJSON = function () {
            throw new Error("Can't JSONify recursive structure");
        };
        return _this;
    }
    Object.defineProperty(ZodLazy.prototype, "schema", {
        get: function () {
            return this._def.getter();
        },
        enumerable: true,
        configurable: true
    });
    ZodLazy.create = function (getter) {
        return new ZodLazy({
            t: z.ZodTypes.lazy,
            getter: getter,
        });
    };
    return ZodLazy;
}(z.ZodType));
exports.ZodLazy = ZodLazy;
//# sourceMappingURL=lazy.js.map

/***/ }),

/***/ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/literal.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/literal.js ***!
  \***************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var z = __importStar(__webpack_require__(/*! ./base */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/base.js"));
var ZodLiteral = /** @class */ (function (_super) {
    __extends(ZodLiteral, _super);
    function ZodLiteral() {
        // opt optional: () => ZodUnion<[this, ZodUndefined]> = () => ZodUnion.create([this, ZodUndefined.create()]);
        var _this = _super !== null && _super.apply(this, arguments) || this;
        // null nullable: () => ZodUnion<[this, ZodNull]> = () => ZodUnion.create([this, ZodNull.create()]);
        _this.toJSON = function () { return _this._def; };
        return _this;
    }
    ZodLiteral.create = function (value) {
        return new ZodLiteral({
            t: z.ZodTypes.literal,
            value: value,
        });
    };
    return ZodLiteral;
}(z.ZodType));
exports.ZodLiteral = ZodLiteral;
//# sourceMappingURL=literal.js.map

/***/ }),

/***/ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/nativeEnum.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/nativeEnum.js ***!
  \******************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var z = __importStar(__webpack_require__(/*! ./base */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/base.js"));
var ZodNativeEnum = /** @class */ (function (_super) {
    __extends(ZodNativeEnum, _super);
    function ZodNativeEnum() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.toJSON = function () { return _this._def; };
        return _this;
    }
    ZodNativeEnum.create = function (values) {
        return new ZodNativeEnum({
            t: z.ZodTypes.nativeEnum,
            values: values,
        });
    };
    return ZodNativeEnum;
}(z.ZodType));
exports.ZodNativeEnum = ZodNativeEnum;
//# sourceMappingURL=nativeEnum.js.map

/***/ }),

/***/ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/null.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/null.js ***!
  \************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var z = __importStar(__webpack_require__(/*! ./base */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/base.js"));
var ZodNull = /** @class */ (function (_super) {
    __extends(ZodNull, _super);
    function ZodNull() {
        // opt optional: () => ZodUnion<[this, ZodUndefined]> = () => ZodUnion.create([this, ZodUndefined.create()]);
        var _this = _super !== null && _super.apply(this, arguments) || this;
        // null nullable: () => ZodUnion<[this, ZodNull]> = () => ZodUnion.create([this, ZodNull.create()]);
        _this.toJSON = function () { return _this._def; };
        return _this;
    }
    ZodNull.create = function () {
        return new ZodNull({
            t: z.ZodTypes.null,
        });
    };
    return ZodNull;
}(z.ZodType));
exports.ZodNull = ZodNull;
//# sourceMappingURL=null.js.map

/***/ }),

/***/ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/number.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/number.js ***!
  \**************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var z = __importStar(__webpack_require__(/*! ./base */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/base.js"));
// import { ZodUndefined } from './undefined';
// import { ZodNull } from './null';
// import { ZodUnion } from './union';
var ZodError_1 = __webpack_require__(/*! ../ZodError */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/ZodError.js");
var errorUtil_1 = __webpack_require__(/*! ../helpers/errorUtil */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/helpers/errorUtil.js");
var ZodNumber = /** @class */ (function (_super) {
    __extends(ZodNumber, _super);
    function ZodNumber() {
        // opt optional: () => ZodUnion<[this, ZodUndefined]> = () => ZodUnion.create([this, ZodUndefined.create()]);
        var _this = _super !== null && _super.apply(this, arguments) || this;
        // null nullable: () => ZodUnion<[this, ZodNull]> = () => ZodUnion.create([this, ZodNull.create()]);
        _this.toJSON = function () { return _this._def; };
        _this.min = function (minimum, message) {
            return _this._refinement(__assign({ check: function (data) { return data >= minimum; }, code: ZodError_1.ZodErrorCode.too_small, minimum: minimum, type: 'number', inclusive: true }, errorUtil_1.errorUtil.errToObj(message)));
        };
        _this.max = function (maximum, message) {
            return _this._refinement(__assign({ check: function (data) { return data <= maximum; }, code: ZodError_1.ZodErrorCode.too_big, maximum: maximum, type: 'number', inclusive: true }, errorUtil_1.errorUtil.errToObj(message)));
        };
        _this.int = function (message) {
            return _this._refinement(__assign({ check: function (data) { return Number.isInteger(data); }, code: ZodError_1.ZodErrorCode.invalid_type, expected: 'integer', received: 'number' }, errorUtil_1.errorUtil.errToObj(message)));
        };
        _this.positive = function (message) {
            return _this._refinement(__assign({ check: function (data) { return data > 0; }, code: ZodError_1.ZodErrorCode.too_small, minimum: 0, type: 'number', inclusive: false }, errorUtil_1.errorUtil.errToObj(message)));
        };
        _this.negative = function (message) {
            return _this._refinement(__assign({ check: function (data) { return data < 0; }, code: ZodError_1.ZodErrorCode.too_big, maximum: 0, type: 'number', inclusive: false }, errorUtil_1.errorUtil.errToObj(message)));
        };
        _this.nonpositive = function (message) {
            return _this._refinement(__assign({ check: function (data) { return data <= 0; }, code: ZodError_1.ZodErrorCode.too_big, maximum: 0, type: 'number', inclusive: true }, errorUtil_1.errorUtil.errToObj(message)));
        };
        _this.nonnegative = function (message) {
            return _this._refinement(__assign({ check: function (data) { return data >= 0; }, code: ZodError_1.ZodErrorCode.too_small, minimum: 0, type: 'number', inclusive: true }, errorUtil_1.errorUtil.errToObj(message)));
        };
        return _this;
    }
    ZodNumber.create = function () {
        return new ZodNumber({
            t: z.ZodTypes.number,
        });
    };
    return ZodNumber;
}(z.ZodType));
exports.ZodNumber = ZodNumber;
//# sourceMappingURL=number.js.map

/***/ }),

/***/ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/object.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/object.js ***!
  \**************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var z = __importStar(__webpack_require__(/*! ./base */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/base.js"));
var objectUtil_1 = __webpack_require__(/*! ../helpers/objectUtil */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/helpers/objectUtil.js");
var isScalar_1 = __webpack_require__(/*! ../isScalar */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/isScalar.js");
var AugmentFactory = function (def) { return function (augmentation) {
    return new ZodObject(__assign({}, def, { shape: function () { return (__assign({}, def.shape(), augmentation)); } }));
}; };
var objectDefToJson = function (def) { return ({
    t: def.t,
    shape: Object.assign({}, Object.keys(def.shape()).map(function (k) {
        var _a;
        return (_a = {},
            _a[k] = def.shape()[k].toJSON(),
            _a);
    })),
}); };
var ZodObject = /** @class */ (function (_super) {
    __extends(ZodObject, _super);
    function ZodObject() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.toJSON = function () { return objectDefToJson(_this._def); };
        _this.nonstrict = function () {
            return new ZodObject({
                shape: _this._def.shape,
                t: z.ZodTypes.object,
                params: __assign({}, _this._params, { strict: false }),
            });
        };
        // opt optional: () => ZodUnion<[this, ZodUndefined]> = () => ZodUnion.create([this, ZodUndefined.create()]);
        // nullable: () => ZodUnion<[this, ZodNull]> = () => ZodUnion.create([this, ZodNull.create()]);
        _this.augment = AugmentFactory(_this._def);
        _this.extend = AugmentFactory(_this._def);
        /**
         * Prior to zod@1.0.12 there was a bug in the
         * inferred type of merged objects. Please
         * upgrade if you are experiencing issues.
         */
        _this.merge = objectUtil_1.objectUtil.mergeObjects(_this);
        _this.pick = function (mask) {
            var shape = {};
            Object.keys(mask).map(function (key) {
                shape[key] = _this.shape[key];
            });
            return new ZodObject(__assign({}, _this._def, { shape: function () { return shape; } }));
        };
        _this.omit = function (mask) {
            var shape = {};
            Object.keys(_this.shape).map(function (key) {
                if (Object.keys(mask).indexOf(key) === -1) {
                    shape[key] = _this.shape[key];
                }
            });
            return new ZodObject(__assign({}, _this._def, { shape: function () { return shape; } }));
        };
        _this.partial = function () {
            var newShape = {};
            for (var key in _this.shape) {
                newShape[key] = _this.shape[key].optional();
            }
            return new ZodObject(__assign({}, _this._def, { shape: function () { return newShape; } }));
        };
        _this.primitives = function () {
            var newShape = {};
            for (var key in _this.shape) {
                if (isScalar_1.isScalar(_this.shape[key])) {
                    newShape[key] = _this.shape[key];
                }
            }
            return new ZodObject(__assign({}, _this._def, { shape: function () { return newShape; } }));
        };
        _this.nonprimitives = function () {
            var newShape = {};
            for (var key in _this.shape) {
                if (!isScalar_1.isScalar(_this.shape[key])) {
                    newShape[key] = _this.shape[key];
                }
            }
            return new ZodObject(__assign({}, _this._def, { shape: function () { return newShape; } }));
        };
        _this.deepPartial = function () {
            var newShape = {};
            for (var key in _this.shape) {
                var fieldSchema = _this.shape[key];
                if (fieldSchema instanceof ZodObject) {
                    newShape[key] = fieldSchema.deepPartial().optional();
                }
                else {
                    newShape[key] = _this.shape[key].optional();
                }
            }
            return new ZodObject(__assign({}, _this._def, { shape: function () { return newShape; } }));
        };
        return _this;
    }
    Object.defineProperty(ZodObject.prototype, "shape", {
        get: function () {
            return this._def.shape();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ZodObject.prototype, "params", {
        get: function () {
            return this._def.params;
        },
        enumerable: true,
        configurable: true
    });
    ZodObject.create = function (shape) {
        return new ZodObject({
            t: z.ZodTypes.object,
            shape: function () { return shape; },
            params: {
                strict: true,
            },
        });
    };
    ZodObject.lazycreate = function (shape) {
        return new ZodObject({
            t: z.ZodTypes.object,
            shape: shape,
            params: {
                strict: true,
            },
        });
    };
    return ZodObject;
}(z.ZodType));
exports.ZodObject = ZodObject;
//# sourceMappingURL=object.js.map

/***/ }),

/***/ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/promise.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/promise.js ***!
  \***************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var z = __importStar(__webpack_require__(/*! ./base */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/base.js"));
var ZodPromise = /** @class */ (function (_super) {
    __extends(ZodPromise, _super);
    function ZodPromise() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.toJSON = function () {
            return {
                t: _this._def.t,
                type: _this._def.type.toJSON(),
            };
        };
        return _this;
    }
    // opt optional: () => ZodUnion<[this, ZodUndefined]> = () => ZodUnion.create([this, ZodUndefined.create()]);
    // null nullable: () => ZodUnion<[this, ZodNull]> = () => ZodUnion.create([this, ZodNull.create()]);
    ZodPromise.create = function (schema) {
        return new ZodPromise({
            t: z.ZodTypes.promise,
            type: schema,
        });
    };
    return ZodPromise;
}(z.ZodType));
exports.ZodPromise = ZodPromise;
//# sourceMappingURL=promise.js.map

/***/ }),

/***/ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/record.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/record.js ***!
  \**************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var z = __importStar(__webpack_require__(/*! ./base */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/base.js"));
var ZodRecord = /** @class */ (function (_super) {
    __extends(ZodRecord, _super);
    function ZodRecord() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.toJSON = function () { return ({
            t: _this._def.t,
            valueType: _this._def.valueType.toJSON(),
        }); };
        return _this;
    }
    // opt optional: () => ZodUnion<[this, ZodUndefined]> = () => ZodUnion.create([this, ZodUndefined.create()]);
    // null nullable: () => ZodUnion<[this, ZodNull]> = () => ZodUnion.create([this, ZodNull.create()]);
    ZodRecord.create = function (valueType) {
        return new ZodRecord({
            t: z.ZodTypes.record,
            valueType: valueType,
        });
    };
    return ZodRecord;
}(z.ZodType));
exports.ZodRecord = ZodRecord;
//# sourceMappingURL=record.js.map

/***/ }),

/***/ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/string.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/string.js ***!
  \**************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var z = __importStar(__webpack_require__(/*! ./base */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/base.js"));
// import { ZodUndefined } from './undefined';
// import { ZodNull } from './null';
// import { ZodUnion } from './union';
var ZodError_1 = __webpack_require__(/*! ../ZodError */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/ZodError.js");
var errorUtil_1 = __webpack_require__(/*! ../helpers/errorUtil */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/helpers/errorUtil.js");
var emailRegex = /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i;
var uuidRegex = /^[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}$/i;
var ZodString = /** @class */ (function (_super) {
    __extends(ZodString, _super);
    function ZodString() {
        // opt optional: () => ZodUnion<[this, ZodUndefined]> = () => ZodUnion.create([this, ZodUndefined.create()]);
        var _this = _super !== null && _super.apply(this, arguments) || this;
        // null nullable: () => ZodUnion<[this, ZodNull]> = () => ZodUnion.create([this, ZodNull.create()]);
        _this.toJSON = function () { return _this._def; };
        _this.min = function (minLength, message) {
            return _this._refinement(__assign({ check: function (data) { return data.length >= minLength; }, code: ZodError_1.ZodErrorCode.too_small, minimum: minLength, type: 'string', inclusive: true }, errorUtil_1.errorUtil.errToObj(message)));
        };
        _this.max = function (maxLength, message) {
            return _this._refinement(__assign({ check: function (data) { return data.length <= maxLength; }, code: ZodError_1.ZodErrorCode.too_big, maximum: maxLength, type: 'string', inclusive: true }, errorUtil_1.errorUtil.errToObj(message)));
        };
        _this._regex = function (regex, validation, message) {
            return _this._refinement(__assign({ validation: validation, code: ZodError_1.ZodErrorCode.invalid_string, check: function (data) { return regex.test(data); } }, errorUtil_1.errorUtil.errToObj(message)));
        };
        _this.email = function (message) {
            return _this._regex(emailRegex, 'email', message);
        };
        _this.url = function (message) {
            return _this._refinement(__assign({ check: function (data) {
                    try {
                        new URL(data);
                        return true;
                    }
                    catch (_a) {
                        return false;
                    }
                }, code: ZodError_1.ZodErrorCode.invalid_string, validation: 'url' }, errorUtil_1.errorUtil.errToObj(message)));
        };
        // url = (message?: errorUtil.ErrMessage) => this._regex(urlRegex, 'url', message);
        _this.uuid = function (message) {
            return _this._regex(uuidRegex, 'uuid', message);
        };
        _this.regex = function (regexp, message) {
            return _this._regex(regexp, 'regex', message);
        };
        _this.nonempty = function (message) {
            return _this.min(1, errorUtil_1.errorUtil.errToObj(message));
        };
        return _this;
    }
    ZodString.prototype.length = function (len, message) {
        return this.min(len, message).max(len, message);
    };
    ZodString.create = function () {
        return new ZodString({
            t: z.ZodTypes.string,
            validation: {},
        });
    };
    return ZodString;
}(z.ZodType));
exports.ZodString = ZodString;
//# sourceMappingURL=string.js.map

/***/ }),

/***/ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/tuple.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/tuple.js ***!
  \*************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var z = __importStar(__webpack_require__(/*! ./base */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/base.js"));
var ZodTuple = /** @class */ (function (_super) {
    __extends(ZodTuple, _super);
    function ZodTuple() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.toJSON = function () { return ({
            t: _this._def.t,
            items: _this._def.items.map(function (item) { return item.toJSON(); }),
        }); };
        return _this;
    }
    // opt optional: () => ZodUnion<[this, ZodUndefined]> = () => ZodUnion.create([this, ZodUndefined.create()]);
    // null nullable: () => ZodUnion<[this, ZodNull]> = () => ZodUnion.create([this, ZodNull.create()]);
    ZodTuple.create = function (schemas) {
        return new ZodTuple({
            t: z.ZodTypes.tuple,
            items: schemas,
        });
    };
    return ZodTuple;
}(z.ZodType));
exports.ZodTuple = ZodTuple;
//# sourceMappingURL=tuple.js.map

/***/ }),

/***/ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/undefined.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/undefined.js ***!
  \*****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var z = __importStar(__webpack_require__(/*! ./base */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/base.js"));
var ZodUndefined = /** @class */ (function (_super) {
    __extends(ZodUndefined, _super);
    function ZodUndefined() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.toJSON = function () { return _this._def; };
        return _this;
    }
    // opt optional: () => ZodUnion<[this, ZodUndefined]> = () => ZodUnion.create([this, ZodUndefined.create()]);
    // null nullable: () => ZodUnion<[this, ZodNull]> = () => ZodUnion.create([this, ZodNull.create()]);
    ZodUndefined.create = function () {
        return new ZodUndefined({
            t: z.ZodTypes.undefined,
        });
    };
    return ZodUndefined;
}(z.ZodType));
exports.ZodUndefined = ZodUndefined;
//# sourceMappingURL=undefined.js.map

/***/ }),

/***/ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/union.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/union.js ***!
  \*************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var z = __importStar(__webpack_require__(/*! ./base */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/base.js"));
var ZodUnion = /** @class */ (function (_super) {
    __extends(ZodUnion, _super);
    function ZodUnion() {
        // opt optional: () => ZodUnion<[this, ZodUndefined]> = () => ZodUnion.create([this, ZodUndefined.create()]);
        var _this = _super !== null && _super.apply(this, arguments) || this;
        // null nullable: () => ZodUnion<[this, ZodNull]> = () => ZodUnion.create([this, ZodNull.create()]);
        _this.toJSON = function () { return ({
            t: _this._def.t,
            options: _this._def.options.map(function (x) { return x.toJSON(); }),
        }); };
        return _this;
    }
    // distribute = <F extends (arg: T[number]) => z.ZodTypeAny>(f: F): ZodUnion<{ [k in keyof T]: ReturnType<F> }> => {
    //   return ZodUnion.create(this._def.options.map(f) as any);
    // };
    ZodUnion.create = function (types) {
        return new ZodUnion({
            t: z.ZodTypes.union,
            options: types,
        });
    };
    return ZodUnion;
}(z.ZodType));
exports.ZodUnion = ZodUnion;
//# sourceMappingURL=union.js.map

/***/ }),

/***/ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/unknown.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/unknown.js ***!
  \***************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var z = __importStar(__webpack_require__(/*! ./base */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/base.js"));
var ZodUnknown = /** @class */ (function (_super) {
    __extends(ZodUnknown, _super);
    function ZodUnknown() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        // opt optional: () => ZodUnion<[this, ZodUndefined]> = () => ZodUnion.create([this, ZodUndefined.create()]);
        // null nullable: () => ZodUnion<[this, ZodNull]> = () => ZodUnion.create([this, ZodNull.create()]);
        _this.toJSON = function () { return _this._def; };
        return _this;
    }
    ZodUnknown.create = function () {
        return new ZodUnknown({
            t: z.ZodTypes.unknown,
        });
    };
    return ZodUnknown;
}(z.ZodType));
exports.ZodUnknown = ZodUnknown;
//# sourceMappingURL=unknown.js.map

/***/ }),

/***/ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/void.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/void.js ***!
  \************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var z = __importStar(__webpack_require__(/*! ./base */ "./node_modules/@proton/wrap-constants/node_modules/zod/lib/src/types/base.js"));
var ZodVoid = /** @class */ (function (_super) {
    __extends(ZodVoid, _super);
    function ZodVoid() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        // opt optional: () => ZodUnion<[this, ZodUndefined]> = () => ZodUnion.create([this, ZodUndefined.create()]);
        // null nullable: () => ZodUnion<[this, ZodNull]> = () => ZodUnion.create([this, ZodNull.create()]);
        _this.toJSON = function () { return _this._def; };
        return _this;
    }
    ZodVoid.create = function () {
        return new ZodVoid({
            t: z.ZodTypes.void,
        });
    };
    return ZodVoid;
}(z.ZodType));
exports.ZodVoid = ZodVoid;
//# sourceMappingURL=void.js.map

/***/ }),

/***/ "./node_modules/axios/index.js":
/*!*************************************!*\
  !*** ./node_modules/axios/index.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(/*! ./lib/axios */ "./node_modules/axios/lib/axios.js");

/***/ }),

/***/ "./node_modules/axios/lib/adapters/xhr.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/adapters/xhr.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var settle = __webpack_require__(/*! ./../core/settle */ "./node_modules/axios/lib/core/settle.js");
var cookies = __webpack_require__(/*! ./../helpers/cookies */ "./node_modules/axios/lib/helpers/cookies.js");
var buildURL = __webpack_require__(/*! ./../helpers/buildURL */ "./node_modules/axios/lib/helpers/buildURL.js");
var buildFullPath = __webpack_require__(/*! ../core/buildFullPath */ "./node_modules/axios/lib/core/buildFullPath.js");
var parseHeaders = __webpack_require__(/*! ./../helpers/parseHeaders */ "./node_modules/axios/lib/helpers/parseHeaders.js");
var isURLSameOrigin = __webpack_require__(/*! ./../helpers/isURLSameOrigin */ "./node_modules/axios/lib/helpers/isURLSameOrigin.js");
var createError = __webpack_require__(/*! ../core/createError */ "./node_modules/axios/lib/core/createError.js");

module.exports = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;
    var responseType = config.responseType;

    if (utils.isFormData(requestData)) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest();

    // HTTP basic authentication
    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    var fullPath = buildFullPath(config.baseURL, config.url);
    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;

    function onloadend() {
      if (!request) {
        return;
      }
      // Prepare the response
      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !responseType || responseType === 'text' ||  responseType === 'json' ?
        request.responseText : request.response;
      var response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };

      settle(resolve, reject, response);

      // Clean up request
      request = null;
    }

    if ('onloadend' in request) {
      // Use onloadend if available
      request.onloadend = onloadend;
    } else {
      // Listen for ready state to emulate onloadend
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }

        // The request errored out and we didn't get a response, this will be
        // handled by onerror instead
        // With one exception: request that using file: protocol, most browsers
        // will return status as 0 even though it's a successful request
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
          return;
        }
        // readystate handler is calling before onerror or ontimeout handlers,
        // so we should call onloadend on the next 'tick'
        setTimeout(onloadend);
      };
    }

    // Handle browser request cancellation (as opposed to a manual cancellation)
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }

      reject(createError('Request aborted', config, 'ECONNABORTED', request));

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(createError('Network Error', config, null, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';
      if (config.timeoutErrorMessage) {
        timeoutErrorMessage = config.timeoutErrorMessage;
      }
      reject(createError(
        timeoutErrorMessage,
        config,
        config.transitional && config.transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED',
        request));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if (utils.isStandardBrowserEnv()) {
      // Add xsrf header
      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?
        cookies.read(config.xsrfCookieName) :
        undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    }

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    }

    // Add withCredentials to request if needed
    if (!utils.isUndefined(config.withCredentials)) {
      request.withCredentials = !!config.withCredentials;
    }

    // Add responseType to request if needed
    if (responseType && responseType !== 'json') {
      request.responseType = config.responseType;
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken) {
      // Handle cancellation
      config.cancelToken.promise.then(function onCanceled(cancel) {
        if (!request) {
          return;
        }

        request.abort();
        reject(cancel);
        // Clean up request
        request = null;
      });
    }

    if (!requestData) {
      requestData = null;
    }

    // Send the request
    request.send(requestData);
  });
};


/***/ }),

/***/ "./node_modules/axios/lib/axios.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/axios.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./utils */ "./node_modules/axios/lib/utils.js");
var bind = __webpack_require__(/*! ./helpers/bind */ "./node_modules/axios/lib/helpers/bind.js");
var Axios = __webpack_require__(/*! ./core/Axios */ "./node_modules/axios/lib/core/Axios.js");
var mergeConfig = __webpack_require__(/*! ./core/mergeConfig */ "./node_modules/axios/lib/core/mergeConfig.js");
var defaults = __webpack_require__(/*! ./defaults */ "./node_modules/axios/lib/defaults.js");

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context);

  // Copy axios.prototype to instance
  utils.extend(instance, Axios.prototype, context);

  // Copy context to instance
  utils.extend(instance, context);

  return instance;
}

// Create the default instance to be exported
var axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
axios.Axios = Axios;

// Factory for creating new instances
axios.create = function create(instanceConfig) {
  return createInstance(mergeConfig(axios.defaults, instanceConfig));
};

// Expose Cancel & CancelToken
axios.Cancel = __webpack_require__(/*! ./cancel/Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");
axios.CancelToken = __webpack_require__(/*! ./cancel/CancelToken */ "./node_modules/axios/lib/cancel/CancelToken.js");
axios.isCancel = __webpack_require__(/*! ./cancel/isCancel */ "./node_modules/axios/lib/cancel/isCancel.js");

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = __webpack_require__(/*! ./helpers/spread */ "./node_modules/axios/lib/helpers/spread.js");

// Expose isAxiosError
axios.isAxiosError = __webpack_require__(/*! ./helpers/isAxiosError */ "./node_modules/axios/lib/helpers/isAxiosError.js");

module.exports = axios;

// Allow use of default import syntax in TypeScript
module.exports["default"] = axios;


/***/ }),

/***/ "./node_modules/axios/lib/cancel/Cancel.js":
/*!*************************************************!*\
  !*** ./node_modules/axios/lib/cancel/Cancel.js ***!
  \*************************************************/
/***/ ((module) => {

"use strict";


/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */
function Cancel(message) {
  this.message = message;
}

Cancel.prototype.toString = function toString() {
  return 'Cancel' + (this.message ? ': ' + this.message : '');
};

Cancel.prototype.__CANCEL__ = true;

module.exports = Cancel;


/***/ }),

/***/ "./node_modules/axios/lib/cancel/CancelToken.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/cancel/CancelToken.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Cancel = __webpack_require__(/*! ./Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */
function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;
  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });

  var token = this;
  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new Cancel(message);
    resolvePromise(token.reason);
  });
}

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */
CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;


/***/ }),

/***/ "./node_modules/axios/lib/cancel/isCancel.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/cancel/isCancel.js ***!
  \***************************************************/
/***/ ((module) => {

"use strict";


module.exports = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};


/***/ }),

/***/ "./node_modules/axios/lib/core/Axios.js":
/*!**********************************************!*\
  !*** ./node_modules/axios/lib/core/Axios.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var buildURL = __webpack_require__(/*! ../helpers/buildURL */ "./node_modules/axios/lib/helpers/buildURL.js");
var InterceptorManager = __webpack_require__(/*! ./InterceptorManager */ "./node_modules/axios/lib/core/InterceptorManager.js");
var dispatchRequest = __webpack_require__(/*! ./dispatchRequest */ "./node_modules/axios/lib/core/dispatchRequest.js");
var mergeConfig = __webpack_require__(/*! ./mergeConfig */ "./node_modules/axios/lib/core/mergeConfig.js");
var validator = __webpack_require__(/*! ../helpers/validator */ "./node_modules/axios/lib/helpers/validator.js");

var validators = validator.validators;
/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */
function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */
Axios.prototype.request = function request(config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof config === 'string') {
    config = arguments[1] || {};
    config.url = arguments[0];
  } else {
    config = config || {};
  }

  config = mergeConfig(this.defaults, config);

  // Set config.method
  if (config.method) {
    config.method = config.method.toLowerCase();
  } else if (this.defaults.method) {
    config.method = this.defaults.method.toLowerCase();
  } else {
    config.method = 'get';
  }

  var transitional = config.transitional;

  if (transitional !== undefined) {
    validator.assertOptions(transitional, {
      silentJSONParsing: validators.transitional(validators.boolean, '1.0.0'),
      forcedJSONParsing: validators.transitional(validators.boolean, '1.0.0'),
      clarifyTimeoutError: validators.transitional(validators.boolean, '1.0.0')
    }, false);
  }

  // filter out skipped interceptors
  var requestInterceptorChain = [];
  var synchronousRequestInterceptors = true;
  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
      return;
    }

    synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

    requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
  });

  var responseInterceptorChain = [];
  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
  });

  var promise;

  if (!synchronousRequestInterceptors) {
    var chain = [dispatchRequest, undefined];

    Array.prototype.unshift.apply(chain, requestInterceptorChain);
    chain = chain.concat(responseInterceptorChain);

    promise = Promise.resolve(config);
    while (chain.length) {
      promise = promise.then(chain.shift(), chain.shift());
    }

    return promise;
  }


  var newConfig = config;
  while (requestInterceptorChain.length) {
    var onFulfilled = requestInterceptorChain.shift();
    var onRejected = requestInterceptorChain.shift();
    try {
      newConfig = onFulfilled(newConfig);
    } catch (error) {
      onRejected(error);
      break;
    }
  }

  try {
    promise = dispatchRequest(newConfig);
  } catch (error) {
    return Promise.reject(error);
  }

  while (responseInterceptorChain.length) {
    promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
  }

  return promise;
};

Axios.prototype.getUri = function getUri(config) {
  config = mergeConfig(this.defaults, config);
  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
};

// Provide aliases for supported request methods
utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: (config || {}).data
    }));
  };
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, data, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});

module.exports = Axios;


/***/ }),

/***/ "./node_modules/axios/lib/core/InterceptorManager.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/core/InterceptorManager.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

function InterceptorManager() {
  this.handlers = [];
}

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */
InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected,
    synchronous: options ? options.synchronous : false,
    runWhen: options ? options.runWhen : null
  });
  return this.handlers.length - 1;
};

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */
InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */
InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

module.exports = InterceptorManager;


/***/ }),

/***/ "./node_modules/axios/lib/core/buildFullPath.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/buildFullPath.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var isAbsoluteURL = __webpack_require__(/*! ../helpers/isAbsoluteURL */ "./node_modules/axios/lib/helpers/isAbsoluteURL.js");
var combineURLs = __webpack_require__(/*! ../helpers/combineURLs */ "./node_modules/axios/lib/helpers/combineURLs.js");

/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 * @returns {string} The combined full path
 */
module.exports = function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
};


/***/ }),

/***/ "./node_modules/axios/lib/core/createError.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/createError.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var enhanceError = __webpack_require__(/*! ./enhanceError */ "./node_modules/axios/lib/core/enhanceError.js");

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */
module.exports = function createError(message, config, code, request, response) {
  var error = new Error(message);
  return enhanceError(error, config, code, request, response);
};


/***/ }),

/***/ "./node_modules/axios/lib/core/dispatchRequest.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/core/dispatchRequest.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var transformData = __webpack_require__(/*! ./transformData */ "./node_modules/axios/lib/core/transformData.js");
var isCancel = __webpack_require__(/*! ../cancel/isCancel */ "./node_modules/axios/lib/cancel/isCancel.js");
var defaults = __webpack_require__(/*! ../defaults */ "./node_modules/axios/lib/defaults.js");

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */
module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  // Ensure headers exist
  config.headers = config.headers || {};

  // Transform request data
  config.data = transformData.call(
    config,
    config.data,
    config.headers,
    config.transformRequest
  );

  // Flatten headers
  config.headers = utils.merge(
    config.headers.common || {},
    config.headers[config.method] || {},
    config.headers
  );

  utils.forEach(
    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
    function cleanHeaderConfig(method) {
      delete config.headers[method];
    }
  );

  var adapter = config.adapter || defaults.adapter;

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData.call(
      config,
      response.data,
      response.headers,
      config.transformResponse
    );

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData.call(
          config,
          reason.response.data,
          reason.response.headers,
          config.transformResponse
        );
      }
    }

    return Promise.reject(reason);
  });
};


/***/ }),

/***/ "./node_modules/axios/lib/core/enhanceError.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/core/enhanceError.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";


/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */
module.exports = function enhanceError(error, config, code, request, response) {
  error.config = config;
  if (code) {
    error.code = code;
  }

  error.request = request;
  error.response = response;
  error.isAxiosError = true;

  error.toJSON = function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: this.config,
      code: this.code
    };
  };
  return error;
};


/***/ }),

/***/ "./node_modules/axios/lib/core/mergeConfig.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/mergeConfig.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */
module.exports = function mergeConfig(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  var config = {};

  var valueFromConfig2Keys = ['url', 'method', 'data'];
  var mergeDeepPropertiesKeys = ['headers', 'auth', 'proxy', 'params'];
  var defaultToConfig2Keys = [
    'baseURL', 'transformRequest', 'transformResponse', 'paramsSerializer',
    'timeout', 'timeoutMessage', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName',
    'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress', 'decompress',
    'maxContentLength', 'maxBodyLength', 'maxRedirects', 'transport', 'httpAgent',
    'httpsAgent', 'cancelToken', 'socketPath', 'responseEncoding'
  ];
  var directMergeKeys = ['validateStatus'];

  function getMergedValue(target, source) {
    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
      return utils.merge(target, source);
    } else if (utils.isPlainObject(source)) {
      return utils.merge({}, source);
    } else if (utils.isArray(source)) {
      return source.slice();
    }
    return source;
  }

  function mergeDeepProperties(prop) {
    if (!utils.isUndefined(config2[prop])) {
      config[prop] = getMergedValue(config1[prop], config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      config[prop] = getMergedValue(undefined, config1[prop]);
    }
  }

  utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      config[prop] = getMergedValue(undefined, config2[prop]);
    }
  });

  utils.forEach(mergeDeepPropertiesKeys, mergeDeepProperties);

  utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      config[prop] = getMergedValue(undefined, config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      config[prop] = getMergedValue(undefined, config1[prop]);
    }
  });

  utils.forEach(directMergeKeys, function merge(prop) {
    if (prop in config2) {
      config[prop] = getMergedValue(config1[prop], config2[prop]);
    } else if (prop in config1) {
      config[prop] = getMergedValue(undefined, config1[prop]);
    }
  });

  var axiosKeys = valueFromConfig2Keys
    .concat(mergeDeepPropertiesKeys)
    .concat(defaultToConfig2Keys)
    .concat(directMergeKeys);

  var otherKeys = Object
    .keys(config1)
    .concat(Object.keys(config2))
    .filter(function filterAxiosKeys(key) {
      return axiosKeys.indexOf(key) === -1;
    });

  utils.forEach(otherKeys, mergeDeepProperties);

  return config;
};


/***/ }),

/***/ "./node_modules/axios/lib/core/settle.js":
/*!***********************************************!*\
  !*** ./node_modules/axios/lib/core/settle.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var createError = __webpack_require__(/*! ./createError */ "./node_modules/axios/lib/core/createError.js");

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */
module.exports = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(createError(
      'Request failed with status code ' + response.status,
      response.config,
      null,
      response.request,
      response
    ));
  }
};


/***/ }),

/***/ "./node_modules/axios/lib/core/transformData.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/transformData.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var defaults = __webpack_require__(/*! ./../defaults */ "./node_modules/axios/lib/defaults.js");

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */
module.exports = function transformData(data, headers, fns) {
  var context = this || defaults;
  /*eslint no-param-reassign:0*/
  utils.forEach(fns, function transform(fn) {
    data = fn.call(context, data, headers);
  });

  return data;
};


/***/ }),

/***/ "./node_modules/axios/lib/defaults.js":
/*!********************************************!*\
  !*** ./node_modules/axios/lib/defaults.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(/*! process/browser.js */ "./node_modules/process/browser.js");


var utils = __webpack_require__(/*! ./utils */ "./node_modules/axios/lib/utils.js");
var normalizeHeaderName = __webpack_require__(/*! ./helpers/normalizeHeaderName */ "./node_modules/axios/lib/helpers/normalizeHeaderName.js");
var enhanceError = __webpack_require__(/*! ./core/enhanceError */ "./node_modules/axios/lib/core/enhanceError.js");

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;
  if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = __webpack_require__(/*! ./adapters/xhr */ "./node_modules/axios/lib/adapters/xhr.js");
  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
    // For node use HTTP adapter
    adapter = __webpack_require__(/*! ./adapters/http */ "./node_modules/axios/lib/adapters/xhr.js");
  }
  return adapter;
}

function stringifySafely(rawValue, parser, encoder) {
  if (utils.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils.trim(rawValue);
    } catch (e) {
      if (e.name !== 'SyntaxError') {
        throw e;
      }
    }
  }

  return (encoder || JSON.stringify)(rawValue);
}

var defaults = {

  transitional: {
    silentJSONParsing: true,
    forcedJSONParsing: true,
    clarifyTimeoutError: false
  },

  adapter: getDefaultAdapter(),

  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Accept');
    normalizeHeaderName(headers, 'Content-Type');

    if (utils.isFormData(data) ||
      utils.isArrayBuffer(data) ||
      utils.isBuffer(data) ||
      utils.isStream(data) ||
      utils.isFile(data) ||
      utils.isBlob(data)
    ) {
      return data;
    }
    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }
    if (utils.isObject(data) || (headers && headers['Content-Type'] === 'application/json')) {
      setContentTypeIfUnset(headers, 'application/json');
      return stringifySafely(data);
    }
    return data;
  }],

  transformResponse: [function transformResponse(data) {
    var transitional = this.transitional;
    var silentJSONParsing = transitional && transitional.silentJSONParsing;
    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';

    if (strictJSONParsing || (forcedJSONParsing && utils.isString(data) && data.length)) {
      try {
        return JSON.parse(data);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === 'SyntaxError') {
            throw enhanceError(e, this, 'E_JSON_PARSE');
          }
          throw e;
        }
      }
    }

    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,
  maxBodyLength: -1,

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  }
};

defaults.headers = {
  common: {
    'Accept': 'application/json, text/plain, */*'
  }
};

utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});

module.exports = defaults;


/***/ }),

/***/ "./node_modules/axios/lib/helpers/bind.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/helpers/bind.js ***!
  \************************************************/
/***/ ((module) => {

"use strict";


module.exports = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }
    return fn.apply(thisArg, args);
  };
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/buildURL.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/buildURL.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

function encode(val) {
  return encodeURIComponent(val).
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */
module.exports = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];

    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      } else {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(encode(key) + '=' + encode(v));
      });
    });

    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    var hashmarkIndex = url.indexOf('#');
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }

    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/combineURLs.js":
/*!*******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/combineURLs.js ***!
  \*******************************************************/
/***/ ((module) => {

"use strict";


/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */
module.exports = function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/cookies.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/helpers/cookies.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs support document.cookie
    (function standardBrowserEnv() {
      return {
        write: function write(name, value, expires, path, domain, secure) {
          var cookie = [];
          cookie.push(name + '=' + encodeURIComponent(value));

          if (utils.isNumber(expires)) {
            cookie.push('expires=' + new Date(expires).toGMTString());
          }

          if (utils.isString(path)) {
            cookie.push('path=' + path);
          }

          if (utils.isString(domain)) {
            cookie.push('domain=' + domain);
          }

          if (secure === true) {
            cookie.push('secure');
          }

          document.cookie = cookie.join('; ');
        },

        read: function read(name) {
          var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
          return (match ? decodeURIComponent(match[3]) : null);
        },

        remove: function remove(name) {
          this.write(name, '', Date.now() - 86400000);
        }
      };
    })() :

  // Non standard browser env (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return {
        write: function write() {},
        read: function read() { return null; },
        remove: function remove() {}
      };
    })()
);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isAbsoluteURL.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAbsoluteURL.js ***!
  \*********************************************************/
/***/ ((module) => {

"use strict";


/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
module.exports = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isAxiosError.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAxiosError.js ***!
  \********************************************************/
/***/ ((module) => {

"use strict";


/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */
module.exports = function isAxiosError(payload) {
  return (typeof payload === 'object') && (payload.isAxiosError === true);
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isURLSameOrigin.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isURLSameOrigin.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
    (function standardBrowserEnv() {
      var msie = /(msie|trident)/i.test(navigator.userAgent);
      var urlParsingNode = document.createElement('a');
      var originURL;

      /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
      function resolveURL(url) {
        var href = url;

        if (msie) {
        // IE needs attribute set twice to normalize properties
          urlParsingNode.setAttribute('href', href);
          href = urlParsingNode.href;
        }

        urlParsingNode.setAttribute('href', href);

        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
            urlParsingNode.pathname :
            '/' + urlParsingNode.pathname
        };
      }

      originURL = resolveURL(window.location.href);

      /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
      return function isURLSameOrigin(requestURL) {
        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
        return (parsed.protocol === originURL.protocol &&
            parsed.host === originURL.host);
      };
    })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return function isURLSameOrigin() {
        return true;
      };
    })()
);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/normalizeHeaderName.js":
/*!***************************************************************!*\
  !*** ./node_modules/axios/lib/helpers/normalizeHeaderName.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");

module.exports = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/parseHeaders.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/parseHeaders.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
var ignoreDuplicateOf = [
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
];

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */
module.exports = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) { return parsed; }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }
      if (key === 'set-cookie') {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    }
  });

  return parsed;
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/spread.js":
/*!**************************************************!*\
  !*** ./node_modules/axios/lib/helpers/spread.js ***!
  \**************************************************/
/***/ ((module) => {

"use strict";


/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */
module.exports = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/validator.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/validator.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var pkg = __webpack_require__(/*! ./../../package.json */ "./node_modules/axios/package.json");

var validators = {};

// eslint-disable-next-line func-names
['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function(type, i) {
  validators[type] = function validator(thing) {
    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
  };
});

var deprecatedWarnings = {};
var currentVerArr = pkg.version.split('.');

/**
 * Compare package versions
 * @param {string} version
 * @param {string?} thanVersion
 * @returns {boolean}
 */
function isOlderVersion(version, thanVersion) {
  var pkgVersionArr = thanVersion ? thanVersion.split('.') : currentVerArr;
  var destVer = version.split('.');
  for (var i = 0; i < 3; i++) {
    if (pkgVersionArr[i] > destVer[i]) {
      return true;
    } else if (pkgVersionArr[i] < destVer[i]) {
      return false;
    }
  }
  return false;
}

/**
 * Transitional option validator
 * @param {function|boolean?} validator
 * @param {string?} version
 * @param {string} message
 * @returns {function}
 */
validators.transitional = function transitional(validator, version, message) {
  var isDeprecated = version && isOlderVersion(version);

  function formatMessage(opt, desc) {
    return '[Axios v' + pkg.version + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
  }

  // eslint-disable-next-line func-names
  return function(value, opt, opts) {
    if (validator === false) {
      throw new Error(formatMessage(opt, ' has been removed in ' + version));
    }

    if (isDeprecated && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      // eslint-disable-next-line no-console
      console.warn(
        formatMessage(
          opt,
          ' has been deprecated since v' + version + ' and will be removed in the near future'
        )
      );
    }

    return validator ? validator(value, opt, opts) : true;
  };
};

/**
 * Assert object's properties type
 * @param {object} options
 * @param {object} schema
 * @param {boolean?} allowUnknown
 */

function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== 'object') {
    throw new TypeError('options must be an object');
  }
  var keys = Object.keys(options);
  var i = keys.length;
  while (i-- > 0) {
    var opt = keys[i];
    var validator = schema[opt];
    if (validator) {
      var value = options[opt];
      var result = value === undefined || validator(value, opt, options);
      if (result !== true) {
        throw new TypeError('option ' + opt + ' must be ' + result);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw Error('Unknown option ' + opt);
    }
  }
}

module.exports = {
  isOlderVersion: isOlderVersion,
  assertOptions: assertOptions,
  validators: validators
};


/***/ }),

/***/ "./node_modules/axios/lib/utils.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/utils.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var bind = __webpack_require__(/*! ./helpers/bind */ "./node_modules/axios/lib/helpers/bind.js");

// utils is a library of generic helper functions non-specific to axios

var toString = Object.prototype.toString;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */
function isArray(val) {
  return toString.call(val) === '[object Array]';
}

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */
function isUndefined(val) {
  return typeof val === 'undefined';
}

/**
 * Determine if a value is a Buffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Buffer, otherwise false
 */
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
function isArrayBuffer(val) {
  return toString.call(val) === '[object ArrayBuffer]';
}

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */
function isFormData(val) {
  return (typeof FormData !== 'undefined') && (val instanceof FormData);
}

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  var result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */
function isString(val) {
  return typeof val === 'string';
}

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */
function isNumber(val) {
  return typeof val === 'number';
}

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */
function isObject(val) {
  return val !== null && typeof val === 'object';
}

/**
 * Determine if a value is a plain Object
 *
 * @param {Object} val The value to test
 * @return {boolean} True if value is a plain Object, otherwise false
 */
function isPlainObject(val) {
  if (toString.call(val) !== '[object Object]') {
    return false;
  }

  var prototype = Object.getPrototypeOf(val);
  return prototype === null || prototype === Object.prototype;
}

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */
function isDate(val) {
  return toString.call(val) === '[object Date]';
}

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
function isFile(val) {
  return toString.call(val) === '[object File]';
}

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */
function isBlob(val) {
  return toString.call(val) === '[object Blob]';
}

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
function isFunction(val) {
  return toString.call(val) === '[object Function]';
}

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */
function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
function isURLSearchParams(val) {
  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
}

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */
function trim(str) {
  return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, '');
}

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */
function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
                                           navigator.product === 'NativeScript' ||
                                           navigator.product === 'NS')) {
    return false;
  }
  return (
    typeof window !== 'undefined' &&
    typeof document !== 'undefined'
  );
}

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */
function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  var result = {};
  function assignValue(val, key) {
    if (isPlainObject(result[key]) && isPlainObject(val)) {
      result[key] = merge(result[key], val);
    } else if (isPlainObject(val)) {
      result[key] = merge({}, val);
    } else if (isArray(val)) {
      result[key] = val.slice();
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */
function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}

/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 * @return {string} content value without BOM
 */
function stripBOM(content) {
  if (content.charCodeAt(0) === 0xFEFF) {
    content = content.slice(1);
  }
  return content;
}

module.exports = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isPlainObject: isPlainObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  extend: extend,
  trim: trim,
  stripBOM: stripBOM
};


/***/ }),

/***/ "./resources/js/components/ui/CurrencyDropdown.js":
/*!********************************************************!*\
  !*** ./resources/js/components/ui/CurrencyDropdown.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }





var Dropdown = function Dropdown(_ref) {
  var _options$find;

  var options = _ref.options,
      selectedOption = _ref.selectedOption,
      setSelectedOption = _ref.setSelectedOption;

  var _useState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false),
      _useState2 = _slicedToArray(_useState, 2),
      isOpen = _useState2[0],
      setOpen = _useState2[1];

  var dropdown = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null); // Open/Close on click of dropdown header

  var toggleDropdown = function toggleDropdown() {
    return setOpen(!isOpen);
  }; // Update selected option, close dropdown


  var handleItemClick = function handleItemClick(currency) {
    setSelectedOption(currency);
    setOpen(false);
  }; // Close dropdown when clicked outside


  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {
    function handleClickOutside(event) {
      if (dropdown.current && !dropdown.current.contains(event.target)) {
        setOpen(false);
      }
    }

    document.addEventListener("mousedown", handleClickOutside);
    return function () {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [dropdown]);
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)("div", {
    className: "dropdown",
    ref: dropdown,
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("div", {
      className: "dropdown-header",
      onClick: toggleDropdown,
      children: selectedOption ? (_options$find = options.find(function (option) {
        return option.currency === selectedOption.currency;
      })) === null || _options$find === void 0 ? void 0 : _options$find.currency : "select a token"
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("div", {
      className: "dropdown-body ".concat(isOpen && "open"),
      children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("ul", {
        children: (options || []).map(function (item, index) {
          return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("li", {
            className: "dropdown-item",
            id: item.currency,
            onClick: function onClick(e) {
              handleItemClick(item);
            },
            children: item.currency
          }, item.currency);
        })
      })
    })]
  });
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Dropdown);

/***/ }),

/***/ "./resources/js/components/ui/ImagesUpload.js":
/*!****************************************************!*\
  !*** ./resources/js/components/ui/ImagesUpload.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Button__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Button */ "./resources/js/components/ui/Button.js");
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }






var ImagesUpload = function ImagesUpload(_ref) {
  var setFileFields = _ref.setFileFields;

  var _useState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]),
      _useState2 = _slicedToArray(_useState, 2),
      filesPreviewArray = _useState2[0],
      setFilesPreviewArray = _useState2[1];

  var fileUploadField = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();

  var handleFilesField = function handleFilesField(event) {
    var filesList = event.target.files;
    var tempArray = [];

    for (var i = 0; i < filesList.length; i++) {
      tempArray.push(URL.createObjectURL(filesList[i]));
    }

    setFileFields(filesList);
    setFilesPreviewArray(tempArray);
  };

  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, {
    children: [filesPreviewArray.length > 0 && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
      className: "form-row images-array",
      children: (filesPreviewArray || []).map(function (url, index) {
        return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
          src: url,
          alt: ""
        }, index);
      })
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
      className: "form-row",
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
        type: "file",
        accept: "image/*",
        multiple: true,
        id: "purchase-images",
        ref: fileUploadField,
        onChange: function onChange(event) {
          return handleFilesField(event);
        },
        className: "hidden"
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_Button__WEBPACK_IMPORTED_MODULE_1__["default"], {
        onClick: function onClick() {
          return fileUploadField.current.click();
        },
        children: "Upload Images (upto 10)"
      })]
    }), filesPreviewArray.length > 10 && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
      className: "form-row error",
      children: "You can upload upto 10 images only!"
    })]
  });
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ImagesUpload);

/***/ }),

/***/ "./resources/js/constants/CurrencyList.js":
/*!************************************************!*\
  !*** ./resources/js/constants/CurrencyList.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "currencies": () => (/* binding */ currencies)
/* harmony export */ });
// Options list for dropdown
var currencies = [{
  currency: "XPR",
  contract: "eosio.token",
  decimals: "4"
}, {
  decimals: "4",
  contract: "loan.token",
  currency: "LOAN"
}, {
  currency: "FOOBAR",
  contract: "xtokens",
  decimals: "6"
}, {
  decimals: "4",
  contract: "storex",
  currency: "STRX"
}, {
  currency: "BTCL",
  contract: "wrapper",
  decimals: "8"
}, {
  currency: "XADA",
  decimals: "6",
  contract: "xtokens"
}, {
  currency: "XBCH",
  contract: "xtokens",
  decimals: "8"
}, {
  contract: "xtokens",
  decimals: "8",
  currency: "XBNB"
}, {
  currency: "XBTC",
  contract: "xtokens",
  decimals: "8"
}, {
  currency: "XBUSD",
  contract: "xtokens",
  decimals: "6"
}, {
  currency: "XDOGE",
  contract: "xtokens",
  decimals: "6"
}, {
  contract: "xtokens",
  decimals: "8",
  currency: "XDOT"
}, {
  decimals: "4",
  contract: "xtokens",
  currency: "XEOS"
}, {
  contract: "xtokens",
  decimals: "8",
  currency: "XETH"
}, {
  currency: "XLTC",
  contract: "xtokens",
  decimals: "8"
}, {
  decimals: "6",
  contract: "xtokens",
  currency: "XLUNA"
}, {
  contract: "xtokens",
  decimals: "6",
  currency: "XMDA"
}, {
  currency: "XMT",
  decimals: "8",
  contract: "xtokens"
}, {
  currency: "XPAX",
  contract: "xtokens",
  decimals: "6"
}, {
  currency: "XPAXG",
  contract: "xtokens",
  decimals: "8"
}, {
  currency: "XSOL",
  contract: "xtokens",
  decimals: "6"
}, {
  currency: "XTUSD",
  contract: "xtokens",
  decimals: "6"
}, {
  contract: "xtokens",
  decimals: "6",
  currency: "XUNI"
}, {
  currency: "XUSDC",
  contract: "xtokens",
  decimals: "6"
}, {
  contract: "xtokens",
  decimals: "6",
  currency: "XUSDT"
}, {
  contract: "xtokens",
  decimals: "6",
  currency: "XUST"
}, {
  currency: "XXRP",
  contract: "xtokens",
  decimals: "6"
}, {
  contract: "realestatese",
  currency: "MESSAGE",
  decimals: "4"
}];

/***/ }),

/***/ "./resources/js/pages/PurchaseItem.js":
/*!********************************************!*\
  !*** ./resources/js/pages/PurchaseItem.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _components_ui_Button__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/ui/Button */ "./resources/js/components/ui/Button.js");
/* harmony import */ var _components_ui_Modal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../components/ui/Modal */ "./resources/js/components/ui/Modal.js");
/* harmony import */ var _store_auth_context__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../store/auth-context */ "./resources/js/store/auth-context.js");
/* harmony import */ var _components_ui_ImagesUpload__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../components/ui/ImagesUpload */ "./resources/js/components/ui/ImagesUpload.js");
/* harmony import */ var _components_ui_CurrencyDropdown__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../components/ui/CurrencyDropdown */ "./resources/js/components/ui/CurrencyDropdown.js");
/* harmony import */ var _constants_CurrencyList__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../constants/CurrencyList */ "./resources/js/constants/CurrencyList.js");
/* harmony import */ var _store_wallet_context__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../store/wallet-context */ "./resources/js/store/wallet-context.js");
/* harmony import */ var _sdk_easyescrowSDK__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../sdk/easyescrowSDK */ "./resources/js/sdk/easyescrowSDK.js");
/* harmony import */ var react_router_dom__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! react-router-dom */ "./node_modules/react-router/index.js");
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }














var PurchaseItem = function PurchaseItem() {
  var navigate = (0,react_router_dom__WEBPACK_IMPORTED_MODULE_10__.useNavigate)();
  var ctx = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(_store_auth_context__WEBPACK_IMPORTED_MODULE_3__["default"]);
  var walletCtx = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(_store_wallet_context__WEBPACK_IMPORTED_MODULE_7__["default"]);

  var _useState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false),
      _useState2 = _slicedToArray(_useState, 2),
      successPopup = _useState2[0],
      setSuccessPopup = _useState2[1];

  var _useState3 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(""),
      _useState4 = _slicedToArray(_useState3, 2),
      error = _useState4[0],
      setError = _useState4[1];

  var _useState5 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(""),
      _useState6 = _slicedToArray(_useState5, 2),
      success = _useState6[0],
      setSuccess = _useState6[1];

  var _useState7 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(""),
      _useState8 = _slicedToArray(_useState7, 2),
      checkError = _useState8[0],
      setCheckError = _useState8[1];

  var _useState9 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false),
      _useState10 = _slicedToArray(_useState9, 2),
      loading = _useState10[0],
      setLoading = _useState10[1];

  var _useState11 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]),
      _useState12 = _slicedToArray(_useState11, 2),
      fileFields = _useState12[0],
      setFileFields = _useState12[1];

  var _useState13 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(""),
      _useState14 = _slicedToArray(_useState13, 2),
      amountError = _useState14[0],
      setAmountError = _useState14[1];

  var closeSuccessPopup = function closeSuccessPopup() {
    setSuccessPopup(false);
    navigate("/transactions");
  };

  var _useState15 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(""),
      _useState16 = _slicedToArray(_useState15, 2),
      title = _useState16[0],
      setTitle = _useState16[1];

  var _useState17 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(""),
      _useState18 = _slicedToArray(_useState17, 2),
      description = _useState18[0],
      setDescription = _useState18[1];

  var _useState19 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(""),
      _useState20 = _slicedToArray(_useState19, 2),
      amount = _useState20[0],
      setAmount = _useState20[1];

  var _useState21 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({
    currency: "Select a token",
    amount: "0"
  }),
      _useState22 = _slicedToArray(_useState21, 2),
      token = _useState22[0],
      setToken = _useState22[1];

  var _useState23 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([{
    currency: "Select a token",
    amount: "0"
  }]),
      _useState24 = _slicedToArray(_useState23, 2),
      tokens = _useState24[0],
      setTokens = _useState24[1];

  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {
    if (walletCtx.balances != [] && walletCtx.balances.length > 0) {
      setToken(walletCtx.balances[0]);
      setTokens(walletCtx.balances);
    }
  }, [walletCtx.balances]);

  var _useState25 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)("immediately"),
      _useState26 = _slicedToArray(_useState25, 2),
      transferDate = _useState26[0],
      setTransferDate = _useState26[1];

  var _useState27 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(""),
      _useState28 = _slicedToArray(_useState27, 2),
      sellerName = _useState28[0],
      setSellerName = _useState28[1];

  var _useState29 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false),
      _useState30 = _slicedToArray(_useState29, 2),
      checkExchange = _useState30[0],
      setCheckExchange = _useState30[1];

  var handlePurchaseFormSubmit = function handlePurchaseFormSubmit(event) {
    event.preventDefault();
    if (validateTransactionForm()) handelExchange();
  }; //Validate Form


  var validateTransactionForm = function validateTransactionForm() {
    if (fileFields.length > 10) return false;

    if (title == "" || description == "" || amount == "" || token.currency == "" || sellerName == "") {
      setError("All fields are required.");
      return false;
    } else if (!checkExchange) {
      setError("");
      setCheckError("Please tick the checkbox to confirm exchange");
      return false;
    } else if (parseFloat(token.amount) < parseFloat(amount)) {
      setAmountError("Insufficient amount ".concat(token.currency, " in your wallet"));
    } else {
      setError("");
      setCheckError("");
      return true;
    }
  };

  var sleep = function sleep(milliseconds) {
    var date = Date.now();
    var currentDate = null;

    do {
      currentDate = Date.now();
    } while (currentDate - date < milliseconds);
  };

  var handelExchange = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
      var formData, _ret;

      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;
              return _context2.delegateYield( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
                var authorization, deliverType, typeId, tradeToToken, tradeToAmount, expiry, escrows, myEscrows, loopId, escrowId, _iterator, _step, file;

                return _regeneratorRuntime().wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        setLoading(true);
                        authorization = [{
                          actor: ctx.auth.actor,
                          permission: ctx.auth.permission
                        }];
                        deliverType = 0;

                        if (transferDate == "immediately") {
                          deliverType = 1;
                        } else if (transferDate == "delivery") {
                          deliverType = 2;
                        }

                        typeId = 3;
                        tradeToToken = null;
                        tradeToAmount = null;
                        expiry = 0;
                        _context.next = 10;
                        return (0,_sdk_easyescrowSDK__WEBPACK_IMPORTED_MODULE_8__.startEscrow)(typeId, ctx.auth.actor, sellerName, token, tradeToToken, amount, tradeToAmount, deliverType, expiry, authorization, walletCtx.session);

                      case 10:
                        sleep(2000);
                        _context.next = 13;
                        return (0,_sdk_easyescrowSDK__WEBPACK_IMPORTED_MODULE_8__.fetchEscrows)(ctx.auth.actor);

                      case 13:
                        escrows = _context.sent;
                        myEscrows = escrows.filter(function (escrow) {
                          return escrow.from == ctx.auth.actor && typeId == 3;
                        });
                        loopId = 2;

                        if (myEscrows.length) {
                          _context.next = 25;
                          break;
                        }

                      case 17:
                        if (!(!myEscrows.length && loopId)) {
                          _context.next = 25;
                          break;
                        }

                        sleep(2000);
                        _context.next = 21;
                        return (0,_sdk_easyescrowSDK__WEBPACK_IMPORTED_MODULE_8__.fetchEscrows)(ctx.auth.actor);

                      case 21:
                        myEscrows = escrows.filter(function (escrow) {
                          return escrow.from == ctx.auth.actor && typeId == 3;
                        });
                        loopId--;
                        _context.next = 17;
                        break;

                      case 25:
                        escrowId = "0";

                        if (!myEscrows.length) {
                          _context.next = 30;
                          break;
                        }

                        escrowId = myEscrows[myEscrows.length - 1].id.toString();
                        _context.next = 32;
                        break;

                      case 30:
                        setLoading(false);
                        return _context.abrupt("return", {
                          v: void 0
                        });

                      case 32:
                        console.log("my", myEscrows);
                        formData = new FormData();
                        formData.append("type_id", 3);
                        formData.append("amount", amount);
                        formData.append("token", token.currency);
                        formData.append("trade_username", sellerName);
                        formData.append("title", title);
                        formData.append("description", description);
                        formData.append("transfer_type", transferDate);
                        formData.append("escrow_id", Number(escrowId));
                        formData.append("escrow_status", "ready");
                        _iterator = _createForOfIteratorHelper(fileFields);

                        try {
                          for (_iterator.s(); !(_step = _iterator.n()).done;) {
                            file = _step.value;
                            formData.append("image[]", file);
                          } // await startPurchase(
                          //     ctx.auth.actor,
                          //     myEscrows[myEscrows.length - 1].fromTokens[0],
                          //     authorization,
                          //     walletCtx.session
                          // );
                          // await fillEscrow(
                          //     escrowId,
                          //     3,
                          //     ctx.auth.actor,
                          //     null,
                          //     authorization,
                          //     walletCtx.session
                          // );
                          // await negoPurchase(
                          //     22,
                          //     typeId,
                          //     "escrowuser2",
                          //     ctx.auth.actor,
                          //     token,
                          //     null,
                          //     amount,
                          //     null,
                          //     deliverType,
                          //     expiry,
                          //     authorization,
                          //     walletCtx.session
                          // );
                          // console.log("----- Form Array -----");
                          // console.log(fileFields);
                          // console.log("----- Form Data -----");
                          // for (var pair of formData.entries()) {
                          //     console.log(pair[0] + ": " + pair[1]);
                          // }
                          // fetch(`${process.env.MIX_API_URL}/user/addescrow`, {
                          //     method: "POST",
                          //     body: formData,
                          //     headers: {
                          //         Authorization: "Bearer " + ctx.walletName,
                          //     },
                          // })
                          //     .then((response) => {
                          //         if (response.ok) return response.json();
                          //         throw response.status + ": " + response.statusText;
                          //     })
                          //     .then((data) => {
                          //         //console.log(data);
                          //         if (data.valid) {
                          //             setSuccessPopup(true);
                          //             setSuccess(data.message);
                          //         } else {
                          //             setError(data.message);
                          //         }
                          //         setLoading(false);
                          //     })
                          //     .catch((error) => {
                          //         setError(error);
                          //         setLoading(false);
                          //     });

                        } catch (err) {
                          _iterator.e(err);
                        } finally {
                          _iterator.f();
                        }

                      case 45:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee);
              })(), "t0", 2);

            case 2:
              _ret = _context2.t0;

              if (!(_typeof(_ret) === "object")) {
                _context2.next = 5;
                break;
              }

              return _context2.abrupt("return", _ret.v);

            case 5:
              _context2.next = 11;
              break;

            case 7:
              _context2.prev = 7;
              _context2.t1 = _context2["catch"](0);
              console.log("ERROR", _context2.t1);
              setLoading(false);

            case 11:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, null, [[0, 7]]);
    }));

    return function handelExchange() {
      return _ref.apply(this, arguments);
    };
  }();

  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxs)(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, {
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxs)("main", {
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxs)("div", {
        className: "container banner-inner",
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)("h1", {
          children: "Purchase an Item"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)("h3", {
          children: "This escrow allows any user to easily utilize a smart contract to verify and pay for any item with select cryptocurrencies"
        })]
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)("div", {
        className: "container block",
        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxs)("form", {
          onSubmit: handlePurchaseFormSubmit,
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxs)("div", {
            className: "form-row",
            children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)("label", {
              htmlFor: "purchase-title",
              children: "Add a title for the item to purchase"
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)("input", {
              type: "text",
              id: "purchase-title",
              value: title,
              onChange: function onChange(event) {
                return setTitle(event.target.value);
              }
            })]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxs)("div", {
            className: "form-row",
            children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)("label", {
              htmlFor: "purchase-desc",
              children: "Description of purchase"
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)("textarea", {
              id: "purchase-desc",
              value: description,
              onChange: function onChange(event) {
                return setDescription(event.target.value);
              }
            })]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(_components_ui_ImagesUpload__WEBPACK_IMPORTED_MODULE_4__["default"], {
            setFileFields: setFileFields
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxs)("div", {
            className: "form-row",
            children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)("label", {
              htmlFor: "purchase-amount",
              children: "Enter a numerical amount of tokens as the purchase price:"
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)("input", {
              type: "number",
              step: "0.01",
              id: "purchase-amount",
              value: amount,
              onChange: function onChange(event) {
                return setAmount(event.target.value);
              }
            })]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxs)("div", {
            className: "form-row",
            children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)("label", {
              htmlFor: "purchase_token",
              children: "Select a token:"
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(_components_ui_CurrencyDropdown__WEBPACK_IMPORTED_MODULE_5__["default"], {
              options: tokens,
              selectedOption: token,
              setSelectedOption: setToken
            })]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxs)("div", {
            className: "form-row",
            children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)("label", {
              htmlFor: "purchase_token",
              children: "Transfer Date:"
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxs)("div", {
              className: "radio",
              children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)("input", {
                type: "radio",
                id: "immediately",
                name: "purchase-date",
                value: "immediately",
                checked: transferDate == "immediately",
                onChange: function onChange() {
                  return setTransferDate("immediately");
                }
              }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)("label", {
                htmlFor: "immediately",
                children: "Immediately"
              })]
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxs)("div", {
              className: "radio",
              children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)("input", {
                type: "radio",
                id: "on-delivery",
                name: "purchase-date",
                value: "on delivery",
                checked: transferDate == "delivery",
                onChange: function onChange() {
                  return setTransferDate("delivery");
                }
              }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)("label", {
                htmlFor: "on-delivery",
                children: "Upon Delivery of Purchased Item"
              })]
            })]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxs)("div", {
            className: "form-row",
            children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)("label", {
              htmlFor: "seller-name",
              children: "Enter the Proton @name of the seller:"
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxs)("div", {
              className: "input-group",
              children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)("span", {
                className: "input-group-text",
                children: "@"
              }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)("input", {
                type: "text",
                id: "seller-name",
                value: sellerName,
                onChange: function onChange(event) {
                  return setSellerName(event.target.value);
                }
              })]
            })]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)("div", {
            className: "form-row",
            children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)("p", {
              children: "Please confirm the following proposed purchase"
            })
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxs)("div", {
            className: "form-row confirm-check",
            children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)("input", {
              type: "checkbox",
              id: "crypto_exchange",
              name: "crypto_exchange",
              value: checkExchange,
              onChange: function onChange(event) {
                return setCheckExchange(event.target.checked);
              }
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)("label", {
              htmlFor: "crypto_exchange",
              children: "Please confirm this transaction and ".concat(amount || "(token numerical amount)", " ").concat(token.currency || "(token name)", " will be moved out of your Proton wallet into the EasyEscrow Smart Contract. @").concat(sellerName || "(second user)", " will be notified to review this transaction.")
            })]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)("div", {
            className: "form-row",
            children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)("p", {
              children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)("small", {
                children: "If this is correct please confirm and your crypto will be moved out of your Proton wallet into the EasyEscrow Smart Contract."
              })
            })
          }), checkError !== "" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)("div", {
            className: "form-row error",
            children: checkError
          }), error !== "" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)("div", {
            className: "form-row error",
            children: error
          }), amountError !== "" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)("div", {
            className: "form-row error",
            children: amountError
          }), ctx.isLoggedIn && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)("div", {
            className: "form-row",
            children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(_components_ui_Button__WEBPACK_IMPORTED_MODULE_1__["default"], {
              label: "Confirm",
              type: "submit",
              loading: loading
            })
          }), !ctx.isLoggedIn && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)("div", {
            className: "form-row",
            children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(_components_ui_Button__WEBPACK_IMPORTED_MODULE_1__["default"], {
              label: "Login",
              onClick: /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
                return _regeneratorRuntime().wrap(function _callee3$(_context3) {
                  while (1) {
                    switch (_context3.prev = _context3.next) {
                      case 0:
                        _context3.next = 2;
                        return walletCtx.protonConnection();

                      case 2:
                        return _context3.abrupt("return", _context3.sent);

                      case 3:
                      case "end":
                        return _context3.stop();
                    }
                  }
                }, _callee3);
              })),
              loading: loading
            })
          })]
        })
      })]
    }), successPopup && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(_components_ui_Modal__WEBPACK_IMPORTED_MODULE_2__["default"], {
      hidePopup: function hidePopup() {
        return setSuccessPopup(false);
      },
      children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxs)("div", {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)("h3", {
          className: "modal-header",
          children: "Purchase an Item"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)("div", {
          className: "form-row success",
          children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)("p", {
            children: success
          })
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)("div", {
          className: "modal-confirm",
          children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(_components_ui_Button__WEBPACK_IMPORTED_MODULE_1__["default"], {
            label: "Continue",
            onClick: closeSuccessPopup
          })
        })]
      })
    })]
  });
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PurchaseItem);

/***/ }),

/***/ "./resources/js/sdk/easyescrowSDK.js":
/*!*******************************************!*\
  !*** ./resources/js/sdk/easyescrowSDK.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cancelEscrow": () => (/* binding */ cancelEscrow),
/* harmony export */   "fetchEscrowAll": () => (/* binding */ fetchEscrowAll),
/* harmony export */   "fetchEscrows": () => (/* binding */ fetchEscrows),
/* harmony export */   "fillEscrow": () => (/* binding */ fillEscrow),
/* harmony export */   "negoPurchase": () => (/* binding */ negoPurchase),
/* harmony export */   "startEscrow": () => (/* binding */ startEscrow),
/* harmony export */   "startPurchase": () => (/* binding */ startPurchase)
/* harmony export */ });
/* harmony import */ var _proton_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @proton/api */ "./node_modules/@proton/api/dist/api.esm.js");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ "./node_modules/axios/index.js");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _constants_networks_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants/networks.js */ "./resources/js/constants/networks.js");
/* harmony import */ var _protonAPI_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./protonAPI.js */ "./resources/js/sdk/protonAPI.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

//Use API to save transaction details




var api = new _proton_api__WEBPACK_IMPORTED_MODULE_0__.ApiClass(_constants_networks_js__WEBPACK_IMPORTED_MODULE_2__.current_network.chain);
var contract = "easyescrow2";
var feeContract = "xtokens";
var feeQuantity = "0.250000 XUSDC";
function fetchEscrowAll() {
  return _fetchEscrowAll.apply(this, arguments);
}

function _fetchEscrowAll() {
  _fetchEscrowAll = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
    var _yield$api$rpc$get_ta, rows;

    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return api.rpc.get_table_rows({
              code: contract,
              scope: contract,
              table: "escrows",
              index_position: 2,
              key_type: "i64",
              limit: -1
            });

          case 2:
            _yield$api$rpc$get_ta = _context3.sent;
            rows = _yield$api$rpc$get_ta.rows;
            return _context3.abrupt("return", rows);

          case 5:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _fetchEscrowAll.apply(this, arguments);
}

function fetchEscrows(_x) {
  return _fetchEscrows.apply(this, arguments);
}

function _fetchEscrows() {
  _fetchEscrows = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(accountName) {
    var _yield$api$rpc$get_ta2, rows;

    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return api.rpc.get_table_rows({
              code: contract,
              scope: contract,
              table: "escrows",
              index_position: 2,
              key_type: "i64",
              lower_bound: accountName,
              upper_bound: accountName,
              limit: -1
            });

          case 2:
            _yield$api$rpc$get_ta2 = _context4.sent;
            rows = _yield$api$rpc$get_ta2.rows;
            return _context4.abrupt("return", rows);

          case 5:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _fetchEscrows.apply(this, arguments);
}

function startEscrow(_x2, _x3, _x4, _x5, _x6, _x7, _x8, _x9, _x10, _x11, _x12) {
  return _startEscrow.apply(this, arguments);
}

function _startEscrow() {
  _startEscrow = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(typeId, from, to, fromToken, toToken, fromAmount, toAmount, deliverType, expiry, authorization, session) {
    var amountIn, fromQuantity, actions, amountOut, toQuantity, memo;
    return _regeneratorRuntime().wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            amountIn = parseFloat(fromAmount).toFixed(Number(fromToken.decimals)).toString();
            fromQuantity = amountIn + " " + fromToken.currency;
            actions = [];

            if (typeId == 1) {
              amountOut = parseFloat(toAmount).toFixed(Number(toToken.decimals)).toString();
              toQuantity = amountOut + " " + toToken.currency;
              actions = [{
                account: feeContract,
                name: "transfer",
                data: {
                  from: from,
                  to: contract,
                  quantity: feeQuantity,
                  memo: "".concat(from, " deposit a fee for exchange.")
                },
                authorization: authorization
              }, {
                account: fromToken.contract,
                name: "transfer",
                data: {
                  from: from,
                  to: contract,
                  quantity: fromQuantity,
                  memo: "".concat(from, " deposit for exchange.")
                },
                authorization: authorization
              }, {
                account: contract,
                name: "startescrow",
                data: {
                  typeId: typeId,
                  from: from,
                  to: to,
                  fromTokens: [{
                    contract: fromToken.contract,
                    quantity: fromQuantity
                  }],
                  fromNfts: [],
                  toTokens: [{
                    contract: toToken.contract,
                    quantity: toQuantity
                  }],
                  toNfts: [],
                  deliverType: deliverType,
                  expiry: expiry
                },
                authorization: authorization
              }];
            } else if (typeId == 2) {
              actions = [{
                account: feeContract,
                name: "transfer",
                data: {
                  from: from,
                  to: contract,
                  quantity: feeQuantity,
                  memo: "".concat(from, " deposit a fee for a gift.")
                },
                authorization: authorization
              }, {
                account: fromToken.contract,
                name: "transfer",
                data: {
                  from: from,
                  to: contract,
                  quantity: fromQuantity,
                  memo: "".concat(from, " deposit for a gift")
                },
                authorization: authorization
              }, {
                account: contract,
                name: "startescrow",
                data: {
                  typeId: typeId,
                  from: from,
                  to: to,
                  fromTokens: [{
                    contract: fromToken.contract,
                    quantity: fromQuantity
                  }],
                  fromNfts: [],
                  toTokens: [],
                  toNfts: [],
                  deliverType: deliverType,
                  expiry: Math.floor(expiry / 1000)
                },
                authorization: authorization
              }];
            } else if (typeId == 3 || typeId == 4) {
              memo = "".concat(from, " deposited for Purchase Item.");

              if (typeId == 4) {
                memo = "".concat(from, " deposited for Purchase Service.");
              } //in this case only store to proton db. not send coin


              actions = [{
                account: contract,
                name: "startescrow",
                data: {
                  typeId: typeId,
                  from: from,
                  to: to,
                  fromTokens: [{
                    contract: fromToken.contract,
                    quantity: fromQuantity
                  }],
                  fromNfts: [],
                  toTokens: [],
                  toNfts: [],
                  deliverType: deliverType,
                  expiry: expiry
                },
                authorization: authorization
              }];
            }

            _context5.next = 6;
            return session.transact({
              transaction: {
                actions: actions
              }
            });

          case 6:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  return _startEscrow.apply(this, arguments);
}

function fillEscrow(_x13, _x14, _x15, _x16, _x17, _x18) {
  return _fillEscrow.apply(this, arguments);
}

function _fillEscrow() {
  _fillEscrow = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(escrowId, typeId, actor, toToken, authorization, session) {
    var actions, contractauth, result;
    return _regeneratorRuntime().wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            actions = [];

            if (!(typeId == 1)) {
              _context6.next = 5;
              break;
            }

            actions = [{
              account: feeContract,
              name: "transfer",
              data: {
                from: actor,
                to: contract,
                quantity: feeQuantity,
                memo: "".concat(actor, " deposit a fee for exchange.")
              },
              authorization: authorization
            }, {
              account: toToken.contract,
              name: "transfer",
              data: {
                from: actor,
                to: contract,
                quantity: toToken.quantity,
                memo: "".concat(actor, " deposit for exchange.")
              },
              authorization: authorization
            }, {
              account: contract,
              name: "fillescrow",
              data: {
                actor: actor,
                id: escrowId.toString()
              },
              authorization: authorization
            }];
            _context6.next = 22;
            break;

          case 5:
            if (!(typeId == 2)) {
              _context6.next = 21;
              break;
            }

            contractauth = [{
              actor: contract,
              permission: "active"
            }];
            actions = [{
              account: contract,
              name: "fillescrow",
              data: {
                actor: actor,
                id: escrowId.toString()
              },
              authorization: contractauth
            }];
            _context6.prev = 8;
            _context6.next = 11;
            return (0,_protonAPI_js__WEBPACK_IMPORTED_MODULE_3__.transact)(actions);

          case 11:
            result = _context6.sent;
            console.log("result", result);
            return _context6.abrupt("return", result);

          case 16:
            _context6.prev = 16;
            _context6.t0 = _context6["catch"](8);
            console.error("error here??", _context6.t0);

          case 19:
            _context6.next = 22;
            break;

          case 21:
            if (typeId == 3 || typeId == 4) {
              actions = [{
                account: contract,
                name: "fillescrow",
                data: {
                  actor: actor,
                  id: escrowId.toString()
                },
                authorization: authorization
              }];
            }

          case 22:
            if (!(typeId != 2)) {
              _context6.next = 25;
              break;
            }

            _context6.next = 25;
            return session.transact({
              transaction: {
                actions: actions
              }
            });

          case 25:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6, null, [[8, 16]]);
  }));
  return _fillEscrow.apply(this, arguments);
}

function cancelEscrow(_x19, _x20, _x21, _x22) {
  return _cancelEscrow.apply(this, arguments);
}

function _cancelEscrow() {
  _cancelEscrow = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(escrowId, actor, authorization, session) {
    var actions;
    return _regeneratorRuntime().wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            actions = [{
              account: contract,
              name: "cancelescrow",
              data: {
                actor: actor,
                id: escrowId.toString()
              },
              authorization: authorization
            }];
            _context7.next = 3;
            return session.transact({
              transaction: {
                actions: actions
              }
            });

          case 3:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7);
  }));
  return _cancelEscrow.apply(this, arguments);
}

function startPurchase(_x23, _x24, _x25, _x26) {
  return _startPurchase.apply(this, arguments);
}

function _startPurchase() {
  _startPurchase = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(from, token, authorization, session) {
    var actions;
    return _regeneratorRuntime().wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            actions = [{
              account: feeContract,
              name: "transfer",
              data: {
                from: from,
                to: contract,
                quantity: feeQuantity,
                memo: "".concat(from, " deposit a fee for a purchase.")
              },
              authorization: authorization
            }, {
              account: token.contract,
              name: "transfer",
              data: {
                from: from,
                to: contract,
                quantity: token.quantity,
                memo: "".concat(from, " deposit for purchase.")
              },
              authorization: authorization
            }];
            _context8.next = 3;
            return session.transact({
              transaction: {
                actions: actions
              }
            });

          case 3:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8);
  }));
  return _startPurchase.apply(this, arguments);
}

function negoPurchase(_x27, _x28, _x29, _x30, _x31, _x32, _x33, _x34, _x35, _x36, _x37, _x38) {
  return _negoPurchase.apply(this, arguments);
}

function _negoPurchase() {
  _negoPurchase = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(escrowId, typeId, from, to, fromToken, toToken, fromAmount, toAmount, deliverType, expiry, authorization, session) {
    var amountIn, fromQuantity, actions;
    return _regeneratorRuntime().wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            amountIn = parseFloat(fromAmount).toFixed(Number(fromToken.decimals)).toString();
            fromQuantity = amountIn + " " + fromToken.currency;
            actions = [{
              account: contract,
              name: "negopurchase",
              data: {
                escrowId: escrowId,
                typeId: typeId,
                from: from,
                to: to,
                fromTokens: [{
                  contract: fromToken.contract,
                  quantity: fromQuantity
                }],
                fromNfts: [],
                toTokens: [],
                toNfts: [],
                deliverType: deliverType,
                expiry: expiry
              },
              authorization: authorization
            }];
            _context9.next = 5;
            return session.transact({
              transaction: {
                actions: actions
              }
            });

          case 5:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));
  return _negoPurchase.apply(this, arguments);
}

var tablerows = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
    var protonrows, _iterator, _step, _loop;

    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return fetchEscrowAll();

          case 2:
            protonrows = _context2.sent;
            console.log(protonrows);

            if (Object.keys(protonrows).length != 0) {
              _iterator = _createForOfIteratorHelper(protonrows);

              try {
                _loop = function _loop() {
                  var obj = _step.value;
                  var newdatetenminutes = new Date();
                  var difference = newdatetenminutes.getMinutes() - 10;
                  newdatetenminutes.setMinutes(difference);
                  var timestamp = obj.expiry * 1000;
                  var date = new Date(timestamp);

                  if (date > newdatetenminutes && date <= new Date()) {
                    var giftresponsecall = /*#__PURE__*/function () {
                      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
                        var giftresponse, res, datas;
                        return _regeneratorRuntime().wrap(function _callee$(_context) {
                          while (1) {
                            switch (_context.prev = _context.next) {
                              case 0:
                                _context.next = 2;
                                return fillEscrow(obj.id, 2, obj.from, null, null, null);

                              case 2:
                                giftresponse = _context.sent;

                                if (giftresponse) {
                                  res = {
                                    escrow_id: obj.id,
                                    type_id: 2
                                  };
                                  datas = JSON.stringify(res);
                                  axios__WEBPACK_IMPORTED_MODULE_1___default()({
                                    method: "post",
                                    url: "https://easyescrow.io/api/user/gift-update-status",
                                    data: datas,
                                    config: {
                                      headers: {
                                        "Content-Type": "application/json"
                                      }
                                    }
                                  }).then(function (response) {
                                    console.log(response.data.response);
                                  })["catch"](function (response) {
                                    console.log(response);
                                  });
                                } else {
                                  console.log(giftresponse);
                                }

                              case 4:
                              case "end":
                                return _context.stop();
                            }
                          }
                        }, _callee);
                      }));

                      return function giftresponsecall() {
                        return _ref2.apply(this, arguments);
                      };
                    }();

                    console.log("current date", new Date());
                    console.log("calling fill gift function");
                    console.log("running escrow", obj.id);
                    console.log("running escrow date", date);
                    giftresponsecall();
                  } else {
                    console.log("skip escrow", obj.id);
                    console.log("skip escrow date", date);
                    console.log("current date", new Date());
                  }
                };

                for (_iterator.s(); !(_step = _iterator.n()).done;) {
                  _loop();
                }
              } catch (err) {
                _iterator.e(err);
              } finally {
                _iterator.f();
              }
            } else {
              console.log("no rows found");
            }

          case 5:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function tablerows() {
    return _ref.apply(this, arguments);
  };
}();

tablerows(); // const history = await api.getActionsFromHyperion(ctx.auth.actor, {
//     limit: 10,
//     skip: 0,
//     sort: "desc",
//     filter: contract*",
// });
// console.log("History", history);

/***/ }),

/***/ "./resources/js/sdk/protonAPI.js":
/*!***************************************!*\
  !*** ./resources/js/sdk/protonAPI.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "api": () => (/* binding */ api),
/* harmony export */   "rpc": () => (/* binding */ rpc),
/* harmony export */   "transact": () => (/* binding */ transact)
/* harmony export */ });
/* harmony import */ var _proton_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @proton/js */ "./node_modules/@proton/js/dist/index.js");
/* harmony import */ var node_fetch__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node-fetch */ "./node_modules/node-fetch/browser.js");
/* harmony import */ var node_fetch__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(node_fetch__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _constants_networks__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants/networks */ "./resources/js/constants/networks.js");



var rpc = new _proton_js__WEBPACK_IMPORTED_MODULE_0__.JsonRpc([_constants_networks__WEBPACK_IMPORTED_MODULE_2__.current_network.endpoint], {
  fetch: (node_fetch__WEBPACK_IMPORTED_MODULE_1___default())
});
var api = new _proton_js__WEBPACK_IMPORTED_MODULE_0__.Api({
  rpc: rpc,
  signatureProvider: new _proton_js__WEBPACK_IMPORTED_MODULE_0__.JsSignatureProvider(["PVT_K1_2Sg3jdbgAfc8fJct2MVHpUjRWJvtDhitxD5p59warXSQrXXWA3"])
});
function transact(actions) {
  console.log("come here, then why?");
  api.transact({
    actions: actions
  }, {
    blocksBehind: 300,
    expireSeconds: 3000
  });
}

/***/ }),

/***/ "./node_modules/backo2/index.js":
/*!**************************************!*\
  !*** ./node_modules/backo2/index.js ***!
  \**************************************/
/***/ ((module) => {


/**
 * Expose `Backoff`.
 */

module.exports = Backoff;

/**
 * Initialize backoff timer with `opts`.
 *
 * - `min` initial timeout in milliseconds [100]
 * - `max` max timeout [10000]
 * - `jitter` [0]
 * - `factor` [2]
 *
 * @param {Object} opts
 * @api public
 */

function Backoff(opts) {
  opts = opts || {};
  this.ms = opts.min || 100;
  this.max = opts.max || 10000;
  this.factor = opts.factor || 2;
  this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;
  this.attempts = 0;
}

/**
 * Return the backoff duration.
 *
 * @return {Number}
 * @api public
 */

Backoff.prototype.duration = function(){
  var ms = this.ms * Math.pow(this.factor, this.attempts++);
  if (this.jitter) {
    var rand =  Math.random();
    var deviation = Math.floor(rand * this.jitter * ms);
    ms = (Math.floor(rand * 10) & 1) == 0  ? ms - deviation : ms + deviation;
  }
  return Math.min(ms, this.max) | 0;
};

/**
 * Reset the number of attempts.
 *
 * @api public
 */

Backoff.prototype.reset = function(){
  this.attempts = 0;
};

/**
 * Set the minimum duration
 *
 * @api public
 */

Backoff.prototype.setMin = function(min){
  this.ms = min;
};

/**
 * Set the maximum duration
 *
 * @api public
 */

Backoff.prototype.setMax = function(max){
  this.max = max;
};

/**
 * Set the jitter
 *
 * @api public
 */

Backoff.prototype.setJitter = function(jitter){
  this.jitter = jitter;
};



/***/ }),

/***/ "./node_modules/bignumber.js/bignumber.js":
/*!************************************************!*\
  !*** ./node_modules/bignumber.js/bignumber.js ***!
  \************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;;(function (globalObject) {
  'use strict';

/*
 *      bignumber.js v9.0.2
 *      A JavaScript library for arbitrary-precision arithmetic.
 *      https://github.com/MikeMcl/bignumber.js
 *      Copyright (c) 2021 Michael Mclaughlin <M8ch88l@gmail.com>
 *      MIT Licensed.
 *
 *      BigNumber.prototype methods     |  BigNumber methods
 *                                      |
 *      absoluteValue            abs    |  clone
 *      comparedTo                      |  config               set
 *      decimalPlaces            dp     |      DECIMAL_PLACES
 *      dividedBy                div    |      ROUNDING_MODE
 *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT
 *      exponentiatedBy          pow    |      RANGE
 *      integerValue                    |      CRYPTO
 *      isEqualTo                eq     |      MODULO_MODE
 *      isFinite                        |      POW_PRECISION
 *      isGreaterThan            gt     |      FORMAT
 *      isGreaterThanOrEqualTo   gte    |      ALPHABET
 *      isInteger                       |  isBigNumber
 *      isLessThan               lt     |  maximum              max
 *      isLessThanOrEqualTo      lte    |  minimum              min
 *      isNaN                           |  random
 *      isNegative                      |  sum
 *      isPositive                      |
 *      isZero                          |
 *      minus                           |
 *      modulo                   mod    |
 *      multipliedBy             times  |
 *      negated                         |
 *      plus                            |
 *      precision                sd     |
 *      shiftedBy                       |
 *      squareRoot               sqrt   |
 *      toExponential                   |
 *      toFixed                         |
 *      toFormat                        |
 *      toFraction                      |
 *      toJSON                          |
 *      toNumber                        |
 *      toPrecision                     |
 *      toString                        |
 *      valueOf                         |
 *
 */


  var BigNumber,
    isNumeric = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,
    mathceil = Math.ceil,
    mathfloor = Math.floor,

    bignumberError = '[BigNumber Error] ',
    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',

    BASE = 1e14,
    LOG_BASE = 14,
    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1
    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1
    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],
    SQRT_BASE = 1e7,

    // EDITABLE
    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and
    // the arguments to toExponential, toFixed, toFormat, and toPrecision.
    MAX = 1E9;                                   // 0 to MAX_INT32


  /*
   * Create and return a BigNumber constructor.
   */
  function clone(configObject) {
    var div, convertBase, parseNumeric,
      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },
      ONE = new BigNumber(1),


      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------


      // The default values below must be integers within the inclusive ranges stated.
      // The values can also be changed at run-time using BigNumber.set.

      // The maximum number of decimal places for operations involving division.
      DECIMAL_PLACES = 20,                     // 0 to MAX

      // The rounding mode used when rounding to the above decimal places, and when using
      // toExponential, toFixed, toFormat and toPrecision, and round (default value).
      // UP         0 Away from zero.
      // DOWN       1 Towards zero.
      // CEIL       2 Towards +Infinity.
      // FLOOR      3 Towards -Infinity.
      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.
      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
      ROUNDING_MODE = 4,                       // 0 to 8

      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]

      // The exponent value at and beneath which toString returns exponential notation.
      // Number type: -7
      TO_EXP_NEG = -7,                         // 0 to -MAX

      // The exponent value at and above which toString returns exponential notation.
      // Number type: 21
      TO_EXP_POS = 21,                         // 0 to MAX

      // RANGE : [MIN_EXP, MAX_EXP]

      // The minimum exponent value, beneath which underflow to zero occurs.
      // Number type: -324  (5e-324)
      MIN_EXP = -1e7,                          // -1 to -MAX

      // The maximum exponent value, above which overflow to Infinity occurs.
      // Number type:  308  (1.7976931348623157e+308)
      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.
      MAX_EXP = 1e7,                           // 1 to MAX

      // Whether to use cryptographically-secure random number generation, if available.
      CRYPTO = false,                          // true or false

      // The modulo mode used when calculating the modulus: a mod n.
      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
      // The remainder (r) is calculated as: r = a - n * q.
      //
      // UP        0 The remainder is positive if the dividend is negative, else is negative.
      // DOWN      1 The remainder has the same sign as the dividend.
      //             This modulo mode is commonly known as 'truncated division' and is
      //             equivalent to (a % n) in JavaScript.
      // FLOOR     3 The remainder has the same sign as the divisor (Python %).
      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.
      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).
      //             The remainder is always positive.
      //
      // The truncated division, floored division, Euclidian division and IEEE 754 remainder
      // modes are commonly used for the modulus operation.
      // Although the other rounding modes can also be used, they may not give useful results.
      MODULO_MODE = 1,                         // 0 to 9

      // The maximum number of significant digits of the result of the exponentiatedBy operation.
      // If POW_PRECISION is 0, there will be unlimited significant digits.
      POW_PRECISION = 0,                       // 0 to MAX

      // The format specification used by the BigNumber.prototype.toFormat method.
      FORMAT = {
        prefix: '',
        groupSize: 3,
        secondaryGroupSize: 0,
        groupSeparator: ',',
        decimalSeparator: '.',
        fractionGroupSize: 0,
        fractionGroupSeparator: '\xA0',        // non-breaking space
        suffix: ''
      },

      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',
      // '-', '.', whitespace, or repeated character.
      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'
      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz',
      alphabetHasNormalDecimalDigits = true;


    //------------------------------------------------------------------------------------------


    // CONSTRUCTOR


    /*
     * The BigNumber constructor and exported function.
     * Create and return a new instance of a BigNumber object.
     *
     * v {number|string|BigNumber} A numeric value.
     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.
     */
    function BigNumber(v, b) {
      var alphabet, c, caseChanged, e, i, isNum, len, str,
        x = this;

      // Enable constructor call without `new`.
      if (!(x instanceof BigNumber)) return new BigNumber(v, b);

      if (b == null) {

        if (v && v._isBigNumber === true) {
          x.s = v.s;

          if (!v.c || v.e > MAX_EXP) {
            x.c = x.e = null;
          } else if (v.e < MIN_EXP) {
            x.c = [x.e = 0];
          } else {
            x.e = v.e;
            x.c = v.c.slice();
          }

          return;
        }

        if ((isNum = typeof v == 'number') && v * 0 == 0) {

          // Use `1 / n` to handle minus zero also.
          x.s = 1 / v < 0 ? (v = -v, -1) : 1;

          // Fast path for integers, where n < 2147483648 (2**31).
          if (v === ~~v) {
            for (e = 0, i = v; i >= 10; i /= 10, e++);

            if (e > MAX_EXP) {
              x.c = x.e = null;
            } else {
              x.e = e;
              x.c = [v];
            }

            return;
          }

          str = String(v);
        } else {

          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);

          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;
        }

        // Decimal point?
        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');

        // Exponential form?
        if ((i = str.search(/e/i)) > 0) {

          // Determine exponent.
          if (e < 0) e = i;
          e += +str.slice(i + 1);
          str = str.substring(0, i);
        } else if (e < 0) {

          // Integer.
          e = str.length;
        }

      } else {

        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
        intCheck(b, 2, ALPHABET.length, 'Base');

        // Allow exponential notation to be used with base 10 argument, while
        // also rounding to DECIMAL_PLACES as with other bases.
        if (b == 10 && alphabetHasNormalDecimalDigits) {
          x = new BigNumber(v);
          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
        }

        str = String(v);

        if (isNum = typeof v == 'number') {

          // Avoid potential interpretation of Infinity and NaN as base 44+ values.
          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);

          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;

          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
          if (BigNumber.DEBUG && str.replace(/^0\.0*|\./, '').length > 15) {
            throw Error
             (tooManyDigits + v);
          }
        } else {
          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
        }

        alphabet = ALPHABET.slice(0, b);
        e = i = 0;

        // Check that str is a valid base b number.
        // Don't use RegExp, so alphabet can contain special characters.
        for (len = str.length; i < len; i++) {
          if (alphabet.indexOf(c = str.charAt(i)) < 0) {
            if (c == '.') {

              // If '.' is not the first character and it has not be found before.
              if (i > e) {
                e = len;
                continue;
              }
            } else if (!caseChanged) {

              // Allow e.g. hexadecimal 'FF' as well as 'ff'.
              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||
                  str == str.toLowerCase() && (str = str.toUpperCase())) {
                caseChanged = true;
                i = -1;
                e = 0;
                continue;
              }
            }

            return parseNumeric(x, String(v), isNum, b);
          }
        }

        // Prevent later check for length on converted number.
        isNum = false;
        str = convertBase(str, b, 10, x.s);

        // Decimal point?
        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');
        else e = str.length;
      }

      // Determine leading zeros.
      for (i = 0; str.charCodeAt(i) === 48; i++);

      // Determine trailing zeros.
      for (len = str.length; str.charCodeAt(--len) === 48;);

      if (str = str.slice(i, ++len)) {
        len -= i;

        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
        if (isNum && BigNumber.DEBUG &&
          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {
            throw Error
             (tooManyDigits + (x.s * v));
        }

         // Overflow?
        if ((e = e - i - 1) > MAX_EXP) {

          // Infinity.
          x.c = x.e = null;

        // Underflow?
        } else if (e < MIN_EXP) {

          // Zero.
          x.c = [x.e = 0];
        } else {
          x.e = e;
          x.c = [];

          // Transform base

          // e is the base 10 exponent.
          // i is where to slice str to get the first element of the coefficient array.
          i = (e + 1) % LOG_BASE;
          if (e < 0) i += LOG_BASE;  // i < 1

          if (i < len) {
            if (i) x.c.push(+str.slice(0, i));

            for (len -= LOG_BASE; i < len;) {
              x.c.push(+str.slice(i, i += LOG_BASE));
            }

            i = LOG_BASE - (str = str.slice(i)).length;
          } else {
            i -= len;
          }

          for (; i--; str += '0');
          x.c.push(+str);
        }
      } else {

        // Zero.
        x.c = [x.e = 0];
      }
    }


    // CONSTRUCTOR PROPERTIES


    BigNumber.clone = clone;

    BigNumber.ROUND_UP = 0;
    BigNumber.ROUND_DOWN = 1;
    BigNumber.ROUND_CEIL = 2;
    BigNumber.ROUND_FLOOR = 3;
    BigNumber.ROUND_HALF_UP = 4;
    BigNumber.ROUND_HALF_DOWN = 5;
    BigNumber.ROUND_HALF_EVEN = 6;
    BigNumber.ROUND_HALF_CEIL = 7;
    BigNumber.ROUND_HALF_FLOOR = 8;
    BigNumber.EUCLID = 9;


    /*
     * Configure infrequently-changing library-wide settings.
     *
     * Accept an object with the following optional properties (if the value of a property is
     * a number, it must be an integer within the inclusive range stated):
     *
     *   DECIMAL_PLACES   {number}           0 to MAX
     *   ROUNDING_MODE    {number}           0 to 8
     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]
     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]
     *   CRYPTO           {boolean}          true or false
     *   MODULO_MODE      {number}           0 to 9
     *   POW_PRECISION       {number}           0 to MAX
     *   ALPHABET         {string}           A string of two or more unique characters which does
     *                                       not contain '.'.
     *   FORMAT           {object}           An object with some of the following properties:
     *     prefix                 {string}
     *     groupSize              {number}
     *     secondaryGroupSize     {number}
     *     groupSeparator         {string}
     *     decimalSeparator       {string}
     *     fractionGroupSize      {number}
     *     fractionGroupSeparator {string}
     *     suffix                 {string}
     *
     * (The values assigned to the above FORMAT object properties are not checked for validity.)
     *
     * E.g.
     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })
     *
     * Ignore properties/parameters set to null or undefined, except for ALPHABET.
     *
     * Return an object with the properties current values.
     */
    BigNumber.config = BigNumber.set = function (obj) {
      var p, v;

      if (obj != null) {

        if (typeof obj == 'object') {

          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.
          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'
          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {
            v = obj[p];
            intCheck(v, 0, MAX, p);
            DECIMAL_PLACES = v;
          }

          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.
          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'
          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {
            v = obj[p];
            intCheck(v, 0, 8, p);
            ROUNDING_MODE = v;
          }

          // EXPONENTIAL_AT {number|number[]}
          // Integer, -MAX to MAX inclusive or
          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].
          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'
          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {
            v = obj[p];
            if (v && v.pop) {
              intCheck(v[0], -MAX, 0, p);
              intCheck(v[1], 0, MAX, p);
              TO_EXP_NEG = v[0];
              TO_EXP_POS = v[1];
            } else {
              intCheck(v, -MAX, MAX, p);
              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);
            }
          }

          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or
          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].
          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'
          if (obj.hasOwnProperty(p = 'RANGE')) {
            v = obj[p];
            if (v && v.pop) {
              intCheck(v[0], -MAX, -1, p);
              intCheck(v[1], 1, MAX, p);
              MIN_EXP = v[0];
              MAX_EXP = v[1];
            } else {
              intCheck(v, -MAX, MAX, p);
              if (v) {
                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);
              } else {
                throw Error
                 (bignumberError + p + ' cannot be zero: ' + v);
              }
            }
          }

          // CRYPTO {boolean} true or false.
          // '[BigNumber Error] CRYPTO not true or false: {v}'
          // '[BigNumber Error] crypto unavailable'
          if (obj.hasOwnProperty(p = 'CRYPTO')) {
            v = obj[p];
            if (v === !!v) {
              if (v) {
                if (typeof crypto != 'undefined' && crypto &&
                 (crypto.getRandomValues || crypto.randomBytes)) {
                  CRYPTO = v;
                } else {
                  CRYPTO = !v;
                  throw Error
                   (bignumberError + 'crypto unavailable');
                }
              } else {
                CRYPTO = v;
              }
            } else {
              throw Error
               (bignumberError + p + ' not true or false: ' + v);
            }
          }

          // MODULO_MODE {number} Integer, 0 to 9 inclusive.
          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'
          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {
            v = obj[p];
            intCheck(v, 0, 9, p);
            MODULO_MODE = v;
          }

          // POW_PRECISION {number} Integer, 0 to MAX inclusive.
          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'
          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {
            v = obj[p];
            intCheck(v, 0, MAX, p);
            POW_PRECISION = v;
          }

          // FORMAT {object}
          // '[BigNumber Error] FORMAT not an object: {v}'
          if (obj.hasOwnProperty(p = 'FORMAT')) {
            v = obj[p];
            if (typeof v == 'object') FORMAT = v;
            else throw Error
             (bignumberError + p + ' not an object: ' + v);
          }

          // ALPHABET {string}
          // '[BigNumber Error] ALPHABET invalid: {v}'
          if (obj.hasOwnProperty(p = 'ALPHABET')) {
            v = obj[p];

            // Disallow if less than two characters,
            // or if it contains '+', '-', '.', whitespace, or a repeated character.
            if (typeof v == 'string' && !/^.?$|[+\-.\s]|(.).*\1/.test(v)) {
              alphabetHasNormalDecimalDigits = v.slice(0, 10) == '0123456789';
              ALPHABET = v;
            } else {
              throw Error
               (bignumberError + p + ' invalid: ' + v);
            }
          }

        } else {

          // '[BigNumber Error] Object expected: {v}'
          throw Error
           (bignumberError + 'Object expected: ' + obj);
        }
      }

      return {
        DECIMAL_PLACES: DECIMAL_PLACES,
        ROUNDING_MODE: ROUNDING_MODE,
        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],
        RANGE: [MIN_EXP, MAX_EXP],
        CRYPTO: CRYPTO,
        MODULO_MODE: MODULO_MODE,
        POW_PRECISION: POW_PRECISION,
        FORMAT: FORMAT,
        ALPHABET: ALPHABET
      };
    };


    /*
     * Return true if v is a BigNumber instance, otherwise return false.
     *
     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.
     *
     * v {any}
     *
     * '[BigNumber Error] Invalid BigNumber: {v}'
     */
    BigNumber.isBigNumber = function (v) {
      if (!v || v._isBigNumber !== true) return false;
      if (!BigNumber.DEBUG) return true;

      var i, n,
        c = v.c,
        e = v.e,
        s = v.s;

      out: if ({}.toString.call(c) == '[object Array]') {

        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {

          // If the first element is zero, the BigNumber value must be zero.
          if (c[0] === 0) {
            if (e === 0 && c.length === 1) return true;
            break out;
          }

          // Calculate number of digits that c[0] should have, based on the exponent.
          i = (e + 1) % LOG_BASE;
          if (i < 1) i += LOG_BASE;

          // Calculate number of digits of c[0].
          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {
          if (String(c[0]).length == i) {

            for (i = 0; i < c.length; i++) {
              n = c[i];
              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;
            }

            // Last element cannot be zero, unless it is the only element.
            if (n !== 0) return true;
          }
        }

      // Infinity/NaN
      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {
        return true;
      }

      throw Error
        (bignumberError + 'Invalid BigNumber: ' + v);
    };


    /*
     * Return a new BigNumber whose value is the maximum of the arguments.
     *
     * arguments {number|string|BigNumber}
     */
    BigNumber.maximum = BigNumber.max = function () {
      return maxOrMin(arguments, P.lt);
    };


    /*
     * Return a new BigNumber whose value is the minimum of the arguments.
     *
     * arguments {number|string|BigNumber}
     */
    BigNumber.minimum = BigNumber.min = function () {
      return maxOrMin(arguments, P.gt);
    };


    /*
     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,
     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing
     * zeros are produced).
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'
     * '[BigNumber Error] crypto unavailable'
     */
    BigNumber.random = (function () {
      var pow2_53 = 0x20000000000000;

      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.
      // Check if Math.random() produces more than 32 bits of randomness.
      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.
      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.
      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff
       ? function () { return mathfloor(Math.random() * pow2_53); }
       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +
         (Math.random() * 0x800000 | 0); };

      return function (dp) {
        var a, b, e, k, v,
          i = 0,
          c = [],
          rand = new BigNumber(ONE);

        if (dp == null) dp = DECIMAL_PLACES;
        else intCheck(dp, 0, MAX);

        k = mathceil(dp / LOG_BASE);

        if (CRYPTO) {

          // Browsers supporting crypto.getRandomValues.
          if (crypto.getRandomValues) {

            a = crypto.getRandomValues(new Uint32Array(k *= 2));

            for (; i < k;) {

              // 53 bits:
              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)
              // 11111 11111111 11111111 11111111 11100000 00000000 00000000
              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)
              //                                     11111 11111111 11111111
              // 0x20000 is 2^21.
              v = a[i] * 0x20000 + (a[i + 1] >>> 11);

              // Rejection sampling:
              // 0 <= v < 9007199254740992
              // Probability that v >= 9e15, is
              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251
              if (v >= 9e15) {
                b = crypto.getRandomValues(new Uint32Array(2));
                a[i] = b[0];
                a[i + 1] = b[1];
              } else {

                // 0 <= v <= 8999999999999999
                // 0 <= (v % 1e14) <= 99999999999999
                c.push(v % 1e14);
                i += 2;
              }
            }
            i = k / 2;

          // Node.js supporting crypto.randomBytes.
          } else if (crypto.randomBytes) {

            // buffer
            a = crypto.randomBytes(k *= 7);

            for (; i < k;) {

              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40
              // 0x100000000 is 2^32, 0x1000000 is 2^24
              // 11111 11111111 11111111 11111111 11111111 11111111 11111111
              // 0 <= v < 9007199254740992
              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +
                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +
                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];

              if (v >= 9e15) {
                crypto.randomBytes(7).copy(a, i);
              } else {

                // 0 <= (v % 1e14) <= 99999999999999
                c.push(v % 1e14);
                i += 7;
              }
            }
            i = k / 7;
          } else {
            CRYPTO = false;
            throw Error
             (bignumberError + 'crypto unavailable');
          }
        }

        // Use Math.random.
        if (!CRYPTO) {

          for (; i < k;) {
            v = random53bitInt();
            if (v < 9e15) c[i++] = v % 1e14;
          }
        }

        k = c[--i];
        dp %= LOG_BASE;

        // Convert trailing digits to zeros according to dp.
        if (k && dp) {
          v = POWS_TEN[LOG_BASE - dp];
          c[i] = mathfloor(k / v) * v;
        }

        // Remove trailing elements which are zero.
        for (; c[i] === 0; c.pop(), i--);

        // Zero?
        if (i < 0) {
          c = [e = 0];
        } else {

          // Remove leading elements which are zero and adjust exponent accordingly.
          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);

          // Count the digits of the first element of c to determine leading zeros, and...
          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);

          // adjust the exponent accordingly.
          if (i < LOG_BASE) e -= LOG_BASE - i;
        }

        rand.e = e;
        rand.c = c;
        return rand;
      };
    })();


    /*
     * Return a BigNumber whose value is the sum of the arguments.
     *
     * arguments {number|string|BigNumber}
     */
    BigNumber.sum = function () {
      var i = 1,
        args = arguments,
        sum = new BigNumber(args[0]);
      for (; i < args.length;) sum = sum.plus(args[i++]);
      return sum;
    };


    // PRIVATE FUNCTIONS


    // Called by BigNumber and BigNumber.prototype.toString.
    convertBase = (function () {
      var decimal = '0123456789';

      /*
       * Convert string of baseIn to an array of numbers of baseOut.
       * Eg. toBaseOut('255', 10, 16) returns [15, 15].
       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].
       */
      function toBaseOut(str, baseIn, baseOut, alphabet) {
        var j,
          arr = [0],
          arrL,
          i = 0,
          len = str.length;

        for (; i < len;) {
          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);

          arr[0] += alphabet.indexOf(str.charAt(i++));

          for (j = 0; j < arr.length; j++) {

            if (arr[j] > baseOut - 1) {
              if (arr[j + 1] == null) arr[j + 1] = 0;
              arr[j + 1] += arr[j] / baseOut | 0;
              arr[j] %= baseOut;
            }
          }
        }

        return arr.reverse();
      }

      // Convert a numeric string of baseIn to a numeric string of baseOut.
      // If the caller is toString, we are converting from base 10 to baseOut.
      // If the caller is BigNumber, we are converting from baseIn to base 10.
      return function (str, baseIn, baseOut, sign, callerIsToString) {
        var alphabet, d, e, k, r, x, xc, y,
          i = str.indexOf('.'),
          dp = DECIMAL_PLACES,
          rm = ROUNDING_MODE;

        // Non-integer.
        if (i >= 0) {
          k = POW_PRECISION;

          // Unlimited precision.
          POW_PRECISION = 0;
          str = str.replace('.', '');
          y = new BigNumber(baseIn);
          x = y.pow(str.length - i);
          POW_PRECISION = k;

          // Convert str as if an integer, then restore the fraction part by dividing the
          // result by its base raised to a power.

          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),
           10, baseOut, decimal);
          y.e = y.c.length;
        }

        // Convert the number as integer.

        xc = toBaseOut(str, baseIn, baseOut, callerIsToString
         ? (alphabet = ALPHABET, decimal)
         : (alphabet = decimal, ALPHABET));

        // xc now represents str as an integer and converted to baseOut. e is the exponent.
        e = k = xc.length;

        // Remove trailing zeros.
        for (; xc[--k] == 0; xc.pop());

        // Zero?
        if (!xc[0]) return alphabet.charAt(0);

        // Does str represent an integer? If so, no need for the division.
        if (i < 0) {
          --e;
        } else {
          x.c = xc;
          x.e = e;

          // The sign is needed for correct rounding.
          x.s = sign;
          x = div(x, y, dp, rm, baseOut);
          xc = x.c;
          r = x.r;
          e = x.e;
        }

        // xc now represents str converted to baseOut.

        // THe index of the rounding digit.
        d = e + dp + 1;

        // The rounding digit: the digit to the right of the digit that may be rounded up.
        i = xc[d];

        // Look at the rounding digits and mode to determine whether to round up.

        k = baseOut / 2;
        r = r || d < 0 || xc[d + 1] != null;

        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||
               rm == (x.s < 0 ? 8 : 7));

        // If the index of the rounding digit is not greater than zero, or xc represents
        // zero, then the result of the base conversion is zero or, if rounding up, a value
        // such as 0.00001.
        if (d < 1 || !xc[0]) {

          // 1^-dp or 0
          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);
        } else {

          // Truncate xc to the required number of decimal places.
          xc.length = d;

          // Round up?
          if (r) {

            // Rounding up may mean the previous digit has to be rounded up and so on.
            for (--baseOut; ++xc[--d] > baseOut;) {
              xc[d] = 0;

              if (!d) {
                ++e;
                xc = [1].concat(xc);
              }
            }
          }

          // Determine trailing zeros.
          for (k = xc.length; !xc[--k];);

          // E.g. [4, 11, 15] becomes 4bf.
          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));

          // Add leading zeros, decimal point and trailing zeros as required.
          str = toFixedPoint(str, e, alphabet.charAt(0));
        }

        // The caller will add the sign.
        return str;
      };
    })();


    // Perform division in the specified base. Called by div and convertBase.
    div = (function () {

      // Assume non-zero x and k.
      function multiply(x, k, base) {
        var m, temp, xlo, xhi,
          carry = 0,
          i = x.length,
          klo = k % SQRT_BASE,
          khi = k / SQRT_BASE | 0;

        for (x = x.slice(); i--;) {
          xlo = x[i] % SQRT_BASE;
          xhi = x[i] / SQRT_BASE | 0;
          m = khi * xlo + xhi * klo;
          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;
          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;
          x[i] = temp % base;
        }

        if (carry) x = [carry].concat(x);

        return x;
      }

      function compare(a, b, aL, bL) {
        var i, cmp;

        if (aL != bL) {
          cmp = aL > bL ? 1 : -1;
        } else {

          for (i = cmp = 0; i < aL; i++) {

            if (a[i] != b[i]) {
              cmp = a[i] > b[i] ? 1 : -1;
              break;
            }
          }
        }

        return cmp;
      }

      function subtract(a, b, aL, base) {
        var i = 0;

        // Subtract b from a.
        for (; aL--;) {
          a[aL] -= i;
          i = a[aL] < b[aL] ? 1 : 0;
          a[aL] = i * base + a[aL] - b[aL];
        }

        // Remove leading zeros.
        for (; !a[0] && a.length > 1; a.splice(0, 1));
      }

      // x: dividend, y: divisor.
      return function (x, y, dp, rm, base) {
        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,
          yL, yz,
          s = x.s == y.s ? 1 : -1,
          xc = x.c,
          yc = y.c;

        // Either NaN, Infinity or 0?
        if (!xc || !xc[0] || !yc || !yc[0]) {

          return new BigNumber(

           // Return NaN if either NaN, or both Infinity or 0.
           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :

            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
            xc && xc[0] == 0 || !yc ? s * 0 : s / 0
         );
        }

        q = new BigNumber(s);
        qc = q.c = [];
        e = x.e - y.e;
        s = dp + e + 1;

        if (!base) {
          base = BASE;
          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
          s = s / LOG_BASE | 0;
        }

        // Result exponent may be one less then the current value of e.
        // The coefficients of the BigNumbers from convertBase may have trailing zeros.
        for (i = 0; yc[i] == (xc[i] || 0); i++);

        if (yc[i] > (xc[i] || 0)) e--;

        if (s < 0) {
          qc.push(1);
          more = true;
        } else {
          xL = xc.length;
          yL = yc.length;
          i = 0;
          s += 2;

          // Normalise xc and yc so highest order digit of yc is >= base / 2.

          n = mathfloor(base / (yc[0] + 1));

          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.
          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {
          if (n > 1) {
            yc = multiply(yc, n, base);
            xc = multiply(xc, n, base);
            yL = yc.length;
            xL = xc.length;
          }

          xi = yL;
          rem = xc.slice(0, yL);
          remL = rem.length;

          // Add zeros to make remainder as long as divisor.
          for (; remL < yL; rem[remL++] = 0);
          yz = yc.slice();
          yz = [0].concat(yz);
          yc0 = yc[0];
          if (yc[1] >= base / 2) yc0++;
          // Not necessary, but to prevent trial digit n > base, when using base 3.
          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;

          do {
            n = 0;

            // Compare divisor and remainder.
            cmp = compare(yc, rem, yL, remL);

            // If divisor < remainder.
            if (cmp < 0) {

              // Calculate trial digit, n.

              rem0 = rem[0];
              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);

              // n is how many times the divisor goes into the current remainder.
              n = mathfloor(rem0 / yc0);

              //  Algorithm:
              //  product = divisor multiplied by trial digit (n).
              //  Compare product and remainder.
              //  If product is greater than remainder:
              //    Subtract divisor from product, decrement trial digit.
              //  Subtract product from remainder.
              //  If product was less than remainder at the last compare:
              //    Compare new remainder and divisor.
              //    If remainder is greater than divisor:
              //      Subtract divisor from remainder, increment trial digit.

              if (n > 1) {

                // n may be > base only when base is 3.
                if (n >= base) n = base - 1;

                // product = divisor * trial digit.
                prod = multiply(yc, n, base);
                prodL = prod.length;
                remL = rem.length;

                // Compare product and remainder.
                // If product > remainder then trial digit n too high.
                // n is 1 too high about 5% of the time, and is not known to have
                // ever been more than 1 too high.
                while (compare(prod, rem, prodL, remL) == 1) {
                  n--;

                  // Subtract divisor from product.
                  subtract(prod, yL < prodL ? yz : yc, prodL, base);
                  prodL = prod.length;
                  cmp = 1;
                }
              } else {

                // n is 0 or 1, cmp is -1.
                // If n is 0, there is no need to compare yc and rem again below,
                // so change cmp to 1 to avoid it.
                // If n is 1, leave cmp as -1, so yc and rem are compared again.
                if (n == 0) {

                  // divisor < remainder, so n must be at least 1.
                  cmp = n = 1;
                }

                // product = divisor
                prod = yc.slice();
                prodL = prod.length;
              }

              if (prodL < remL) prod = [0].concat(prod);

              // Subtract product from remainder.
              subtract(rem, prod, remL, base);
              remL = rem.length;

               // If product was < remainder.
              if (cmp == -1) {

                // Compare divisor and new remainder.
                // If divisor < new remainder, subtract divisor from remainder.
                // Trial digit n too low.
                // n is 1 too low about 5% of the time, and very rarely 2 too low.
                while (compare(yc, rem, yL, remL) < 1) {
                  n++;

                  // Subtract divisor from remainder.
                  subtract(rem, yL < remL ? yz : yc, remL, base);
                  remL = rem.length;
                }
              }
            } else if (cmp === 0) {
              n++;
              rem = [0];
            } // else cmp === 1 and n will be 0

            // Add the next digit, n, to the result array.
            qc[i++] = n;

            // Update the remainder.
            if (rem[0]) {
              rem[remL++] = xc[xi] || 0;
            } else {
              rem = [xc[xi]];
              remL = 1;
            }
          } while ((xi++ < xL || rem[0] != null) && s--);

          more = rem[0] != null;

          // Leading zero?
          if (!qc[0]) qc.splice(0, 1);
        }

        if (base == BASE) {

          // To calculate q.e, first get the number of digits of qc[0].
          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);

          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);

        // Caller is convertBase.
        } else {
          q.e = e;
          q.r = +more;
        }

        return q;
      };
    })();


    /*
     * Return a string representing the value of BigNumber n in fixed-point or exponential
     * notation rounded to the specified decimal places or significant digits.
     *
     * n: a BigNumber.
     * i: the index of the last digit required (i.e. the digit that may be rounded up).
     * rm: the rounding mode.
     * id: 1 (toExponential) or 2 (toPrecision).
     */
    function format(n, i, rm, id) {
      var c0, e, ne, len, str;

      if (rm == null) rm = ROUNDING_MODE;
      else intCheck(rm, 0, 8);

      if (!n.c) return n.toString();

      c0 = n.c[0];
      ne = n.e;

      if (i == null) {
        str = coeffToString(n.c);
        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)
         ? toExponential(str, ne)
         : toFixedPoint(str, ne, '0');
      } else {
        n = round(new BigNumber(n), i, rm);

        // n.e may have changed if the value was rounded up.
        e = n.e;

        str = coeffToString(n.c);
        len = str.length;

        // toPrecision returns exponential notation if the number of significant digits
        // specified is less than the number of digits necessary to represent the integer
        // part of the value in fixed-point notation.

        // Exponential notation.
        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {

          // Append zeros?
          for (; len < i; str += '0', len++);
          str = toExponential(str, e);

        // Fixed-point notation.
        } else {
          i -= ne;
          str = toFixedPoint(str, e, '0');

          // Append zeros?
          if (e + 1 > len) {
            if (--i > 0) for (str += '.'; i--; str += '0');
          } else {
            i += e - len;
            if (i > 0) {
              if (e + 1 == len) str += '.';
              for (; i--; str += '0');
            }
          }
        }
      }

      return n.s < 0 && c0 ? '-' + str : str;
    }


    // Handle BigNumber.max and BigNumber.min.
    function maxOrMin(args, method) {
      var n,
        i = 1,
        m = new BigNumber(args[0]);

      for (; i < args.length; i++) {
        n = new BigNumber(args[i]);

        // If any number is NaN, return NaN.
        if (!n.s) {
          m = n;
          break;
        } else if (method.call(m, n)) {
          m = n;
        }
      }

      return m;
    }


    /*
     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.
     * Called by minus, plus and times.
     */
    function normalise(n, c, e) {
      var i = 1,
        j = c.length;

       // Remove trailing zeros.
      for (; !c[--j]; c.pop());

      // Calculate the base 10 exponent. First get the number of digits of c[0].
      for (j = c[0]; j >= 10; j /= 10, i++);

      // Overflow?
      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {

        // Infinity.
        n.c = n.e = null;

      // Underflow?
      } else if (e < MIN_EXP) {

        // Zero.
        n.c = [n.e = 0];
      } else {
        n.e = e;
        n.c = c;
      }

      return n;
    }


    // Handle values that fail the validity test in BigNumber.
    parseNumeric = (function () {
      var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i,
        dotAfter = /^([^.]+)\.$/,
        dotBefore = /^\.([^.]+)$/,
        isInfinityOrNaN = /^-?(Infinity|NaN)$/,
        whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;

      return function (x, str, isNum, b) {
        var base,
          s = isNum ? str : str.replace(whitespaceOrPlus, '');

        // No exception on ±Infinity or NaN.
        if (isInfinityOrNaN.test(s)) {
          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
        } else {
          if (!isNum) {

            // basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i
            s = s.replace(basePrefix, function (m, p1, p2) {
              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;
              return !b || b == base ? p1 : m;
            });

            if (b) {
              base = b;

              // E.g. '1.' to '1', '.1' to '0.1'
              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');
            }

            if (str != s) return new BigNumber(s, base);
          }

          // '[BigNumber Error] Not a number: {n}'
          // '[BigNumber Error] Not a base {b} number: {n}'
          if (BigNumber.DEBUG) {
            throw Error
              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);
          }

          // NaN
          x.s = null;
        }

        x.c = x.e = null;
      }
    })();


    /*
     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.
     * If r is truthy, it is known that there are more digits after the rounding digit.
     */
    function round(x, sd, rm, r) {
      var d, i, j, k, n, ni, rd,
        xc = x.c,
        pows10 = POWS_TEN;

      // if x is not Infinity or NaN...
      if (xc) {

        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.
        // n is a base 1e14 number, the value of the element of array x.c containing rd.
        // ni is the index of n within x.c.
        // d is the number of digits of n.
        // i is the index of rd within n including leading zeros.
        // j is the actual index of rd within n (if < 0, rd is a leading zero).
        out: {

          // Get the number of digits of the first element of xc.
          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);
          i = sd - d;

          // If the rounding digit is in the first element of xc...
          if (i < 0) {
            i += LOG_BASE;
            j = sd;
            n = xc[ni = 0];

            // Get the rounding digit at index j of n.
            rd = n / pows10[d - j - 1] % 10 | 0;
          } else {
            ni = mathceil((i + 1) / LOG_BASE);

            if (ni >= xc.length) {

              if (r) {

                // Needed by sqrt.
                for (; xc.length <= ni; xc.push(0));
                n = rd = 0;
                d = 1;
                i %= LOG_BASE;
                j = i - LOG_BASE + 1;
              } else {
                break out;
              }
            } else {
              n = k = xc[ni];

              // Get the number of digits of n.
              for (d = 1; k >= 10; k /= 10, d++);

              // Get the index of rd within n.
              i %= LOG_BASE;

              // Get the index of rd within n, adjusted for leading zeros.
              // The number of leading zeros of n is given by LOG_BASE - d.
              j = i - LOG_BASE + d;

              // Get the rounding digit at index j of n.
              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;
            }
          }

          r = r || sd < 0 ||

          // Are there any non-zero digits after the rounding digit?
          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right
          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);

          r = rm < 4
           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&

            // Check whether the digit to the left of the rounding digit is odd.
            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||
             rm == (x.s < 0 ? 8 : 7));

          if (sd < 1 || !xc[0]) {
            xc.length = 0;

            if (r) {

              // Convert sd to decimal places.
              sd -= x.e + 1;

              // 1, 0.1, 0.01, 0.001, 0.0001 etc.
              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
              x.e = -sd || 0;
            } else {

              // Zero.
              xc[0] = x.e = 0;
            }

            return x;
          }

          // Remove excess digits.
          if (i == 0) {
            xc.length = ni;
            k = 1;
            ni--;
          } else {
            xc.length = ni + 1;
            k = pows10[LOG_BASE - i];

            // E.g. 56700 becomes 56000 if 7 is the rounding digit.
            // j > 0 means i > number of leading zeros of n.
            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;
          }

          // Round up?
          if (r) {

            for (; ;) {

              // If the digit to be rounded up is in the first element of xc...
              if (ni == 0) {

                // i will be the length of xc[0] before k is added.
                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);
                j = xc[0] += k;
                for (k = 1; j >= 10; j /= 10, k++);

                // if i != k the length has increased.
                if (i != k) {
                  x.e++;
                  if (xc[0] == BASE) xc[0] = 1;
                }

                break;
              } else {
                xc[ni] += k;
                if (xc[ni] != BASE) break;
                xc[ni--] = 0;
                k = 1;
              }
            }
          }

          // Remove trailing zeros.
          for (i = xc.length; xc[--i] === 0; xc.pop());
        }

        // Overflow? Infinity.
        if (x.e > MAX_EXP) {
          x.c = x.e = null;

        // Underflow? Zero.
        } else if (x.e < MIN_EXP) {
          x.c = [x.e = 0];
        }
      }

      return x;
    }


    function valueOf(n) {
      var str,
        e = n.e;

      if (e === null) return n.toString();

      str = coeffToString(n.c);

      str = e <= TO_EXP_NEG || e >= TO_EXP_POS
        ? toExponential(str, e)
        : toFixedPoint(str, e, '0');

      return n.s < 0 ? '-' + str : str;
    }


    // PROTOTYPE/INSTANCE METHODS


    /*
     * Return a new BigNumber whose value is the absolute value of this BigNumber.
     */
    P.absoluteValue = P.abs = function () {
      var x = new BigNumber(this);
      if (x.s < 0) x.s = 1;
      return x;
    };


    /*
     * Return
     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),
     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),
     *   0 if they have the same value,
     *   or null if the value of either is NaN.
     */
    P.comparedTo = function (y, b) {
      return compare(this, new BigNumber(y, b));
    };


    /*
     * If dp is undefined or null or true or false, return the number of decimal places of the
     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
     *
     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this
     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or
     * ROUNDING_MODE if rm is omitted.
     *
     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     */
    P.decimalPlaces = P.dp = function (dp, rm) {
      var c, n, v,
        x = this;

      if (dp != null) {
        intCheck(dp, 0, MAX);
        if (rm == null) rm = ROUNDING_MODE;
        else intCheck(rm, 0, 8);

        return round(new BigNumber(x), dp + x.e + 1, rm);
      }

      if (!(c = x.c)) return null;
      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;

      // Subtract the number of trailing zeros of the last number.
      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);
      if (n < 0) n = 0;

      return n;
    };


    /*
     *  n / 0 = I
     *  n / N = N
     *  n / I = 0
     *  0 / n = 0
     *  0 / 0 = N
     *  0 / N = N
     *  0 / I = 0
     *  N / n = N
     *  N / 0 = N
     *  N / N = N
     *  N / I = N
     *  I / n = I
     *  I / 0 = I
     *  I / N = N
     *  I / I = N
     *
     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of
     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.
     */
    P.dividedBy = P.div = function (y, b) {
      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);
    };


    /*
     * Return a new BigNumber whose value is the integer part of dividing the value of this
     * BigNumber by the value of BigNumber(y, b).
     */
    P.dividedToIntegerBy = P.idiv = function (y, b) {
      return div(this, new BigNumber(y, b), 0, 1);
    };


    /*
     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.
     *
     * If m is present, return the result modulo m.
     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.
     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.
     *
     * The modular power operation works efficiently when x, n, and m are integers, otherwise it
     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.
     *
     * n {number|string|BigNumber} The exponent. An integer.
     * [m] {number|string|BigNumber} The modulus.
     *
     * '[BigNumber Error] Exponent not an integer: {n}'
     */
    P.exponentiatedBy = P.pow = function (n, m) {
      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,
        x = this;

      n = new BigNumber(n);

      // Allow NaN and ±Infinity, but not other non-integers.
      if (n.c && !n.isInteger()) {
        throw Error
          (bignumberError + 'Exponent not an integer: ' + valueOf(n));
      }

      if (m != null) m = new BigNumber(m);

      // Exponent of MAX_SAFE_INTEGER is 15.
      nIsBig = n.e > 14;

      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.
      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {

        // The sign of the result of pow when x is negative depends on the evenness of n.
        // If +n overflows to ±Infinity, the evenness of n would be not be known.
        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));
        return m ? y.mod(m) : y;
      }

      nIsNeg = n.s < 0;

      if (m) {

        // x % m returns NaN if abs(m) is zero, or m is NaN.
        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);

        isModExp = !nIsNeg && x.isInteger() && m.isInteger();

        if (isModExp) x = x.mod(m);

      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.
      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.
      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0
        // [1, 240000000]
        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7
        // [80000000000000]  [99999750000000]
        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {

        // If x is negative and n is odd, k = -0, else k = 0.
        k = x.s < 0 && isOdd(n) ? -0 : 0;

        // If x >= 1, k = ±Infinity.
        if (x.e > -1) k = 1 / k;

        // If n is negative return ±0, else return ±Infinity.
        return new BigNumber(nIsNeg ? 1 / k : k);

      } else if (POW_PRECISION) {

        // Truncating each coefficient array to a length of k after each multiplication
        // equates to truncating significant digits to POW_PRECISION + [28, 41],
        // i.e. there will be a minimum of 28 guard digits retained.
        k = mathceil(POW_PRECISION / LOG_BASE + 2);
      }

      if (nIsBig) {
        half = new BigNumber(0.5);
        if (nIsNeg) n.s = 1;
        nIsOdd = isOdd(n);
      } else {
        i = Math.abs(+valueOf(n));
        nIsOdd = i % 2;
      }

      y = new BigNumber(ONE);

      // Performs 54 loop iterations for n of 9007199254740991.
      for (; ;) {

        if (nIsOdd) {
          y = y.times(x);
          if (!y.c) break;

          if (k) {
            if (y.c.length > k) y.c.length = k;
          } else if (isModExp) {
            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));
          }
        }

        if (i) {
          i = mathfloor(i / 2);
          if (i === 0) break;
          nIsOdd = i % 2;
        } else {
          n = n.times(half);
          round(n, n.e + 1, 1);

          if (n.e > 14) {
            nIsOdd = isOdd(n);
          } else {
            i = +valueOf(n);
            if (i === 0) break;
            nIsOdd = i % 2;
          }
        }

        x = x.times(x);

        if (k) {
          if (x.c && x.c.length > k) x.c.length = k;
        } else if (isModExp) {
          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));
        }
      }

      if (isModExp) return y;
      if (nIsNeg) y = ONE.div(y);

      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;
    };


    /*
     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer
     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.
     *
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'
     */
    P.integerValue = function (rm) {
      var n = new BigNumber(this);
      if (rm == null) rm = ROUNDING_MODE;
      else intCheck(rm, 0, 8);
      return round(n, n.e + 1, rm);
    };


    /*
     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),
     * otherwise return false.
     */
    P.isEqualTo = P.eq = function (y, b) {
      return compare(this, new BigNumber(y, b)) === 0;
    };


    /*
     * Return true if the value of this BigNumber is a finite number, otherwise return false.
     */
    P.isFinite = function () {
      return !!this.c;
    };


    /*
     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),
     * otherwise return false.
     */
    P.isGreaterThan = P.gt = function (y, b) {
      return compare(this, new BigNumber(y, b)) > 0;
    };


    /*
     * Return true if the value of this BigNumber is greater than or equal to the value of
     * BigNumber(y, b), otherwise return false.
     */
    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {
      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;

    };


    /*
     * Return true if the value of this BigNumber is an integer, otherwise return false.
     */
    P.isInteger = function () {
      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
    };


    /*
     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),
     * otherwise return false.
     */
    P.isLessThan = P.lt = function (y, b) {
      return compare(this, new BigNumber(y, b)) < 0;
    };


    /*
     * Return true if the value of this BigNumber is less than or equal to the value of
     * BigNumber(y, b), otherwise return false.
     */
    P.isLessThanOrEqualTo = P.lte = function (y, b) {
      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;
    };


    /*
     * Return true if the value of this BigNumber is NaN, otherwise return false.
     */
    P.isNaN = function () {
      return !this.s;
    };


    /*
     * Return true if the value of this BigNumber is negative, otherwise return false.
     */
    P.isNegative = function () {
      return this.s < 0;
    };


    /*
     * Return true if the value of this BigNumber is positive, otherwise return false.
     */
    P.isPositive = function () {
      return this.s > 0;
    };


    /*
     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.
     */
    P.isZero = function () {
      return !!this.c && this.c[0] == 0;
    };


    /*
     *  n - 0 = n
     *  n - N = N
     *  n - I = -I
     *  0 - n = -n
     *  0 - 0 = 0
     *  0 - N = N
     *  0 - I = -I
     *  N - n = N
     *  N - 0 = N
     *  N - N = N
     *  N - I = N
     *  I - n = I
     *  I - 0 = I
     *  I - N = N
     *  I - I = N
     *
     * Return a new BigNumber whose value is the value of this BigNumber minus the value of
     * BigNumber(y, b).
     */
    P.minus = function (y, b) {
      var i, j, t, xLTy,
        x = this,
        a = x.s;

      y = new BigNumber(y, b);
      b = y.s;

      // Either NaN?
      if (!a || !b) return new BigNumber(NaN);

      // Signs differ?
      if (a != b) {
        y.s = -b;
        return x.plus(y);
      }

      var xe = x.e / LOG_BASE,
        ye = y.e / LOG_BASE,
        xc = x.c,
        yc = y.c;

      if (!xe || !ye) {

        // Either Infinity?
        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);

        // Either zero?
        if (!xc[0] || !yc[0]) {

          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :

           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
           ROUNDING_MODE == 3 ? -0 : 0);
        }
      }

      xe = bitFloor(xe);
      ye = bitFloor(ye);
      xc = xc.slice();

      // Determine which is the bigger number.
      if (a = xe - ye) {

        if (xLTy = a < 0) {
          a = -a;
          t = xc;
        } else {
          ye = xe;
          t = yc;
        }

        t.reverse();

        // Prepend zeros to equalise exponents.
        for (b = a; b--; t.push(0));
        t.reverse();
      } else {

        // Exponents equal. Check digit by digit.
        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;

        for (a = b = 0; b < j; b++) {

          if (xc[b] != yc[b]) {
            xLTy = xc[b] < yc[b];
            break;
          }
        }
      }

      // x < y? Point xc to the array of the bigger number.
      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;

      b = (j = yc.length) - (i = xc.length);

      // Append zeros to xc if shorter.
      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.
      if (b > 0) for (; b--; xc[i++] = 0);
      b = BASE - 1;

      // Subtract yc from xc.
      for (; j > a;) {

        if (xc[--j] < yc[j]) {
          for (i = j; i && !xc[--i]; xc[i] = b);
          --xc[i];
          xc[j] += BASE;
        }

        xc[j] -= yc[j];
      }

      // Remove leading zeros and adjust exponent accordingly.
      for (; xc[0] == 0; xc.splice(0, 1), --ye);

      // Zero?
      if (!xc[0]) {

        // Following IEEE 754 (2008) 6.3,
        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.
        y.s = ROUNDING_MODE == 3 ? -1 : 1;
        y.c = [y.e = 0];
        return y;
      }

      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity
      // for finite x and y.
      return normalise(y, xc, ye);
    };


    /*
     *   n % 0 =  N
     *   n % N =  N
     *   n % I =  n
     *   0 % n =  0
     *  -0 % n = -0
     *   0 % 0 =  N
     *   0 % N =  N
     *   0 % I =  0
     *   N % n =  N
     *   N % 0 =  N
     *   N % N =  N
     *   N % I =  N
     *   I % n =  N
     *   I % 0 =  N
     *   I % N =  N
     *   I % I =  N
     *
     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of
     * BigNumber(y, b). The result depends on the value of MODULO_MODE.
     */
    P.modulo = P.mod = function (y, b) {
      var q, s,
        x = this;

      y = new BigNumber(y, b);

      // Return NaN if x is Infinity or NaN, or y is NaN or zero.
      if (!x.c || !y.s || y.c && !y.c[0]) {
        return new BigNumber(NaN);

      // Return x if y is Infinity or x is zero.
      } else if (!y.c || x.c && !x.c[0]) {
        return new BigNumber(x);
      }

      if (MODULO_MODE == 9) {

        // Euclidian division: q = sign(y) * floor(x / abs(y))
        // r = x - qy    where  0 <= r < abs(y)
        s = y.s;
        y.s = 1;
        q = div(x, y, 0, 3);
        y.s = s;
        q.s *= s;
      } else {
        q = div(x, y, 0, MODULO_MODE);
      }

      y = x.minus(q.times(y));

      // To match JavaScript %, ensure sign of zero is sign of dividend.
      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;

      return y;
    };


    /*
     *  n * 0 = 0
     *  n * N = N
     *  n * I = I
     *  0 * n = 0
     *  0 * 0 = 0
     *  0 * N = N
     *  0 * I = N
     *  N * n = N
     *  N * 0 = N
     *  N * N = N
     *  N * I = N
     *  I * n = I
     *  I * 0 = N
     *  I * N = N
     *  I * I = I
     *
     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value
     * of BigNumber(y, b).
     */
    P.multipliedBy = P.times = function (y, b) {
      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,
        base, sqrtBase,
        x = this,
        xc = x.c,
        yc = (y = new BigNumber(y, b)).c;

      // Either NaN, ±Infinity or ±0?
      if (!xc || !yc || !xc[0] || !yc[0]) {

        // Return NaN if either is NaN, or one is 0 and the other is Infinity.
        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {
          y.c = y.e = y.s = null;
        } else {
          y.s *= x.s;

          // Return ±Infinity if either is ±Infinity.
          if (!xc || !yc) {
            y.c = y.e = null;

          // Return ±0 if either is ±0.
          } else {
            y.c = [0];
            y.e = 0;
          }
        }

        return y;
      }

      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
      y.s *= x.s;
      xcL = xc.length;
      ycL = yc.length;

      // Ensure xc points to longer array and xcL to its length.
      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;

      // Initialise the result array with zeros.
      for (i = xcL + ycL, zc = []; i--; zc.push(0));

      base = BASE;
      sqrtBase = SQRT_BASE;

      for (i = ycL; --i >= 0;) {
        c = 0;
        ylo = yc[i] % sqrtBase;
        yhi = yc[i] / sqrtBase | 0;

        for (k = xcL, j = i + k; j > i;) {
          xlo = xc[--k] % sqrtBase;
          xhi = xc[k] / sqrtBase | 0;
          m = yhi * xlo + xhi * ylo;
          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;
          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;
          zc[j--] = xlo % base;
        }

        zc[j] = c;
      }

      if (c) {
        ++e;
      } else {
        zc.splice(0, 1);
      }

      return normalise(y, zc, e);
    };


    /*
     * Return a new BigNumber whose value is the value of this BigNumber negated,
     * i.e. multiplied by -1.
     */
    P.negated = function () {
      var x = new BigNumber(this);
      x.s = -x.s || null;
      return x;
    };


    /*
     *  n + 0 = n
     *  n + N = N
     *  n + I = I
     *  0 + n = n
     *  0 + 0 = 0
     *  0 + N = N
     *  0 + I = I
     *  N + n = N
     *  N + 0 = N
     *  N + N = N
     *  N + I = N
     *  I + n = I
     *  I + 0 = I
     *  I + N = N
     *  I + I = I
     *
     * Return a new BigNumber whose value is the value of this BigNumber plus the value of
     * BigNumber(y, b).
     */
    P.plus = function (y, b) {
      var t,
        x = this,
        a = x.s;

      y = new BigNumber(y, b);
      b = y.s;

      // Either NaN?
      if (!a || !b) return new BigNumber(NaN);

      // Signs differ?
       if (a != b) {
        y.s = -b;
        return x.minus(y);
      }

      var xe = x.e / LOG_BASE,
        ye = y.e / LOG_BASE,
        xc = x.c,
        yc = y.c;

      if (!xe || !ye) {

        // Return ±Infinity if either ±Infinity.
        if (!xc || !yc) return new BigNumber(a / 0);

        // Either zero?
        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);
      }

      xe = bitFloor(xe);
      ye = bitFloor(ye);
      xc = xc.slice();

      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.
      if (a = xe - ye) {
        if (a > 0) {
          ye = xe;
          t = yc;
        } else {
          a = -a;
          t = xc;
        }

        t.reverse();
        for (; a--; t.push(0));
        t.reverse();
      }

      a = xc.length;
      b = yc.length;

      // Point xc to the longer array, and b to the shorter length.
      if (a - b < 0) t = yc, yc = xc, xc = t, b = a;

      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.
      for (a = 0; b;) {
        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;
        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;
      }

      if (a) {
        xc = [a].concat(xc);
        ++ye;
      }

      // No need to check for zero, as +x + +y != 0 && -x + -y != 0
      // ye = MAX_EXP + 1 possible
      return normalise(y, xc, ye);
    };


    /*
     * If sd is undefined or null or true or false, return the number of significant digits of
     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
     * If sd is true include integer-part trailing zeros in the count.
     *
     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this
     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or
     * ROUNDING_MODE if rm is omitted.
     *
     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.
     *                     boolean: whether to count integer-part trailing zeros: true or false.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
     */
    P.precision = P.sd = function (sd, rm) {
      var c, n, v,
        x = this;

      if (sd != null && sd !== !!sd) {
        intCheck(sd, 1, MAX);
        if (rm == null) rm = ROUNDING_MODE;
        else intCheck(rm, 0, 8);

        return round(new BigNumber(x), sd, rm);
      }

      if (!(c = x.c)) return null;
      v = c.length - 1;
      n = v * LOG_BASE + 1;

      if (v = c[v]) {

        // Subtract the number of trailing zeros of the last element.
        for (; v % 10 == 0; v /= 10, n--);

        // Add the number of digits of the first element.
        for (v = c[0]; v >= 10; v /= 10, n++);
      }

      if (sd && x.e + 1 > n) n = x.e + 1;

      return n;
    };


    /*
     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places
     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.
     *
     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'
     */
    P.shiftedBy = function (k) {
      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
      return this.times('1e' + k);
    };


    /*
     *  sqrt(-n) =  N
     *  sqrt(N) =  N
     *  sqrt(-I) =  N
     *  sqrt(I) =  I
     *  sqrt(0) =  0
     *  sqrt(-0) = -0
     *
     * Return a new BigNumber whose value is the square root of the value of this BigNumber,
     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.
     */
    P.squareRoot = P.sqrt = function () {
      var m, n, r, rep, t,
        x = this,
        c = x.c,
        s = x.s,
        e = x.e,
        dp = DECIMAL_PLACES + 4,
        half = new BigNumber('0.5');

      // Negative/NaN/Infinity/zero?
      if (s !== 1 || !c || !c[0]) {
        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
      }

      // Initial estimate.
      s = Math.sqrt(+valueOf(x));

      // Math.sqrt underflow/overflow?
      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
      if (s == 0 || s == 1 / 0) {
        n = coeffToString(c);
        if ((n.length + e) % 2 == 0) n += '0';
        s = Math.sqrt(+n);
        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);

        if (s == 1 / 0) {
          n = '5e' + e;
        } else {
          n = s.toExponential();
          n = n.slice(0, n.indexOf('e') + 1) + e;
        }

        r = new BigNumber(n);
      } else {
        r = new BigNumber(s + '');
      }

      // Check for zero.
      // r could be zero if MIN_EXP is changed after the this value was created.
      // This would cause a division by zero (x/t) and hence Infinity below, which would cause
      // coeffToString to throw.
      if (r.c[0]) {
        e = r.e;
        s = e + dp;
        if (s < 3) s = 0;

        // Newton-Raphson iteration.
        for (; ;) {
          t = r;
          r = half.times(t.plus(div(x, t, dp, 1)));

          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {

            // The exponent of r may here be one less than the final result exponent,
            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits
            // are indexed correctly.
            if (r.e < e) --s;
            n = n.slice(s - 3, s + 1);

            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits
            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the
            // iteration.
            if (n == '9999' || !rep && n == '4999') {

              // On the first iteration only, check to see if rounding up gives the
              // exact result as the nines may infinitely repeat.
              if (!rep) {
                round(t, t.e + DECIMAL_PLACES + 2, 0);

                if (t.times(t).eq(x)) {
                  r = t;
                  break;
                }
              }

              dp += 4;
              s += 4;
              rep = 1;
            } else {

              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact
              // result. If not, then there are further digits and m will be truthy.
              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {

                // Truncate to the first rounding digit.
                round(r, r.e + DECIMAL_PLACES + 2, 1);
                m = !r.times(r).eq(x);
              }

              break;
            }
          }
        }
      }

      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
    };


    /*
     * Return a string representing the value of this BigNumber in exponential notation and
     * rounded using ROUNDING_MODE to dp fixed decimal places.
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     */
    P.toExponential = function (dp, rm) {
      if (dp != null) {
        intCheck(dp, 0, MAX);
        dp++;
      }
      return format(this, dp, rm, 1);
    };


    /*
     * Return a string representing the value of this BigNumber in fixed-point notation rounding
     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.
     *
     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',
     * but e.g. (-0.00001).toFixed(0) is '-0'.
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     */
    P.toFixed = function (dp, rm) {
      if (dp != null) {
        intCheck(dp, 0, MAX);
        dp = dp + this.e + 1;
      }
      return format(this, dp, rm);
    };


    /*
     * Return a string representing the value of this BigNumber in fixed-point notation rounded
     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties
     * of the format or FORMAT object (see BigNumber.set).
     *
     * The formatting object may contain some or all of the properties shown below.
     *
     * FORMAT = {
     *   prefix: '',
     *   groupSize: 3,
     *   secondaryGroupSize: 0,
     *   groupSeparator: ',',
     *   decimalSeparator: '.',
     *   fractionGroupSize: 0,
     *   fractionGroupSeparator: '\xA0',      // non-breaking space
     *   suffix: ''
     * };
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     * [format] {object} Formatting options. See FORMAT pbject above.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     * '[BigNumber Error] Argument not an object: {format}'
     */
    P.toFormat = function (dp, rm, format) {
      var str,
        x = this;

      if (format == null) {
        if (dp != null && rm && typeof rm == 'object') {
          format = rm;
          rm = null;
        } else if (dp && typeof dp == 'object') {
          format = dp;
          dp = rm = null;
        } else {
          format = FORMAT;
        }
      } else if (typeof format != 'object') {
        throw Error
          (bignumberError + 'Argument not an object: ' + format);
      }

      str = x.toFixed(dp, rm);

      if (x.c) {
        var i,
          arr = str.split('.'),
          g1 = +format.groupSize,
          g2 = +format.secondaryGroupSize,
          groupSeparator = format.groupSeparator || '',
          intPart = arr[0],
          fractionPart = arr[1],
          isNeg = x.s < 0,
          intDigits = isNeg ? intPart.slice(1) : intPart,
          len = intDigits.length;

        if (g2) i = g1, g1 = g2, g2 = i, len -= i;

        if (g1 > 0 && len > 0) {
          i = len % g1 || g1;
          intPart = intDigits.substr(0, i);
          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);
          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);
          if (isNeg) intPart = '-' + intPart;
        }

        str = fractionPart
         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)
          ? fractionPart.replace(new RegExp('\\d{' + g2 + '}\\B', 'g'),
           '$&' + (format.fractionGroupSeparator || ''))
          : fractionPart)
         : intPart;
      }

      return (format.prefix || '') + str + (format.suffix || '');
    };


    /*
     * Return an array of two BigNumbers representing the value of this BigNumber as a simple
     * fraction with an integer numerator and an integer denominator.
     * The denominator will be a positive non-zero value less than or equal to the specified
     * maximum denominator. If a maximum denominator is not specified, the denominator will be
     * the lowest value necessary to represent the number exactly.
     *
     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.
     *
     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'
     */
    P.toFraction = function (md) {
      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,
        x = this,
        xc = x.c;

      if (md != null) {
        n = new BigNumber(md);

        // Throw if md is less than one or is not an integer, unless it is Infinity.
        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {
          throw Error
            (bignumberError + 'Argument ' +
              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));
        }
      }

      if (!xc) return new BigNumber(x);

      d = new BigNumber(ONE);
      n1 = d0 = new BigNumber(ONE);
      d1 = n0 = new BigNumber(ONE);
      s = coeffToString(xc);

      // Determine initial denominator.
      // d is a power of 10 and the minimum max denominator that specifies the value exactly.
      e = d.e = s.length - x.e - 1;
      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;

      exp = MAX_EXP;
      MAX_EXP = 1 / 0;
      n = new BigNumber(s);

      // n0 = d1 = 0
      n0.c[0] = 0;

      for (; ;)  {
        q = div(n, d, 0, 1);
        d2 = d0.plus(q.times(d1));
        if (d2.comparedTo(md) == 1) break;
        d0 = d1;
        d1 = d2;
        n1 = n0.plus(q.times(d2 = n1));
        n0 = d2;
        d = n.minus(q.times(d2 = d));
        n = d2;
      }

      d2 = div(md.minus(d0), d1, 0, 1);
      n0 = n0.plus(d2.times(n1));
      d0 = d0.plus(d2.times(d1));
      n0.s = n1.s = x.s;
      e = e * 2;

      // Determine which fraction is closer to x, n0/d0 or n1/d1
      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(
          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];

      MAX_EXP = exp;

      return r;
    };


    /*
     * Return the value of this BigNumber converted to a number primitive.
     */
    P.toNumber = function () {
      return +valueOf(this);
    };


    /*
     * Return a string representing the value of this BigNumber rounded to sd significant digits
     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits
     * necessary to represent the integer part of the value in fixed-point notation, then use
     * exponential notation.
     *
     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
     */
    P.toPrecision = function (sd, rm) {
      if (sd != null) intCheck(sd, 1, MAX);
      return format(this, sd, rm, 2);
    };


    /*
     * Return a string representing the value of this BigNumber in base b, or base 10 if b is
     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and
     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent
     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than
     * TO_EXP_NEG, return exponential notation.
     *
     * [b] {number} Integer, 2 to ALPHABET.length inclusive.
     *
     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
     */
    P.toString = function (b) {
      var str,
        n = this,
        s = n.s,
        e = n.e;

      // Infinity or NaN?
      if (e === null) {
        if (s) {
          str = 'Infinity';
          if (s < 0) str = '-' + str;
        } else {
          str = 'NaN';
        }
      } else {
        if (b == null) {
          str = e <= TO_EXP_NEG || e >= TO_EXP_POS
           ? toExponential(coeffToString(n.c), e)
           : toFixedPoint(coeffToString(n.c), e, '0');
        } else if (b === 10 && alphabetHasNormalDecimalDigits) {
          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);
          str = toFixedPoint(coeffToString(n.c), n.e, '0');
        } else {
          intCheck(b, 2, ALPHABET.length, 'Base');
          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);
        }

        if (s < 0 && n.c[0]) str = '-' + str;
      }

      return str;
    };


    /*
     * Return as toString, but do not accept a base argument, and include the minus sign for
     * negative zero.
     */
    P.valueOf = P.toJSON = function () {
      return valueOf(this);
    };


    P._isBigNumber = true;

    if (configObject != null) BigNumber.set(configObject);

    return BigNumber;
  }


  // PRIVATE HELPER FUNCTIONS

  // These functions don't need access to variables,
  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.


  function bitFloor(n) {
    var i = n | 0;
    return n > 0 || n === i ? i : i - 1;
  }


  // Return a coefficient array as a string of base 10 digits.
  function coeffToString(a) {
    var s, z,
      i = 1,
      j = a.length,
      r = a[0] + '';

    for (; i < j;) {
      s = a[i++] + '';
      z = LOG_BASE - s.length;
      for (; z--; s = '0' + s);
      r += s;
    }

    // Determine trailing zeros.
    for (j = r.length; r.charCodeAt(--j) === 48;);

    return r.slice(0, j + 1 || 1);
  }


  // Compare the value of BigNumbers x and y.
  function compare(x, y) {
    var a, b,
      xc = x.c,
      yc = y.c,
      i = x.s,
      j = y.s,
      k = x.e,
      l = y.e;

    // Either NaN?
    if (!i || !j) return null;

    a = xc && !xc[0];
    b = yc && !yc[0];

    // Either zero?
    if (a || b) return a ? b ? 0 : -j : i;

    // Signs differ?
    if (i != j) return i;

    a = i < 0;
    b = k == l;

    // Either Infinity?
    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;

    // Compare exponents.
    if (!b) return k > l ^ a ? 1 : -1;

    j = (k = xc.length) < (l = yc.length) ? k : l;

    // Compare digit by digit.
    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;

    // Compare lengths.
    return k == l ? 0 : k > l ^ a ? 1 : -1;
  }


  /*
   * Check that n is a primitive number, an integer, and in range, otherwise throw.
   */
  function intCheck(n, min, max, name) {
    if (n < min || n > max || n !== mathfloor(n)) {
      throw Error
       (bignumberError + (name || 'Argument') + (typeof n == 'number'
         ? n < min || n > max ? ' out of range: ' : ' not an integer: '
         : ' not a primitive number: ') + String(n));
    }
  }


  // Assumes finite n.
  function isOdd(n) {
    var k = n.c.length - 1;
    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;
  }


  function toExponential(str, e) {
    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +
     (e < 0 ? 'e' : 'e+') + e;
  }


  function toFixedPoint(str, e, z) {
    var len, zs;

    // Negative exponent?
    if (e < 0) {

      // Prepend zeros.
      for (zs = z + '.'; ++e; zs += z);
      str = zs + str;

    // Positive exponent
    } else {
      len = str.length;

      // Append zeros.
      if (++e > len) {
        for (zs = z, e -= len; --e; zs += z);
        str += zs;
      } else if (e < len) {
        str = str.slice(0, e) + '.' + str.slice(e);
      }
    }

    return str;
  }


  // EXPORT


  BigNumber = clone();
  BigNumber['default'] = BigNumber.BigNumber = BigNumber;

  // AMD.
  if (true) {
    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () { return BigNumber; }).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

  // Node.js and other environments that support module.exports.
  } else {}
})(this);


/***/ }),

/***/ "./node_modules/call-bind/callBound.js":
/*!*********************************************!*\
  !*** ./node_modules/call-bind/callBound.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var GetIntrinsic = __webpack_require__(/*! get-intrinsic */ "./node_modules/get-intrinsic/index.js");

var callBind = __webpack_require__(/*! ./ */ "./node_modules/call-bind/index.js");

var $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));

module.exports = function callBoundIntrinsic(name, allowMissing) {
	var intrinsic = GetIntrinsic(name, !!allowMissing);
	if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {
		return callBind(intrinsic);
	}
	return intrinsic;
};


/***/ }),

/***/ "./node_modules/call-bind/index.js":
/*!*****************************************!*\
  !*** ./node_modules/call-bind/index.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var bind = __webpack_require__(/*! function-bind */ "./node_modules/function-bind/index.js");
var GetIntrinsic = __webpack_require__(/*! get-intrinsic */ "./node_modules/get-intrinsic/index.js");

var $apply = GetIntrinsic('%Function.prototype.apply%');
var $call = GetIntrinsic('%Function.prototype.call%');
var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);

var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);
var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);
var $max = GetIntrinsic('%Math.max%');

if ($defineProperty) {
	try {
		$defineProperty({}, 'a', { value: 1 });
	} catch (e) {
		// IE 8 has a broken defineProperty
		$defineProperty = null;
	}
}

module.exports = function callBind(originalFunction) {
	var func = $reflectApply(bind, $call, arguments);
	if ($gOPD && $defineProperty) {
		var desc = $gOPD(func, 'length');
		if (desc.configurable) {
			// original length, plus the receiver, minus any additional arguments (after the receiver)
			$defineProperty(
				func,
				'length',
				{ value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) }
			);
		}
	}
	return func;
};

var applyBind = function applyBind() {
	return $reflectApply(bind, $apply, arguments);
};

if ($defineProperty) {
	$defineProperty(module.exports, 'apply', { value: applyBind });
} else {
	module.exports.apply = applyBind;
}


/***/ }),

/***/ "./node_modules/dayjs/dayjs.min.js":
/*!*****************************************!*\
  !*** ./node_modules/dayjs/dayjs.min.js ***!
  \*****************************************/
/***/ (function(module) {

!function(t,e){ true?module.exports=e():0}(this,(function(){"use strict";var t=1e3,e=6e4,n=36e5,r="millisecond",i="second",s="minute",u="hour",a="day",o="week",f="month",h="quarter",c="year",d="date",$="Invalid Date",l=/^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/,y=/\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,M={name:"en",weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_")},m=function(t,e,n){var r=String(t);return!r||r.length>=e?t:""+Array(e+1-r.length).join(n)+t},g={s:m,z:function(t){var e=-t.utcOffset(),n=Math.abs(e),r=Math.floor(n/60),i=n%60;return(e<=0?"+":"-")+m(r,2,"0")+":"+m(i,2,"0")},m:function t(e,n){if(e.date()<n.date())return-t(n,e);var r=12*(n.year()-e.year())+(n.month()-e.month()),i=e.clone().add(r,f),s=n-i<0,u=e.clone().add(r+(s?-1:1),f);return+(-(r+(n-i)/(s?i-u:u-i))||0)},a:function(t){return t<0?Math.ceil(t)||0:Math.floor(t)},p:function(t){return{M:f,y:c,w:o,d:a,D:d,h:u,m:s,s:i,ms:r,Q:h}[t]||String(t||"").toLowerCase().replace(/s$/,"")},u:function(t){return void 0===t}},v="en",D={};D[v]=M;var p=function(t){return t instanceof _},S=function t(e,n,r){var i;if(!e)return v;if("string"==typeof e){var s=e.toLowerCase();D[s]&&(i=s),n&&(D[s]=n,i=s);var u=e.split("-");if(!i&&u.length>1)return t(u[0])}else{var a=e.name;D[a]=e,i=a}return!r&&i&&(v=i),i||!r&&v},w=function(t,e){if(p(t))return t.clone();var n="object"==typeof e?e:{};return n.date=t,n.args=arguments,new _(n)},O=g;O.l=S,O.i=p,O.w=function(t,e){return w(t,{locale:e.$L,utc:e.$u,x:e.$x,$offset:e.$offset})};var _=function(){function M(t){this.$L=S(t.locale,null,!0),this.parse(t)}var m=M.prototype;return m.parse=function(t){this.$d=function(t){var e=t.date,n=t.utc;if(null===e)return new Date(NaN);if(O.u(e))return new Date;if(e instanceof Date)return new Date(e);if("string"==typeof e&&!/Z$/i.test(e)){var r=e.match(l);if(r){var i=r[2]-1||0,s=(r[7]||"0").substring(0,3);return n?new Date(Date.UTC(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)):new Date(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)}}return new Date(e)}(t),this.$x=t.x||{},this.init()},m.init=function(){var t=this.$d;this.$y=t.getFullYear(),this.$M=t.getMonth(),this.$D=t.getDate(),this.$W=t.getDay(),this.$H=t.getHours(),this.$m=t.getMinutes(),this.$s=t.getSeconds(),this.$ms=t.getMilliseconds()},m.$utils=function(){return O},m.isValid=function(){return!(this.$d.toString()===$)},m.isSame=function(t,e){var n=w(t);return this.startOf(e)<=n&&n<=this.endOf(e)},m.isAfter=function(t,e){return w(t)<this.startOf(e)},m.isBefore=function(t,e){return this.endOf(e)<w(t)},m.$g=function(t,e,n){return O.u(t)?this[e]:this.set(n,t)},m.unix=function(){return Math.floor(this.valueOf()/1e3)},m.valueOf=function(){return this.$d.getTime()},m.startOf=function(t,e){var n=this,r=!!O.u(e)||e,h=O.p(t),$=function(t,e){var i=O.w(n.$u?Date.UTC(n.$y,e,t):new Date(n.$y,e,t),n);return r?i:i.endOf(a)},l=function(t,e){return O.w(n.toDate()[t].apply(n.toDate("s"),(r?[0,0,0,0]:[23,59,59,999]).slice(e)),n)},y=this.$W,M=this.$M,m=this.$D,g="set"+(this.$u?"UTC":"");switch(h){case c:return r?$(1,0):$(31,11);case f:return r?$(1,M):$(0,M+1);case o:var v=this.$locale().weekStart||0,D=(y<v?y+7:y)-v;return $(r?m-D:m+(6-D),M);case a:case d:return l(g+"Hours",0);case u:return l(g+"Minutes",1);case s:return l(g+"Seconds",2);case i:return l(g+"Milliseconds",3);default:return this.clone()}},m.endOf=function(t){return this.startOf(t,!1)},m.$set=function(t,e){var n,o=O.p(t),h="set"+(this.$u?"UTC":""),$=(n={},n[a]=h+"Date",n[d]=h+"Date",n[f]=h+"Month",n[c]=h+"FullYear",n[u]=h+"Hours",n[s]=h+"Minutes",n[i]=h+"Seconds",n[r]=h+"Milliseconds",n)[o],l=o===a?this.$D+(e-this.$W):e;if(o===f||o===c){var y=this.clone().set(d,1);y.$d[$](l),y.init(),this.$d=y.set(d,Math.min(this.$D,y.daysInMonth())).$d}else $&&this.$d[$](l);return this.init(),this},m.set=function(t,e){return this.clone().$set(t,e)},m.get=function(t){return this[O.p(t)]()},m.add=function(r,h){var d,$=this;r=Number(r);var l=O.p(h),y=function(t){var e=w($);return O.w(e.date(e.date()+Math.round(t*r)),$)};if(l===f)return this.set(f,this.$M+r);if(l===c)return this.set(c,this.$y+r);if(l===a)return y(1);if(l===o)return y(7);var M=(d={},d[s]=e,d[u]=n,d[i]=t,d)[l]||1,m=this.$d.getTime()+r*M;return O.w(m,this)},m.subtract=function(t,e){return this.add(-1*t,e)},m.format=function(t){var e=this,n=this.$locale();if(!this.isValid())return n.invalidDate||$;var r=t||"YYYY-MM-DDTHH:mm:ssZ",i=O.z(this),s=this.$H,u=this.$m,a=this.$M,o=n.weekdays,f=n.months,h=function(t,n,i,s){return t&&(t[n]||t(e,r))||i[n].slice(0,s)},c=function(t){return O.s(s%12||12,t,"0")},d=n.meridiem||function(t,e,n){var r=t<12?"AM":"PM";return n?r.toLowerCase():r},l={YY:String(this.$y).slice(-2),YYYY:this.$y,M:a+1,MM:O.s(a+1,2,"0"),MMM:h(n.monthsShort,a,f,3),MMMM:h(f,a),D:this.$D,DD:O.s(this.$D,2,"0"),d:String(this.$W),dd:h(n.weekdaysMin,this.$W,o,2),ddd:h(n.weekdaysShort,this.$W,o,3),dddd:o[this.$W],H:String(s),HH:O.s(s,2,"0"),h:c(1),hh:c(2),a:d(s,u,!0),A:d(s,u,!1),m:String(u),mm:O.s(u,2,"0"),s:String(this.$s),ss:O.s(this.$s,2,"0"),SSS:O.s(this.$ms,3,"0"),Z:i};return r.replace(y,(function(t,e){return e||l[t]||i.replace(":","")}))},m.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},m.diff=function(r,d,$){var l,y=O.p(d),M=w(r),m=(M.utcOffset()-this.utcOffset())*e,g=this-M,v=O.m(this,M);return v=(l={},l[c]=v/12,l[f]=v,l[h]=v/3,l[o]=(g-m)/6048e5,l[a]=(g-m)/864e5,l[u]=g/n,l[s]=g/e,l[i]=g/t,l)[y]||g,$?v:O.a(v)},m.daysInMonth=function(){return this.endOf(f).$D},m.$locale=function(){return D[this.$L]},m.locale=function(t,e){if(!t)return this.$L;var n=this.clone(),r=S(t,e,!0);return r&&(n.$L=r),n},m.clone=function(){return O.w(this.$d,this)},m.toDate=function(){return new Date(this.valueOf())},m.toJSON=function(){return this.isValid()?this.toISOString():null},m.toISOString=function(){return this.$d.toISOString()},m.toString=function(){return this.$d.toUTCString()},M}(),T=_.prototype;return w.prototype=T,[["$ms",r],["$s",i],["$m",s],["$H",u],["$W",a],["$M",f],["$y",c],["$D",d]].forEach((function(t){T[t[1]]=function(e){return this.$g(e,t[0],t[1])}})),w.extend=function(t,e){return t.$i||(t(e,_,w),t.$i=!0),w},w.locale=S,w.isDayjs=p,w.unix=function(t){return w(1e3*t)},w.en=D[v],w.Ls=D,w.p={},w}));

/***/ }),

/***/ "./node_modules/dayjs/plugin/advancedFormat.js":
/*!*****************************************************!*\
  !*** ./node_modules/dayjs/plugin/advancedFormat.js ***!
  \*****************************************************/
/***/ (function(module) {

!function(e,t){ true?module.exports=t():0}(this,(function(){"use strict";return function(e,t,r){var n=t.prototype,s=n.format;r.en.ordinal=function(e){var t=["th","st","nd","rd"],r=e%100;return"["+e+(t[(r-20)%10]||t[r]||t[0])+"]"},n.format=function(e){var t=this,r=this.$locale();if(!this.isValid())return s.bind(this)(e);var n=this.$utils(),a=(e||"YYYY-MM-DDTHH:mm:ssZ").replace(/\[([^\]]+)]|Q|wo|ww|w|WW|W|zzz|z|gggg|GGGG|Do|X|x|k{1,2}|S/g,(function(e){switch(e){case"Q":return Math.ceil((t.$M+1)/3);case"Do":return r.ordinal(t.$D);case"gggg":return t.weekYear();case"GGGG":return t.isoWeekYear();case"wo":return r.ordinal(t.week(),"W");case"w":case"ww":return n.s(t.week(),"w"===e?1:2,"0");case"W":case"WW":return n.s(t.isoWeek(),"W"===e?1:2,"0");case"k":case"kk":return n.s(String(0===t.$H?24:t.$H),"k"===e?1:2,"0");case"X":return Math.floor(t.$d.getTime()/1e3);case"x":return t.$d.getTime();case"z":return"["+t.offsetName()+"]";case"zzz":return"["+t.offsetName("long")+"]";default:return e}}));return s.bind(this)(a)}}}));

/***/ }),

/***/ "./node_modules/dayjs/plugin/relativeTime.js":
/*!***************************************************!*\
  !*** ./node_modules/dayjs/plugin/relativeTime.js ***!
  \***************************************************/
/***/ (function(module) {

!function(r,e){ true?module.exports=e():0}(this,(function(){"use strict";return function(r,e,t){r=r||{};var n=e.prototype,o={future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"};function i(r,e,t,o){return n.fromToBase(r,e,t,o)}t.en.relativeTime=o,n.fromToBase=function(e,n,i,d,u){for(var f,a,s,l=i.$locale().relativeTime||o,h=r.thresholds||[{l:"s",r:44,d:"second"},{l:"m",r:89},{l:"mm",r:44,d:"minute"},{l:"h",r:89},{l:"hh",r:21,d:"hour"},{l:"d",r:35},{l:"dd",r:25,d:"day"},{l:"M",r:45},{l:"MM",r:10,d:"month"},{l:"y",r:17},{l:"yy",d:"year"}],m=h.length,c=0;c<m;c+=1){var y=h[c];y.d&&(f=d?t(e).diff(i,y.d,!0):i.diff(e,y.d,!0));var p=(r.rounding||Math.round)(Math.abs(f));if(s=f>0,p<=y.r||!y.r){p<=1&&c>0&&(y=h[c-1]);var v=l[y.l];u&&(p=u(""+p)),a="string"==typeof v?v.replace("%d",p):v(p,n,y.l,s);break}}if(n)return a;var M=s?l.future:l.past;return"function"==typeof M?M(a):M.replace("%s",a)},n.to=function(r,e){return i(r,e,this,!0)},n.from=function(r,e){return i(r,e,this)};var d=function(r){return r.$u?t.utc():t()};n.toNow=function(r){return this.to(d(this),r)},n.fromNow=function(r){return this.from(d(this),r)}}}));

/***/ }),

/***/ "./node_modules/dayjs/plugin/timezone.js":
/*!***********************************************!*\
  !*** ./node_modules/dayjs/plugin/timezone.js ***!
  \***********************************************/
/***/ (function(module) {

!function(t,e){ true?module.exports=e():0}(this,(function(){"use strict";var t={year:0,month:1,day:2,hour:3,minute:4,second:5},e={};return function(n,i,o){var r,a=function(t,n,i){void 0===i&&(i={});var o=new Date(t),r=function(t,n){void 0===n&&(n={});var i=n.timeZoneName||"short",o=t+"|"+i,r=e[o];return r||(r=new Intl.DateTimeFormat("en-US",{hour12:!1,timeZone:t,year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit",second:"2-digit",timeZoneName:i}),e[o]=r),r}(n,i);return r.formatToParts(o)},u=function(e,n){for(var i=a(e,n),r=[],u=0;u<i.length;u+=1){var f=i[u],s=f.type,m=f.value,c=t[s];c>=0&&(r[c]=parseInt(m,10))}var d=r[3],l=24===d?0:d,v=r[0]+"-"+r[1]+"-"+r[2]+" "+l+":"+r[4]+":"+r[5]+":000",h=+e;return(o.utc(v).valueOf()-(h-=h%1e3))/6e4},f=i.prototype;f.tz=function(t,e){void 0===t&&(t=r);var n=this.utcOffset(),i=this.toDate(),a=i.toLocaleString("en-US",{timeZone:t}),u=Math.round((i-new Date(a))/1e3/60),f=o(a).$set("millisecond",this.$ms).utcOffset(15*-Math.round(i.getTimezoneOffset()/15)-u,!0);if(e){var s=f.utcOffset();f=f.add(n-s,"minute")}return f.$x.$timezone=t,f},f.offsetName=function(t){var e=this.$x.$timezone||o.tz.guess(),n=a(this.valueOf(),e,{timeZoneName:t}).find((function(t){return"timezonename"===t.type.toLowerCase()}));return n&&n.value};var s=f.startOf;f.startOf=function(t,e){if(!this.$x||!this.$x.$timezone)return s.call(this,t,e);var n=o(this.format("YYYY-MM-DD HH:mm:ss:SSS"));return s.call(n,t,e).tz(this.$x.$timezone,!0)},o.tz=function(t,e,n){var i=n&&e,a=n||e||r,f=u(+o(),a);if("string"!=typeof t)return o(t).tz(a);var s=function(t,e,n){var i=t-60*e*1e3,o=u(i,n);if(e===o)return[i,e];var r=u(i-=60*(o-e)*1e3,n);return o===r?[i,o]:[t-60*Math.min(o,r)*1e3,Math.max(o,r)]}(o.utc(t,i).valueOf(),f,a),m=s[0],c=s[1],d=o(m).utcOffset(c);return d.$x.$timezone=a,d},o.tz.guess=function(){return Intl.DateTimeFormat().resolvedOptions().timeZone},o.tz.setDefault=function(t){r=t}}}));

/***/ }),

/***/ "./node_modules/dayjs/plugin/utc.js":
/*!******************************************!*\
  !*** ./node_modules/dayjs/plugin/utc.js ***!
  \******************************************/
/***/ (function(module) {

!function(t,i){ true?module.exports=i():0}(this,(function(){"use strict";var t="minute",i=/[+-]\d\d(?::?\d\d)?/g,e=/([+-]|\d\d)/g;return function(s,f,n){var u=f.prototype;n.utc=function(t){var i={date:t,utc:!0,args:arguments};return new f(i)},u.utc=function(i){var e=n(this.toDate(),{locale:this.$L,utc:!0});return i?e.add(this.utcOffset(),t):e},u.local=function(){return n(this.toDate(),{locale:this.$L,utc:!1})};var o=u.parse;u.parse=function(t){t.utc&&(this.$u=!0),this.$utils().u(t.$offset)||(this.$offset=t.$offset),o.call(this,t)};var r=u.init;u.init=function(){if(this.$u){var t=this.$d;this.$y=t.getUTCFullYear(),this.$M=t.getUTCMonth(),this.$D=t.getUTCDate(),this.$W=t.getUTCDay(),this.$H=t.getUTCHours(),this.$m=t.getUTCMinutes(),this.$s=t.getUTCSeconds(),this.$ms=t.getUTCMilliseconds()}else r.call(this)};var a=u.utcOffset;u.utcOffset=function(s,f){var n=this.$utils().u;if(n(s))return this.$u?0:n(this.$offset)?a.call(this):this.$offset;if("string"==typeof s&&(s=function(t){void 0===t&&(t="");var s=t.match(i);if(!s)return null;var f=(""+s[0]).match(e)||["-",0,0],n=f[0],u=60*+f[1]+ +f[2];return 0===u?0:"+"===n?u:-u}(s),null===s))return this;var u=Math.abs(s)<=16?60*s:s,o=this;if(f)return o.$offset=u,o.$u=0===s,o;if(0!==s){var r=this.$u?this.toDate().getTimezoneOffset():-1*this.utcOffset();(o=this.local().add(u+r,t)).$offset=u,o.$x.$localOffset=r}else o=this.utc();return o};var h=u.format;u.format=function(t){var i=t||(this.$u?"YYYY-MM-DDTHH:mm:ss[Z]":"");return h.call(this,i)},u.valueOf=function(){var t=this.$utils().u(this.$offset)?0:this.$offset+(this.$x.$localOffset||this.$d.getTimezoneOffset());return this.$d.valueOf()-6e4*t},u.isUTC=function(){return!!this.$u},u.toISOString=function(){return this.toDate().toISOString()},u.toString=function(){return this.toDate().toUTCString()};var l=u.toDate;u.toDate=function(t){return"s"===t&&this.$offset?n(this.format("YYYY-MM-DD HH:mm:ss:SSS")).toDate():l.call(this)};var c=u.diff;u.diff=function(t,i,e){if(t&&this.$u===t.$u)return c.call(this,t,i,e);var s=this.local(),f=n(t).local();return c.call(s,f,i,e)}}}));

/***/ }),

/***/ "./node_modules/eventemitter3/index.js":
/*!*********************************************!*\
  !*** ./node_modules/eventemitter3/index.js ***!
  \*********************************************/
/***/ ((module) => {

"use strict";


var has = Object.prototype.hasOwnProperty
  , prefix = '~';

/**
 * Constructor to create a storage for our `EE` objects.
 * An `Events` instance is a plain object whose properties are event names.
 *
 * @constructor
 * @private
 */
function Events() {}

//
// We try to not inherit from `Object.prototype`. In some engines creating an
// instance in this way is faster than calling `Object.create(null)` directly.
// If `Object.create(null)` is not supported we prefix the event names with a
// character to make sure that the built-in object properties are not
// overridden or used as an attack vector.
//
if (Object.create) {
  Events.prototype = Object.create(null);

  //
  // This hack is needed because the `__proto__` property is still inherited in
  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
  //
  if (!new Events().__proto__) prefix = false;
}

/**
 * Representation of a single event listener.
 *
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
 * @constructor
 * @private
 */
function EE(fn, context, once) {
  this.fn = fn;
  this.context = context;
  this.once = once || false;
}

/**
 * Add a listener for a given event.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} once Specify if the listener is a one-time listener.
 * @returns {EventEmitter}
 * @private
 */
function addListener(emitter, event, fn, context, once) {
  if (typeof fn !== 'function') {
    throw new TypeError('The listener must be a function');
  }

  var listener = new EE(fn, context || emitter, once)
    , evt = prefix ? prefix + event : event;

  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
  else emitter._events[evt] = [emitter._events[evt], listener];

  return emitter;
}

/**
 * Clear event by name.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} evt The Event name.
 * @private
 */
function clearEvent(emitter, evt) {
  if (--emitter._eventsCount === 0) emitter._events = new Events();
  else delete emitter._events[evt];
}

/**
 * Minimal `EventEmitter` interface that is molded against the Node.js
 * `EventEmitter` interface.
 *
 * @constructor
 * @public
 */
function EventEmitter() {
  this._events = new Events();
  this._eventsCount = 0;
}

/**
 * Return an array listing the events for which the emitter has registered
 * listeners.
 *
 * @returns {Array}
 * @public
 */
EventEmitter.prototype.eventNames = function eventNames() {
  var names = []
    , events
    , name;

  if (this._eventsCount === 0) return names;

  for (name in (events = this._events)) {
    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
  }

  if (Object.getOwnPropertySymbols) {
    return names.concat(Object.getOwnPropertySymbols(events));
  }

  return names;
};

/**
 * Return the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Array} The registered listeners.
 * @public
 */
EventEmitter.prototype.listeners = function listeners(event) {
  var evt = prefix ? prefix + event : event
    , handlers = this._events[evt];

  if (!handlers) return [];
  if (handlers.fn) return [handlers.fn];

  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
    ee[i] = handlers[i].fn;
  }

  return ee;
};

/**
 * Return the number of listeners listening to a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Number} The number of listeners.
 * @public
 */
EventEmitter.prototype.listenerCount = function listenerCount(event) {
  var evt = prefix ? prefix + event : event
    , listeners = this._events[evt];

  if (!listeners) return 0;
  if (listeners.fn) return 1;
  return listeners.length;
};

/**
 * Calls each of the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Boolean} `true` if the event had listeners, else `false`.
 * @public
 */
EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return false;

  var listeners = this._events[evt]
    , len = arguments.length
    , args
    , i;

  if (listeners.fn) {
    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

    switch (len) {
      case 1: return listeners.fn.call(listeners.context), true;
      case 2: return listeners.fn.call(listeners.context, a1), true;
      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
    }

    for (i = 1, args = new Array(len -1); i < len; i++) {
      args[i - 1] = arguments[i];
    }

    listeners.fn.apply(listeners.context, args);
  } else {
    var length = listeners.length
      , j;

    for (i = 0; i < length; i++) {
      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

      switch (len) {
        case 1: listeners[i].fn.call(listeners[i].context); break;
        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
        default:
          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
            args[j - 1] = arguments[j];
          }

          listeners[i].fn.apply(listeners[i].context, args);
      }
    }
  }

  return true;
};

/**
 * Add a listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.on = function on(event, fn, context) {
  return addListener(this, event, fn, context, false);
};

/**
 * Add a one-time listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.once = function once(event, fn, context) {
  return addListener(this, event, fn, context, true);
};

/**
 * Remove the listeners of a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn Only remove the listeners that match this function.
 * @param {*} context Only remove the listeners that have this context.
 * @param {Boolean} once Only remove one-time listeners.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return this;
  if (!fn) {
    clearEvent(this, evt);
    return this;
  }

  var listeners = this._events[evt];

  if (listeners.fn) {
    if (
      listeners.fn === fn &&
      (!once || listeners.once) &&
      (!context || listeners.context === context)
    ) {
      clearEvent(this, evt);
    }
  } else {
    for (var i = 0, events = [], length = listeners.length; i < length; i++) {
      if (
        listeners[i].fn !== fn ||
        (once && !listeners[i].once) ||
        (context && listeners[i].context !== context)
      ) {
        events.push(listeners[i]);
      }
    }

    //
    // Reset the array, or remove it completely if we have no more listeners.
    //
    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
    else clearEvent(this, evt);
  }

  return this;
};

/**
 * Remove all listeners, or those of the specified event.
 *
 * @param {(String|Symbol)} [event] The event name.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
  var evt;

  if (event) {
    evt = prefix ? prefix + event : event;
    if (this._events[evt]) clearEvent(this, evt);
  } else {
    this._events = new Events();
    this._eventsCount = 0;
  }

  return this;
};

//
// Alias methods names because people roll like that.
//
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.addListener = EventEmitter.prototype.on;

//
// Expose the prefix.
//
EventEmitter.prefixed = prefix;

//
// Allow `EventEmitter` to be imported as module namespace.
//
EventEmitter.EventEmitter = EventEmitter;

//
// Expose the module.
//
if (true) {
  module.exports = EventEmitter;
}


/***/ }),

/***/ "./node_modules/function-bind/implementation.js":
/*!******************************************************!*\
  !*** ./node_modules/function-bind/implementation.js ***!
  \******************************************************/
/***/ ((module) => {

"use strict";


/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var slice = Array.prototype.slice;
var toStr = Object.prototype.toString;
var funcType = '[object Function]';

module.exports = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr.call(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slice.call(arguments, 1);

    var bound;
    var binder = function () {
        if (this instanceof bound) {
            var result = target.apply(
                this,
                args.concat(slice.call(arguments))
            );
            if (Object(result) === result) {
                return result;
            }
            return this;
        } else {
            return target.apply(
                that,
                args.concat(slice.call(arguments))
            );
        }
    };

    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
        boundArgs.push('$' + i);
    }

    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }

    return bound;
};


/***/ }),

/***/ "./node_modules/function-bind/index.js":
/*!*********************************************!*\
  !*** ./node_modules/function-bind/index.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var implementation = __webpack_require__(/*! ./implementation */ "./node_modules/function-bind/implementation.js");

module.exports = Function.prototype.bind || implementation;


/***/ }),

/***/ "./node_modules/get-intrinsic/index.js":
/*!*********************************************!*\
  !*** ./node_modules/get-intrinsic/index.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var undefined;

var $SyntaxError = SyntaxError;
var $Function = Function;
var $TypeError = TypeError;

// eslint-disable-next-line consistent-return
var getEvalledConstructor = function (expressionSyntax) {
	try {
		return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
	} catch (e) {}
};

var $gOPD = Object.getOwnPropertyDescriptor;
if ($gOPD) {
	try {
		$gOPD({}, '');
	} catch (e) {
		$gOPD = null; // this is IE 8, which has a broken gOPD
	}
}

var throwTypeError = function () {
	throw new $TypeError();
};
var ThrowTypeError = $gOPD
	? (function () {
		try {
			// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
			arguments.callee; // IE 8 does not throw here
			return throwTypeError;
		} catch (calleeThrows) {
			try {
				// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
				return $gOPD(arguments, 'callee').get;
			} catch (gOPDthrows) {
				return throwTypeError;
			}
		}
	}())
	: throwTypeError;

var hasSymbols = __webpack_require__(/*! has-symbols */ "./node_modules/has-symbols/index.js")();

var getProto = Object.getPrototypeOf || function (x) { return x.__proto__; }; // eslint-disable-line no-proto

var needsEval = {};

var TypedArray = typeof Uint8Array === 'undefined' ? undefined : getProto(Uint8Array);

var INTRINSICS = {
	'%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,
	'%Array%': Array,
	'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,
	'%ArrayIteratorPrototype%': hasSymbols ? getProto([][Symbol.iterator]()) : undefined,
	'%AsyncFromSyncIteratorPrototype%': undefined,
	'%AsyncFunction%': needsEval,
	'%AsyncGenerator%': needsEval,
	'%AsyncGeneratorFunction%': needsEval,
	'%AsyncIteratorPrototype%': needsEval,
	'%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,
	'%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,
	'%Boolean%': Boolean,
	'%DataView%': typeof DataView === 'undefined' ? undefined : DataView,
	'%Date%': Date,
	'%decodeURI%': decodeURI,
	'%decodeURIComponent%': decodeURIComponent,
	'%encodeURI%': encodeURI,
	'%encodeURIComponent%': encodeURIComponent,
	'%Error%': Error,
	'%eval%': eval, // eslint-disable-line no-eval
	'%EvalError%': EvalError,
	'%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,
	'%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,
	'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,
	'%Function%': $Function,
	'%GeneratorFunction%': needsEval,
	'%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,
	'%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,
	'%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,
	'%isFinite%': isFinite,
	'%isNaN%': isNaN,
	'%IteratorPrototype%': hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined,
	'%JSON%': typeof JSON === 'object' ? JSON : undefined,
	'%Map%': typeof Map === 'undefined' ? undefined : Map,
	'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols ? undefined : getProto(new Map()[Symbol.iterator]()),
	'%Math%': Math,
	'%Number%': Number,
	'%Object%': Object,
	'%parseFloat%': parseFloat,
	'%parseInt%': parseInt,
	'%Promise%': typeof Promise === 'undefined' ? undefined : Promise,
	'%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,
	'%RangeError%': RangeError,
	'%ReferenceError%': ReferenceError,
	'%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,
	'%RegExp%': RegExp,
	'%Set%': typeof Set === 'undefined' ? undefined : Set,
	'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols ? undefined : getProto(new Set()[Symbol.iterator]()),
	'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,
	'%String%': String,
	'%StringIteratorPrototype%': hasSymbols ? getProto(''[Symbol.iterator]()) : undefined,
	'%Symbol%': hasSymbols ? Symbol : undefined,
	'%SyntaxError%': $SyntaxError,
	'%ThrowTypeError%': ThrowTypeError,
	'%TypedArray%': TypedArray,
	'%TypeError%': $TypeError,
	'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,
	'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,
	'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,
	'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,
	'%URIError%': URIError,
	'%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,
	'%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,
	'%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet
};

var doEval = function doEval(name) {
	var value;
	if (name === '%AsyncFunction%') {
		value = getEvalledConstructor('async function () {}');
	} else if (name === '%GeneratorFunction%') {
		value = getEvalledConstructor('function* () {}');
	} else if (name === '%AsyncGeneratorFunction%') {
		value = getEvalledConstructor('async function* () {}');
	} else if (name === '%AsyncGenerator%') {
		var fn = doEval('%AsyncGeneratorFunction%');
		if (fn) {
			value = fn.prototype;
		}
	} else if (name === '%AsyncIteratorPrototype%') {
		var gen = doEval('%AsyncGenerator%');
		if (gen) {
			value = getProto(gen.prototype);
		}
	}

	INTRINSICS[name] = value;

	return value;
};

var LEGACY_ALIASES = {
	'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
	'%ArrayPrototype%': ['Array', 'prototype'],
	'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
	'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
	'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
	'%ArrayProto_values%': ['Array', 'prototype', 'values'],
	'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
	'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
	'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
	'%BooleanPrototype%': ['Boolean', 'prototype'],
	'%DataViewPrototype%': ['DataView', 'prototype'],
	'%DatePrototype%': ['Date', 'prototype'],
	'%ErrorPrototype%': ['Error', 'prototype'],
	'%EvalErrorPrototype%': ['EvalError', 'prototype'],
	'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
	'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
	'%FunctionPrototype%': ['Function', 'prototype'],
	'%Generator%': ['GeneratorFunction', 'prototype'],
	'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
	'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
	'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
	'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
	'%JSONParse%': ['JSON', 'parse'],
	'%JSONStringify%': ['JSON', 'stringify'],
	'%MapPrototype%': ['Map', 'prototype'],
	'%NumberPrototype%': ['Number', 'prototype'],
	'%ObjectPrototype%': ['Object', 'prototype'],
	'%ObjProto_toString%': ['Object', 'prototype', 'toString'],
	'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
	'%PromisePrototype%': ['Promise', 'prototype'],
	'%PromiseProto_then%': ['Promise', 'prototype', 'then'],
	'%Promise_all%': ['Promise', 'all'],
	'%Promise_reject%': ['Promise', 'reject'],
	'%Promise_resolve%': ['Promise', 'resolve'],
	'%RangeErrorPrototype%': ['RangeError', 'prototype'],
	'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
	'%RegExpPrototype%': ['RegExp', 'prototype'],
	'%SetPrototype%': ['Set', 'prototype'],
	'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
	'%StringPrototype%': ['String', 'prototype'],
	'%SymbolPrototype%': ['Symbol', 'prototype'],
	'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
	'%TypedArrayPrototype%': ['TypedArray', 'prototype'],
	'%TypeErrorPrototype%': ['TypeError', 'prototype'],
	'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
	'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
	'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
	'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
	'%URIErrorPrototype%': ['URIError', 'prototype'],
	'%WeakMapPrototype%': ['WeakMap', 'prototype'],
	'%WeakSetPrototype%': ['WeakSet', 'prototype']
};

var bind = __webpack_require__(/*! function-bind */ "./node_modules/function-bind/index.js");
var hasOwn = __webpack_require__(/*! has */ "./node_modules/has/src/index.js");
var $concat = bind.call(Function.call, Array.prototype.concat);
var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
var $replace = bind.call(Function.call, String.prototype.replace);
var $strSlice = bind.call(Function.call, String.prototype.slice);
var $exec = bind.call(Function.call, RegExp.prototype.exec);

/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
var stringToPath = function stringToPath(string) {
	var first = $strSlice(string, 0, 1);
	var last = $strSlice(string, -1);
	if (first === '%' && last !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
	} else if (last === '%' && first !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
	}
	var result = [];
	$replace(string, rePropName, function (match, number, quote, subString) {
		result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
	});
	return result;
};
/* end adaptation */

var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
	var intrinsicName = name;
	var alias;
	if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
		alias = LEGACY_ALIASES[intrinsicName];
		intrinsicName = '%' + alias[0] + '%';
	}

	if (hasOwn(INTRINSICS, intrinsicName)) {
		var value = INTRINSICS[intrinsicName];
		if (value === needsEval) {
			value = doEval(intrinsicName);
		}
		if (typeof value === 'undefined' && !allowMissing) {
			throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
		}

		return {
			alias: alias,
			name: intrinsicName,
			value: value
		};
	}

	throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
};

module.exports = function GetIntrinsic(name, allowMissing) {
	if (typeof name !== 'string' || name.length === 0) {
		throw new $TypeError('intrinsic name must be a non-empty string');
	}
	if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
		throw new $TypeError('"allowMissing" argument must be a boolean');
	}

	if ($exec(/^%?[^%]*%?$/g, name) === null) {
		throw new $SyntaxError('`%` may not be present anywhere but at the beginning and end of the intrinsic name');
	}
	var parts = stringToPath(name);
	var intrinsicBaseName = parts.length > 0 ? parts[0] : '';

	var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
	var intrinsicRealName = intrinsic.name;
	var value = intrinsic.value;
	var skipFurtherCaching = false;

	var alias = intrinsic.alias;
	if (alias) {
		intrinsicBaseName = alias[0];
		$spliceApply(parts, $concat([0, 1], alias));
	}

	for (var i = 1, isOwn = true; i < parts.length; i += 1) {
		var part = parts[i];
		var first = $strSlice(part, 0, 1);
		var last = $strSlice(part, -1);
		if (
			(
				(first === '"' || first === "'" || first === '`')
				|| (last === '"' || last === "'" || last === '`')
			)
			&& first !== last
		) {
			throw new $SyntaxError('property names with quotes must have matching quotes');
		}
		if (part === 'constructor' || !isOwn) {
			skipFurtherCaching = true;
		}

		intrinsicBaseName += '.' + part;
		intrinsicRealName = '%' + intrinsicBaseName + '%';

		if (hasOwn(INTRINSICS, intrinsicRealName)) {
			value = INTRINSICS[intrinsicRealName];
		} else if (value != null) {
			if (!(part in value)) {
				if (!allowMissing) {
					throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
				}
				return void undefined;
			}
			if ($gOPD && (i + 1) >= parts.length) {
				var desc = $gOPD(value, part);
				isOwn = !!desc;

				// By convention, when a data property is converted to an accessor
				// property to emulate a data property that does not suffer from
				// the override mistake, that accessor's getter is marked with
				// an `originalValue` property. Here, when we detect this, we
				// uphold the illusion by pretending to see that original data
				// property, i.e., returning the value rather than the getter
				// itself.
				if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
					value = desc.get;
				} else {
					value = value[part];
				}
			} else {
				isOwn = hasOwn(value, part);
				value = value[part];
			}

			if (isOwn && !skipFurtherCaching) {
				INTRINSICS[intrinsicRealName] = value;
			}
		}
	}
	return value;
};


/***/ }),

/***/ "./node_modules/has-symbols/index.js":
/*!*******************************************!*\
  !*** ./node_modules/has-symbols/index.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var origSymbol = typeof Symbol !== 'undefined' && Symbol;
var hasSymbolSham = __webpack_require__(/*! ./shams */ "./node_modules/has-symbols/shams.js");

module.exports = function hasNativeSymbols() {
	if (typeof origSymbol !== 'function') { return false; }
	if (typeof Symbol !== 'function') { return false; }
	if (typeof origSymbol('foo') !== 'symbol') { return false; }
	if (typeof Symbol('bar') !== 'symbol') { return false; }

	return hasSymbolSham();
};


/***/ }),

/***/ "./node_modules/has-symbols/shams.js":
/*!*******************************************!*\
  !*** ./node_modules/has-symbols/shams.js ***!
  \*******************************************/
/***/ ((module) => {

"use strict";


/* eslint complexity: [2, 18], max-statements: [2, 33] */
module.exports = function hasSymbols() {
	if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
	if (typeof Symbol.iterator === 'symbol') { return true; }

	var obj = {};
	var sym = Symbol('test');
	var symObj = Object(sym);
	if (typeof sym === 'string') { return false; }

	if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
	if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }

	// temp disabled per https://github.com/ljharb/object.assign/issues/17
	// if (sym instanceof Symbol) { return false; }
	// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
	// if (!(symObj instanceof Symbol)) { return false; }

	// if (typeof Symbol.prototype.toString !== 'function') { return false; }
	// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

	var symVal = 42;
	obj[sym] = symVal;
	for (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
	if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

	if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

	var syms = Object.getOwnPropertySymbols(obj);
	if (syms.length !== 1 || syms[0] !== sym) { return false; }

	if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

	if (typeof Object.getOwnPropertyDescriptor === 'function') {
		var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
		if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
	}

	return true;
};


/***/ }),

/***/ "./node_modules/has/src/index.js":
/*!***************************************!*\
  !*** ./node_modules/has/src/index.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var bind = __webpack_require__(/*! function-bind */ "./node_modules/function-bind/index.js");

module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);


/***/ }),

/***/ "./node_modules/jsonrpc2-ws/lib/MapLike.js":
/*!*************************************************!*\
  !*** ./node_modules/jsonrpc2-ws/lib/MapLike.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
class MapLike {
    constructor() {
        this._map = {};
    }
    get size() {
        return this.keys().length;
    }
    clear() {
        for (const key in this._map) {
            delete this._map[key];
        }
    }
    delete(key) {
        if (this.has(key)) {
            return delete this._map[key];
        }
        return false;
    }
    get(key) {
        return this._map[key];
    }
    has(key) {
        return this._map[key] !== undefined;
    }
    keys() {
        return Object.keys(this._map);
    }
    set(key, value) {
        this._map[key] = value;
        return this;
    }
    values() {
        const values = [];
        for (const key in this._map) {
            values.push(this._map[key]);
        }
        return values;
    }
}
exports["default"] = MapLike;
//# sourceMappingURL=MapLike.js.map

/***/ }),

/***/ "./node_modules/jsonrpc2-ws/lib/MessageHandler.js":
/*!********************************************************!*\
  !*** ./node_modules/jsonrpc2-ws/lib/MessageHandler.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js")["Buffer"];

Object.defineProperty(exports, "__esModule", ({ value: true }));
const common_1 = __webpack_require__(/*! ./common */ "./node_modules/jsonrpc2-ws/lib/common.js");
const EventEmitter = __webpack_require__(/*! eventemitter3 */ "./node_modules/eventemitter3/index.js");
class MessageHandler extends EventEmitter {
    constructor(options) {
        super();
        this.options = options;
        this.methods = new Map();
    }
    async handleMessage(socket, data) {
        const calls = [];
        const responses = [];
        let isBinary = false;
        let isArray = false;
        if (data instanceof ArrayBuffer) {
            isBinary = true;
            data = Buffer.from(data).toString();
        }
        else if (data instanceof Buffer) {
            isBinary = true;
            data = data.toString();
        }
        else if (Array.isArray(data)) {
            isBinary = true;
            data = "[" + data.map(buf => buf.toString()).join(",") + "]";
        }
        try {
            const obj = JSON.parse(data);
            if (Array.isArray(obj)) {
                isArray = true;
                if (obj.length === 0) {
                    const res = {
                        jsonrpc: "2.0",
                        error: common_1.createError(-32600 /* InvalidRequest */, null, "Empty Array"),
                        id: null
                    };
                    socket.send(JSON.stringify(res), isBinary);
                    return;
                }
                calls.push(...obj);
            }
            else {
                calls.push(obj);
            }
        }
        catch (e) {
            const res = {
                jsonrpc: "2.0",
                error: common_1.createError(-32700 /* ParseError */, null, "Invalid JSON"),
                id: null
            };
            socket.send(JSON.stringify(res), isBinary);
            return;
        }
        for (const call of calls) {
            const res = await this._processCall(socket, call);
            if (res) {
                responses.push(res);
            }
        }
        if (responses.length === 0) {
            return;
        }
        socket.send(JSON.stringify(isArray ? responses : responses[0]), isBinary);
    }
    async _processCall(socket, call) {
        const reqId = call.id;
        const res = {
            jsonrpc: "2.0",
            id: reqId === undefined ? null : reqId
        };
        if (typeof call !== "object") {
            res.error = common_1.createError(-32600 /* InvalidRequest */);
            return res;
        }
        if (call.jsonrpc !== "2.0" && (this.options.jsonrpcVersionCheck === 0 /* STRICT */ ||
            (this.options.jsonrpcVersionCheck === 1 /* LOOSE */ && call.jsonrpc !== undefined))) {
            res.error = common_1.createError(-32600 /* InvalidRequest */, null, "Invalid JSON-RPC Version");
            return res;
        }
        if (common_1.isResponse(call)) {
            this.emit("response", socket, call);
            if (call.id !== null) {
                this.emit("method_response", socket, call);
                return;
            }
            if (!call.error) {
                res.error = common_1.createError(-32600 /* InvalidRequest */);
                return res;
            }
            this.emit("error_response", socket, call);
            if (call.error.code === -32700 /* ParseError */ || call.error.code === -32600 /* InvalidRequest */) {
                return;
            }
            this.emit("notification_error", socket, call.error);
            return;
        }
        if (!call.method) {
            res.error = common_1.createError(-32601 /* MethodNotFound */, null, "Method not specified");
            return res;
        }
        if (typeof call.method !== "string") {
            res.error = common_1.createError(-32600 /* InvalidRequest */, null, "Invalid type of method name");
            return res;
        }
        if ("params" in call && (typeof call.params !== "object" || call.params === null)) {
            res.error = common_1.createError(-32600 /* InvalidRequest */);
            return res;
        }
        if (this.methods.has(call.method) === false) {
            res.error = common_1.createError(-32601 /* MethodNotFound */);
            return res;
        }
        try {
            res.result = await this.methods.get(call.method)(socket, call.params) || null;
            if (reqId === undefined) {
                return;
            }
            return res;
        }
        catch (e) {
            if (reqId === undefined) {
                return;
            }
            if (e instanceof Error) {
                res.error = common_1.createError(-32000 /* ServerError */, e.name, e.message);
            }
            else {
                res.error = e;
            }
            return res;
        }
    }
}
exports["default"] = MessageHandler;
//# sourceMappingURL=MessageHandler.js.map

/***/ }),

/***/ "./node_modules/jsonrpc2-ws/lib/client.js":
/*!************************************************!*\
  !*** ./node_modules/jsonrpc2-ws/lib/client.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js")["Buffer"];

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ConfigDefaults = void 0;
const WebSocket = __webpack_require__(/*! isomorphic-ws */ "./node_modules/isomorphic-ws/browser.js");
const Backoff = __webpack_require__(/*! backo2 */ "./node_modules/backo2/index.js");
const EventEmitter = __webpack_require__(/*! eventemitter3 */ "./node_modules/eventemitter3/index.js");
const common_1 = __webpack_require__(/*! ./common */ "./node_modules/jsonrpc2-ws/lib/common.js");
const MessageHandler_1 = __webpack_require__(/*! ./MessageHandler */ "./node_modules/jsonrpc2-ws/lib/MessageHandler.js");
exports.ConfigDefaults = Object.freeze({
    reconnection: true,
    reconnectionAttempts: Infinity,
    reconnectionDelay: 1000,
    reconnectionDelayMax: 5000,
    reconnectionJitter: 0.5,
    methodCallTimeout: 20000,
    autoConnect: true,
    bufferSendingMessages: true,
    query: {},
    protocols: ""
});
/**
 * JSON-RPC 2.0 Client
 */
class Client extends EventEmitter {
    /**
     * Create an instance
     * @param uri The URI to connect.
     * @param options Options
     */
    constructor(uri, options = {}) {
        super();
        this.uri = uri;
        this.sendingMessageBuffer = [];
        this._reconnecting = false;
        this._responseHandlers = new Map();
        this._skipReconnection = false;
        this._currentRequestId = 0;
        this.config = {
            ...exports.ConfigDefaults,
            ...options
        };
        this._backoff = new Backoff({
            min: this.config.reconnectionDelay,
            max: this.config.reconnectionDelayMax,
            jitter: this.config.reconnectionJitter
        });
        this._messageHandler = new MessageHandler_1.default(this.config);
        this._messageHandler.on("method_response", (socket, response) => this._handleMethodResponse(response));
        this._messageHandler.on("error_response", (socket, response) => this.emit("error_response", response));
        this._messageHandler.on("notification_error", (socket, error) => this.emit("notification_error", error));
        if (this.config.autoConnect) {
            this.connect().catch(() => void 0);
        }
    }
    get methods() { return this._messageHandler.methods; }
    /**
     * Connect to the server
     */
    async connect() {
        if (this._ws) {
            return;
        }
        this.emit("connecting");
        const ws = this._ws = new WebSocket(this.uri, this.config.protocols, this.config);
        if (ws.addEventListener) {
            ws.addEventListener("error", error => this.emit("error", error));
            ws.addEventListener("close", ({ code, reason }) => {
                this.emit("close");
                this.emit("disconnect", code, reason);
                this._ws = null;
            });
            ws.addEventListener("message", ({ data }) => this._messageHandler.handleMessage(this, data).catch(e => this.emit("error", e)));
        }
        else {
            ws.on("error", error => this.emit("error", error));
            ws.on("close", (code, reason) => {
                this.emit("close");
                this.emit("disconnect", code, reason);
                this._ws = null;
            });
            ws.on("message", data => this._messageHandler.handleMessage(this, data).catch(e => this.emit("error", e)));
        }
        if (this.config.reconnection) {
            this._skipReconnection = false;
            if (ws.addEventListener) {
                ws.addEventListener("close", () => this.reconnect());
            }
            else {
                ws.on("close", () => this.reconnect());
            }
        }
        await new Promise((resolve, reject) => {
            if (ws.addEventListener) {
                ws.addEventListener("open", () => {
                    ws.removeEventListener("error", reject);
                    resolve();
                }, { once: true });
                ws.addEventListener("error", reject, { once: true });
            }
            else {
                ws.once("open", () => {
                    ws.off("error", reject);
                    resolve();
                });
                ws.once("error", reject);
            }
        });
        await this._sendBufferedMessages();
        this.emit("connected");
    }
    /**
     * Disconnect the connection if it exists
     */
    async disconnect() {
        this._skipReconnection = true;
        this._reconnecting = false;
        this._backoff.reset();
        // clear method call timeout.
        for (const [timer] of this._responseHandlers) {
            clearTimeout(timer);
        }
        this._responseHandlers.clear();
        // clear reconnection timer.
        if (this._reconnectionSleepTimer) {
            clearTimeout(this._reconnectionSleepTimer);
            this._reconnectionSleepTimer = null;
        }
        const ws = this._ws;
        if (!ws) {
            return Promise.resolve();
        }
        let promise;
        if (ws.readyState === WebSocket.OPEN || ws.readyState === WebSocket.CONNECTING) {
            promise = new Promise(resolve => {
                if (ws.addEventListener) {
                    ws.addEventListener("close", () => resolve(), { once: true });
                }
                else {
                    ws.once("close", () => resolve());
                }
            });
            ws.close();
        }
        else {
            promise = Promise.resolve();
        }
        this._ws = null;
        await promise;
        if (ws.removeAllListeners) {
            // for node
            ws.removeAllListeners();
        }
        else {
            // for browser
            // not necessary at this time.
        }
    }
    send(data, binary = false) {
        if (binary && typeof data === "string") {
            data = Buffer.from(data).buffer;
        }
        if (!this.isConnected()) {
            this._bufferSendingMessage(data);
            return;
        }
        this._ws.send(data, e => e ? this._bufferSendingMessage(data) : null);
    }
    clearSendingMessageBuffer() {
        this.sendingMessageBuffer.length = 0;
    }
    notify(method, params) {
        const data = {
            jsonrpc: "2.0",
            method,
            params
        };
        this.send(JSON.stringify(data));
    }
    call(method, params = {}) {
        const id = this._currentRequestId++;
        const data = {
            jsonrpc: "2.0",
            method,
            params,
            id
        };
        this.send(JSON.stringify(data));
        return new Promise((resolve, reject) => {
            const timeout = setTimeout(() => {
                this._responseHandlers.delete(id);
                reject(new Error("JSON-RPC: method call timeout"));
            }, this.config.methodCallTimeout);
            this._responseHandlers.set(id, [timeout, resolve, reject]);
        });
    }
    isConnected() {
        return this._ws !== null && this._ws.readyState === WebSocket.OPEN;
    }
    async reconnect() {
        if (this._reconnecting || this._skipReconnection) {
            return;
        }
        const backoff = this._backoff;
        if (backoff.attempts > this.config.reconnectionAttempts) {
            this.emit("reconnect_failed");
            this.disconnect();
            return;
        }
        const delay = backoff.duration();
        this._reconnecting = true;
        await new Promise(resolve => this._reconnectionSleepTimer = setTimeout(resolve, delay));
        this._reconnectionSleepTimer = null;
        if (this._skipReconnection) {
            return;
        }
        this.emit("reconnecting", backoff.attempts);
        if (this._skipReconnection) {
            return;
        }
        try {
            await this.connect();
        }
        catch (err) {
            this._reconnecting = false;
            this.reconnect();
            this.emit("reconnect_error", err);
            return;
        }
        const attempts = backoff.attempts;
        backoff.reset();
        this._reconnecting = false;
        this.emit("reconnected", attempts);
    }
    _handleMethodResponse(response) {
        if (typeof response.id === "string") {
            this.emit("unkown_response", response);
            return;
        }
        const handler = this._responseHandlers.get(response.id);
        if (!handler) {
            this.emit("unkown_response", response);
            return;
        }
        this._responseHandlers.delete(response.id);
        const [timer, resolve, reject] = handler;
        clearTimeout(timer);
        if (common_1.isSuccessResponse(response)) {
            resolve(response.result);
        }
        else {
            reject(response.error);
        }
    }
    _bufferSendingMessage(data) {
        if (this.config.bufferSendingMessages) {
            this.sendingMessageBuffer.push(data);
        }
        else {
            throw new Error("Message is rejected:  The socket is close without message buffering.");
        }
    }
    async _sendBufferedMessages() {
        const buffer = this.sendingMessageBuffer;
        const ws = this._ws;
        for (let data = buffer.shift(); data; data = buffer.shift()) {
            try {
                await new Promise((resolve, reject) => ws.send(data, e => e ? reject(e) : resolve()));
            }
            catch (e) {
                buffer.unshift(data);
                this.emit("buffer_sending_error", e);
                break;
            }
        }
    }
}
exports["default"] = Client;
//# sourceMappingURL=client.js.map

/***/ }),

/***/ "./node_modules/jsonrpc2-ws/lib/common.js":
/*!************************************************!*\
  !*** ./node_modules/jsonrpc2-ws/lib/common.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createError = exports.errorCodeMap = exports.isSuccessResponse = exports.isResponse = void 0;
/**
 * Check type of call is an Reponse or not
 * @param call an Call object which will be checked.
 */
function isResponse(call) {
    return "id" in call && ("result" in call || "error" in call);
}
exports.isResponse = isResponse;
/**
 * Check type of response is SuccessResponse or not
 *
 * @param response an Response object which will be checked.
 */
function isSuccessResponse(response) {
    return "result" in response && response.id !== null;
}
exports.isSuccessResponse = isSuccessResponse;
/**
 * JSON-RPC 2.0 Error Codes
 */
exports.errorCodeMap = new Map([
    [-32700, "Parse error"],
    [-32600, "Invalid Request"],
    [-32601, "Method not found"],
    [-32602, "Invalid params"],
    [-32603, "Internal error"],
    [-32000, "Server error"]
]);
/**
 * Creates a JSON-RPC 2.0 compliant Error Object
 * @param code A Number that indicates the error type that occurred. (Integer)
 * @param data A Primitive or Structured value that contains additional information about the error.
 */
function createError(code, message, data) {
    const error = {
        code: code,
        message: message || exports.errorCodeMap.get(code) || "Server error"
    };
    if (data !== undefined) {
        error.data = data;
    }
    return error;
}
exports.createError = createError;
//# sourceMappingURL=common.js.map

/***/ }),

/***/ "./node_modules/jsonrpc2-ws/lib/index.js":
/*!***********************************************!*\
  !*** ./node_modules/jsonrpc2-ws/lib/index.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Client = exports.Server = void 0;
var server_1 = __webpack_require__(/*! ./server */ "./node_modules/jsonrpc2-ws/lib/server.js");
Object.defineProperty(exports, "Server", ({ enumerable: true, get: function () { return server_1.default; } }));
var client_1 = __webpack_require__(/*! ./client */ "./node_modules/jsonrpc2-ws/lib/client.js");
Object.defineProperty(exports, "Client", ({ enumerable: true, get: function () { return client_1.default; } }));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/jsonrpc2-ws/lib/server.js":
/*!************************************************!*\
  !*** ./node_modules/jsonrpc2-ws/lib/server.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Socket = void 0;
const EventEmitter = __webpack_require__(/*! eventemitter3 */ "./node_modules/eventemitter3/index.js");
const ws_1 = __webpack_require__(/*! ws */ "./node_modules/ws/browser.js");
const uuid_1 = __webpack_require__(/*! uuid */ "./node_modules/uuid/dist/esm-browser/index.js");
const MessageHandler_1 = __webpack_require__(/*! ./MessageHandler */ "./node_modules/jsonrpc2-ws/lib/MessageHandler.js");
const MapLike_1 = __webpack_require__(/*! ./MapLike */ "./node_modules/jsonrpc2-ws/lib/MapLike.js");
/**
 * JSON-RPC 2.0 WebSocket Server
 */
class Server extends EventEmitter {
    /**
     * Create a instance.
     * @param options
     * @param callback callback A listener for the `listening` event (ws).
     */
    constructor(options, callback) {
        super();
        this.sockets = new Map();
        this._lastPingAt = 0;
        this.options = Object.assign({
            pingTimeout: 5000,
            pingInterval: 25000,
            open: true,
            jsonrpcVersionCheck: 0 /* STRICT */,
            uws: false
        }, options);
        this._messageHandler = new MessageHandler_1.default(this.options);
        this._messageHandler.on("error_response", (socket, response) => {
            this.emit("error_response", socket, response);
            socket.emit("error_response", response);
        });
        this._messageHandler.on("notification_error", (socket, error) => {
            this.emit("notification_error", socket, error);
            socket.emit("notification_error", error);
        });
        if (this.options.open) {
            this.open(callback);
        }
    }
    get methods() { return this._messageHandler.methods; }
    /**
     * Create
     * @param callback callback A listener for the `listening` event (ws).
     */
    open(callback) {
        const self = this;
        if (this.wss) {
            throw new Error("`ws` has already been created");
        }
        if (this.options.wsEngine) {
            this.wss = new this.options.wsEngine(this.options.wss, callback);
        }
        else {
            this.wss = new ws_1.Server(this.options.wss, callback);
        }
        this.wss.once("listening", function _onListeningWSS() {
            self.emit("listening");
        });
        this.wss.on("connection", function _onConnectionWSS(ws, req) {
            let socket = new Socket(ws);
            self.sockets.set(socket.id, socket);
            ws.once("close", function _onCloseWS() {
                self.sockets.delete(socket.id);
                socket.emit("close");
                socket.removeAllListeners();
                socket.ws = null;
                socket.rooms.clear();
                socket.data.clear();
                socket = null;
                ws.removeAllListeners();
                ws = null;
            });
            ws.on("message", function _onMessageWS(data) {
                self._messageHandler.handleMessage(socket, data)
                    .catch(function _onErrorHandleMessage(e) {
                    self.emit("error", e);
                });
            });
            ws.on("pong", function _onPongWS() {
                socket._pongAt = Date.now();
            });
            self.emit("connection", socket, req);
        });
        this.wss.on("error", function _onErrorWSS(e) {
            self.emit("error", e);
        });
        this._pingTimer = setInterval(this._ping.bind(this), this.options.pingInterval);
        return this;
    }
    /**
     * Closes the server and terminates all sockets.
     */
    async close() {
        clearInterval(this._pingTimer);
        for (const socket of this.sockets.values()) {
            socket.terminate();
        }
        await new Promise((resolve, reject) => {
            this.wss.close(err => {
                if (err) {
                    reject(err);
                }
                else {
                    resolve();
                }
            });
        });
        this.wss.removeAllListeners();
        delete this.wss;
        this.sockets.clear();
    }
    /**
     * Broadcasts a notification.
     * @param method The name of the method to be invoked.
     * @param params The parameters of the method.
     */
    broadcast(method, params) {
        const data = {
            jsonrpc: "2.0",
            method: method,
            params: params
        };
        const json = JSON.stringify(data);
        for (const socket of this.sockets.values()) {
            socket.send(json);
        }
    }
    /**
     * Broadcasts a notification to the room.
     * @param room The name of the room.
     * @param method The name of the method to be invoked.
     * @param params The parameters of the method.
     */
    notifyTo(room, method, params) {
        const data = {
            jsonrpc: "2.0",
            method: method,
            params: params
        };
        const json = JSON.stringify(data);
        for (const socket of this.sockets.values()) {
            if (socket.rooms.has(room) === true) {
                socket.send(json);
            }
        }
    }
    /**
     * Broadcasts a (raw) message to the room.
     * @param room The name of the room.
     * @param data (raw) message.
     */
    sendTo(room, data) {
        for (const socket of this.sockets.values()) {
            if (socket.rooms.has(room) === true) {
                socket.send(data);
            }
        }
    }
    /**
     * Get all sockets in the room.
     * @param room The name of the room.
     */
    in(room) {
        const sockets = new Map();
        for (const socket of this.sockets.values()) {
            if (socket.rooms.has(room) === true) {
                sockets.set(socket.id, socket);
            }
        }
        return sockets;
    }
    /**
     * Server is open or not
     */
    isOpen() {
        return this.wss !== undefined;
    }
    /**
     * Ping to all sockets.
     */
    _ping() {
        const deadline = this._lastPingAt + this.options.pingTimeout;
        for (const socket of this.sockets.values()) {
            if (socket._pongAt === -1 || socket._pongAt > deadline) {
                socket.terminate();
                continue;
            }
            socket._pongAt = -1;
            if (socket.isOpen()) {
                socket.ws.ping();
            }
        }
        this._lastPingAt = Date.now();
    }
}
exports["default"] = Server;
class Socket extends EventEmitter {
    constructor(ws) {
        super();
        this.ws = ws;
        this.id = uuid_1.v4();
        this.rooms = new Set();
        /** custom data store */
        this.data = new MapLike_1.default();
        /** (internal using for heartbeat) */
        this._pongAt = 0;
    }
    /**
     * Sends a notification to the socket.
     * @param method The name of the method to be invoked.
     * @param params The parameters of the method.
     */
    notify(method, params) {
        const data = {
            jsonrpc: "2.0",
            method: method,
            params: params
        };
        this.send(JSON.stringify(data));
    }
    /**
     * Sends a (raw) message to the socket.
     * @param data (raw) message.
     * @param binary binary flag.
     */
    send(data, binary = false) {
        if (this.isOpen()) {
            this.ws.send(data, { binary });
        }
    }
    /**
     * Joins a room. You can join multiple rooms.
     * @param room The name of the room that we want to join.
     */
    joinTo(room) {
        if (this.rooms.has(room) === false) {
            this.rooms.add(room);
            return true;
        }
        return false;
    }
    /**
     * Leaves a room.
     * @param room The name of the room to leave.
     */
    leaveFrom(room) {
        if (this.rooms.has(room) === true) {
            this.rooms.delete(room);
            return true;
        }
        return false;
    }
    /**
     * Leaves all the rooms that we've joined.
     */
    leaveFromAll() {
        this.rooms.clear();
    }
    /**
     * Initiate a closing handshake.
     * @param code A numeric value indicating the status code explaining why the connection is being closed.
     * @param reason A human-readable string explaining why the connection is closing.
     */
    close(code, reason) {
        this.ws.close(code, reason);
    }
    /**
     * Forcibly close the connection.
     */
    terminate() {
        this.ws.terminate();
    }
    /**
     * Get the connection is open or not
     */
    isOpen() {
        return this.ws !== undefined && this.ws.readyState === ws_1.OPEN;
    }
}
exports.Socket = Socket;
//# sourceMappingURL=server.js.map

/***/ }),

/***/ "./node_modules/long/src/long.js":
/*!***************************************!*\
  !*** ./node_modules/long/src/long.js ***!
  \***************************************/
/***/ ((module) => {

module.exports = Long;

/**
 * wasm optimizations, to do native i64 multiplication and divide
 */
var wasm = null;

try {
  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([
    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11
  ])), {}).exports;
} catch (e) {
  // no wasm support :(
}

/**
 * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.
 *  See the from* functions below for more convenient ways of constructing Longs.
 * @exports Long
 * @class A Long class for representing a 64 bit two's-complement integer value.
 * @param {number} low The low (signed) 32 bits of the long
 * @param {number} high The high (signed) 32 bits of the long
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @constructor
 */
function Long(low, high, unsigned) {

    /**
     * The low 32 bits as a signed value.
     * @type {number}
     */
    this.low = low | 0;

    /**
     * The high 32 bits as a signed value.
     * @type {number}
     */
    this.high = high | 0;

    /**
     * Whether unsigned or not.
     * @type {boolean}
     */
    this.unsigned = !!unsigned;
}

// The internal representation of a long is the two given signed, 32-bit values.
// We use 32-bit pieces because these are the size of integers on which
// Javascript performs bit-operations.  For operations like addition and
// multiplication, we split each number into 16 bit pieces, which can easily be
// multiplied within Javascript's floating-point representation without overflow
// or change in sign.
//
// In the algorithms below, we frequently reduce the negative case to the
// positive case by negating the input(s) and then post-processing the result.
// Note that we must ALWAYS check specially whether those values are MIN_VALUE
// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
// a positive number, it overflows back into a negative).  Not handling this
// case would often result in infinite recursion.
//
// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*
// methods on which they depend.

/**
 * An indicator used to reliably determine if an object is a Long or not.
 * @type {boolean}
 * @const
 * @private
 */
Long.prototype.__isLong__;

Object.defineProperty(Long.prototype, "__isLong__", { value: true });

/**
 * @function
 * @param {*} obj Object
 * @returns {boolean}
 * @inner
 */
function isLong(obj) {
    return (obj && obj["__isLong__"]) === true;
}

/**
 * Tests if the specified object is a Long.
 * @function
 * @param {*} obj Object
 * @returns {boolean}
 */
Long.isLong = isLong;

/**
 * A cache of the Long representations of small integer values.
 * @type {!Object}
 * @inner
 */
var INT_CACHE = {};

/**
 * A cache of the Long representations of small unsigned integer values.
 * @type {!Object}
 * @inner
 */
var UINT_CACHE = {};

/**
 * @param {number} value
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromInt(value, unsigned) {
    var obj, cachedObj, cache;
    if (unsigned) {
        value >>>= 0;
        if (cache = (0 <= value && value < 256)) {
            cachedObj = UINT_CACHE[value];
            if (cachedObj)
                return cachedObj;
        }
        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);
        if (cache)
            UINT_CACHE[value] = obj;
        return obj;
    } else {
        value |= 0;
        if (cache = (-128 <= value && value < 128)) {
            cachedObj = INT_CACHE[value];
            if (cachedObj)
                return cachedObj;
        }
        obj = fromBits(value, value < 0 ? -1 : 0, false);
        if (cache)
            INT_CACHE[value] = obj;
        return obj;
    }
}

/**
 * Returns a Long representing the given 32 bit integer value.
 * @function
 * @param {number} value The 32 bit integer in question
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */
Long.fromInt = fromInt;

/**
 * @param {number} value
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromNumber(value, unsigned) {
    if (isNaN(value))
        return unsigned ? UZERO : ZERO;
    if (unsigned) {
        if (value < 0)
            return UZERO;
        if (value >= TWO_PWR_64_DBL)
            return MAX_UNSIGNED_VALUE;
    } else {
        if (value <= -TWO_PWR_63_DBL)
            return MIN_VALUE;
        if (value + 1 >= TWO_PWR_63_DBL)
            return MAX_VALUE;
    }
    if (value < 0)
        return fromNumber(-value, unsigned).neg();
    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);
}

/**
 * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.
 * @function
 * @param {number} value The number in question
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */
Long.fromNumber = fromNumber;

/**
 * @param {number} lowBits
 * @param {number} highBits
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromBits(lowBits, highBits, unsigned) {
    return new Long(lowBits, highBits, unsigned);
}

/**
 * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is
 *  assumed to use 32 bits.
 * @function
 * @param {number} lowBits The low 32 bits
 * @param {number} highBits The high 32 bits
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */
Long.fromBits = fromBits;

/**
 * @function
 * @param {number} base
 * @param {number} exponent
 * @returns {number}
 * @inner
 */
var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)

/**
 * @param {string} str
 * @param {(boolean|number)=} unsigned
 * @param {number=} radix
 * @returns {!Long}
 * @inner
 */
function fromString(str, unsigned, radix) {
    if (str.length === 0)
        throw Error('empty string');
    if (str === "NaN" || str === "Infinity" || str === "+Infinity" || str === "-Infinity")
        return ZERO;
    if (typeof unsigned === 'number') {
        // For goog.math.long compatibility
        radix = unsigned,
        unsigned = false;
    } else {
        unsigned = !! unsigned;
    }
    radix = radix || 10;
    if (radix < 2 || 36 < radix)
        throw RangeError('radix');

    var p;
    if ((p = str.indexOf('-')) > 0)
        throw Error('interior hyphen');
    else if (p === 0) {
        return fromString(str.substring(1), unsigned, radix).neg();
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = fromNumber(pow_dbl(radix, 8));

    var result = ZERO;
    for (var i = 0; i < str.length; i += 8) {
        var size = Math.min(8, str.length - i),
            value = parseInt(str.substring(i, i + size), radix);
        if (size < 8) {
            var power = fromNumber(pow_dbl(radix, size));
            result = result.mul(power).add(fromNumber(value));
        } else {
            result = result.mul(radixToPower);
            result = result.add(fromNumber(value));
        }
    }
    result.unsigned = unsigned;
    return result;
}

/**
 * Returns a Long representation of the given string, written using the specified radix.
 * @function
 * @param {string} str The textual representation of the Long
 * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed
 * @param {number=} radix The radix in which the text is written (2-36), defaults to 10
 * @returns {!Long} The corresponding Long value
 */
Long.fromString = fromString;

/**
 * @function
 * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromValue(val, unsigned) {
    if (typeof val === 'number')
        return fromNumber(val, unsigned);
    if (typeof val === 'string')
        return fromString(val, unsigned);
    // Throws for non-objects, converts non-instanceof Long:
    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);
}

/**
 * Converts the specified value to a Long using the appropriate from* function for its type.
 * @function
 * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long}
 */
Long.fromValue = fromValue;

// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be
// no runtime penalty for these.

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_16_DBL = 1 << 16;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_24_DBL = 1 << 24;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;

/**
 * @type {!Long}
 * @const
 * @inner
 */
var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);

/**
 * @type {!Long}
 * @inner
 */
var ZERO = fromInt(0);

/**
 * Signed zero.
 * @type {!Long}
 */
Long.ZERO = ZERO;

/**
 * @type {!Long}
 * @inner
 */
var UZERO = fromInt(0, true);

/**
 * Unsigned zero.
 * @type {!Long}
 */
Long.UZERO = UZERO;

/**
 * @type {!Long}
 * @inner
 */
var ONE = fromInt(1);

/**
 * Signed one.
 * @type {!Long}
 */
Long.ONE = ONE;

/**
 * @type {!Long}
 * @inner
 */
var UONE = fromInt(1, true);

/**
 * Unsigned one.
 * @type {!Long}
 */
Long.UONE = UONE;

/**
 * @type {!Long}
 * @inner
 */
var NEG_ONE = fromInt(-1);

/**
 * Signed negative one.
 * @type {!Long}
 */
Long.NEG_ONE = NEG_ONE;

/**
 * @type {!Long}
 * @inner
 */
var MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);

/**
 * Maximum signed value.
 * @type {!Long}
 */
Long.MAX_VALUE = MAX_VALUE;

/**
 * @type {!Long}
 * @inner
 */
var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);

/**
 * Maximum unsigned value.
 * @type {!Long}
 */
Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;

/**
 * @type {!Long}
 * @inner
 */
var MIN_VALUE = fromBits(0, 0x80000000|0, false);

/**
 * Minimum signed value.
 * @type {!Long}
 */
Long.MIN_VALUE = MIN_VALUE;

/**
 * @alias Long.prototype
 * @inner
 */
var LongPrototype = Long.prototype;

/**
 * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.
 * @returns {number}
 */
LongPrototype.toInt = function toInt() {
    return this.unsigned ? this.low >>> 0 : this.low;
};

/**
 * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).
 * @returns {number}
 */
LongPrototype.toNumber = function toNumber() {
    if (this.unsigned)
        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);
    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);
};

/**
 * Converts the Long to a string written in the specified radix.
 * @param {number=} radix Radix (2-36), defaults to 10
 * @returns {string}
 * @override
 * @throws {RangeError} If `radix` is out of range
 */
LongPrototype.toString = function toString(radix) {
    radix = radix || 10;
    if (radix < 2 || 36 < radix)
        throw RangeError('radix');
    if (this.isZero())
        return '0';
    if (this.isNegative()) { // Unsigned Longs are never negative
        if (this.eq(MIN_VALUE)) {
            // We need to change the Long value before it can be negated, so we remove
            // the bottom-most digit in this base and then recurse to do the rest.
            var radixLong = fromNumber(radix),
                div = this.div(radixLong),
                rem1 = div.mul(radixLong).sub(this);
            return div.toString(radix) + rem1.toInt().toString(radix);
        } else
            return '-' + this.neg().toString(radix);
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),
        rem = this;
    var result = '';
    while (true) {
        var remDiv = rem.div(radixToPower),
            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,
            digits = intval.toString(radix);
        rem = remDiv;
        if (rem.isZero())
            return digits + result;
        else {
            while (digits.length < 6)
                digits = '0' + digits;
            result = '' + digits + result;
        }
    }
};

/**
 * Gets the high 32 bits as a signed integer.
 * @returns {number} Signed high bits
 */
LongPrototype.getHighBits = function getHighBits() {
    return this.high;
};

/**
 * Gets the high 32 bits as an unsigned integer.
 * @returns {number} Unsigned high bits
 */
LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {
    return this.high >>> 0;
};

/**
 * Gets the low 32 bits as a signed integer.
 * @returns {number} Signed low bits
 */
LongPrototype.getLowBits = function getLowBits() {
    return this.low;
};

/**
 * Gets the low 32 bits as an unsigned integer.
 * @returns {number} Unsigned low bits
 */
LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {
    return this.low >>> 0;
};

/**
 * Gets the number of bits needed to represent the absolute value of this Long.
 * @returns {number}
 */
LongPrototype.getNumBitsAbs = function getNumBitsAbs() {
    if (this.isNegative()) // Unsigned Longs are never negative
        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();
    var val = this.high != 0 ? this.high : this.low;
    for (var bit = 31; bit > 0; bit--)
        if ((val & (1 << bit)) != 0)
            break;
    return this.high != 0 ? bit + 33 : bit + 1;
};

/**
 * Tests if this Long's value equals zero.
 * @returns {boolean}
 */
LongPrototype.isZero = function isZero() {
    return this.high === 0 && this.low === 0;
};

/**
 * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.
 * @returns {boolean}
 */
LongPrototype.eqz = LongPrototype.isZero;

/**
 * Tests if this Long's value is negative.
 * @returns {boolean}
 */
LongPrototype.isNegative = function isNegative() {
    return !this.unsigned && this.high < 0;
};

/**
 * Tests if this Long's value is positive.
 * @returns {boolean}
 */
LongPrototype.isPositive = function isPositive() {
    return this.unsigned || this.high >= 0;
};

/**
 * Tests if this Long's value is odd.
 * @returns {boolean}
 */
LongPrototype.isOdd = function isOdd() {
    return (this.low & 1) === 1;
};

/**
 * Tests if this Long's value is even.
 * @returns {boolean}
 */
LongPrototype.isEven = function isEven() {
    return (this.low & 1) === 0;
};

/**
 * Tests if this Long's value equals the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.equals = function equals(other) {
    if (!isLong(other))
        other = fromValue(other);
    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)
        return false;
    return this.high === other.high && this.low === other.low;
};

/**
 * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.eq = LongPrototype.equals;

/**
 * Tests if this Long's value differs from the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.notEquals = function notEquals(other) {
    return !this.eq(/* validates */ other);
};

/**
 * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.neq = LongPrototype.notEquals;

/**
 * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.ne = LongPrototype.notEquals;

/**
 * Tests if this Long's value is less than the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lessThan = function lessThan(other) {
    return this.comp(/* validates */ other) < 0;
};

/**
 * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lt = LongPrototype.lessThan;

/**
 * Tests if this Long's value is less than or equal the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {
    return this.comp(/* validates */ other) <= 0;
};

/**
 * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lte = LongPrototype.lessThanOrEqual;

/**
 * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.le = LongPrototype.lessThanOrEqual;

/**
 * Tests if this Long's value is greater than the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.greaterThan = function greaterThan(other) {
    return this.comp(/* validates */ other) > 0;
};

/**
 * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.gt = LongPrototype.greaterThan;

/**
 * Tests if this Long's value is greater than or equal the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {
    return this.comp(/* validates */ other) >= 0;
};

/**
 * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.gte = LongPrototype.greaterThanOrEqual;

/**
 * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.ge = LongPrototype.greaterThanOrEqual;

/**
 * Compares this Long's value with the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {number} 0 if they are the same, 1 if the this is greater and -1
 *  if the given one is greater
 */
LongPrototype.compare = function compare(other) {
    if (!isLong(other))
        other = fromValue(other);
    if (this.eq(other))
        return 0;
    var thisNeg = this.isNegative(),
        otherNeg = other.isNegative();
    if (thisNeg && !otherNeg)
        return -1;
    if (!thisNeg && otherNeg)
        return 1;
    // At this point the sign bits are the same
    if (!this.unsigned)
        return this.sub(other).isNegative() ? -1 : 1;
    // Both are positive if at least one is unsigned
    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;
};

/**
 * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {number} 0 if they are the same, 1 if the this is greater and -1
 *  if the given one is greater
 */
LongPrototype.comp = LongPrototype.compare;

/**
 * Negates this Long's value.
 * @returns {!Long} Negated Long
 */
LongPrototype.negate = function negate() {
    if (!this.unsigned && this.eq(MIN_VALUE))
        return MIN_VALUE;
    return this.not().add(ONE);
};

/**
 * Negates this Long's value. This is an alias of {@link Long#negate}.
 * @function
 * @returns {!Long} Negated Long
 */
LongPrototype.neg = LongPrototype.negate;

/**
 * Returns the sum of this and the specified Long.
 * @param {!Long|number|string} addend Addend
 * @returns {!Long} Sum
 */
LongPrototype.add = function add(addend) {
    if (!isLong(addend))
        addend = fromValue(addend);

    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high >>> 16;
    var a32 = this.high & 0xFFFF;
    var a16 = this.low >>> 16;
    var a00 = this.low & 0xFFFF;

    var b48 = addend.high >>> 16;
    var b32 = addend.high & 0xFFFF;
    var b16 = addend.low >>> 16;
    var b00 = addend.low & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);
};

/**
 * Returns the difference of this and the specified Long.
 * @param {!Long|number|string} subtrahend Subtrahend
 * @returns {!Long} Difference
 */
LongPrototype.subtract = function subtract(subtrahend) {
    if (!isLong(subtrahend))
        subtrahend = fromValue(subtrahend);
    return this.add(subtrahend.neg());
};

/**
 * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.
 * @function
 * @param {!Long|number|string} subtrahend Subtrahend
 * @returns {!Long} Difference
 */
LongPrototype.sub = LongPrototype.subtract;

/**
 * Returns the product of this and the specified Long.
 * @param {!Long|number|string} multiplier Multiplier
 * @returns {!Long} Product
 */
LongPrototype.multiply = function multiply(multiplier) {
    if (this.isZero())
        return ZERO;
    if (!isLong(multiplier))
        multiplier = fromValue(multiplier);

    // use wasm support if present
    if (wasm) {
        var low = wasm.mul(this.low,
                           this.high,
                           multiplier.low,
                           multiplier.high);
        return fromBits(low, wasm.get_high(), this.unsigned);
    }

    if (multiplier.isZero())
        return ZERO;
    if (this.eq(MIN_VALUE))
        return multiplier.isOdd() ? MIN_VALUE : ZERO;
    if (multiplier.eq(MIN_VALUE))
        return this.isOdd() ? MIN_VALUE : ZERO;

    if (this.isNegative()) {
        if (multiplier.isNegative())
            return this.neg().mul(multiplier.neg());
        else
            return this.neg().mul(multiplier).neg();
    } else if (multiplier.isNegative())
        return this.mul(multiplier.neg()).neg();

    // If both longs are small, use float multiplication
    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))
        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high >>> 16;
    var a32 = this.high & 0xFFFF;
    var a16 = this.low >>> 16;
    var a00 = this.low & 0xFFFF;

    var b48 = multiplier.high >>> 16;
    var b32 = multiplier.high & 0xFFFF;
    var b16 = multiplier.low >>> 16;
    var b00 = multiplier.low & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);
};

/**
 * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.
 * @function
 * @param {!Long|number|string} multiplier Multiplier
 * @returns {!Long} Product
 */
LongPrototype.mul = LongPrototype.multiply;

/**
 * Returns this Long divided by the specified. The result is signed if this Long is signed or
 *  unsigned if this Long is unsigned.
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Quotient
 */
LongPrototype.divide = function divide(divisor) {
    if (!isLong(divisor))
        divisor = fromValue(divisor);
    if (divisor.isZero())
        throw Error('division by zero');

    // use wasm support if present
    if (wasm) {
        // guard against signed division overflow: the largest
        // negative number / -1 would be 1 larger than the largest
        // positive number, due to two's complement.
        if (!this.unsigned &&
            this.high === -0x80000000 &&
            divisor.low === -1 && divisor.high === -1) {
            // be consistent with non-wasm code path
            return this;
        }
        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(
            this.low,
            this.high,
            divisor.low,
            divisor.high
        );
        return fromBits(low, wasm.get_high(), this.unsigned);
    }

    if (this.isZero())
        return this.unsigned ? UZERO : ZERO;
    var approx, rem, res;
    if (!this.unsigned) {
        // This section is only relevant for signed longs and is derived from the
        // closure library as a whole.
        if (this.eq(MIN_VALUE)) {
            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))
                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
            else if (divisor.eq(MIN_VALUE))
                return ONE;
            else {
                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
                var halfThis = this.shr(1);
                approx = halfThis.div(divisor).shl(1);
                if (approx.eq(ZERO)) {
                    return divisor.isNegative() ? ONE : NEG_ONE;
                } else {
                    rem = this.sub(divisor.mul(approx));
                    res = approx.add(rem.div(divisor));
                    return res;
                }
            }
        } else if (divisor.eq(MIN_VALUE))
            return this.unsigned ? UZERO : ZERO;
        if (this.isNegative()) {
            if (divisor.isNegative())
                return this.neg().div(divisor.neg());
            return this.neg().div(divisor).neg();
        } else if (divisor.isNegative())
            return this.div(divisor.neg()).neg();
        res = ZERO;
    } else {
        // The algorithm below has not been made for unsigned longs. It's therefore
        // required to take special care of the MSB prior to running it.
        if (!divisor.unsigned)
            divisor = divisor.toUnsigned();
        if (divisor.gt(this))
            return UZERO;
        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true
            return UONE;
        res = UZERO;
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    rem = this;
    while (rem.gte(divisor)) {
        // Approximate the result of division. This may be a little greater or
        // smaller than the actual value.
        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));

        // We will tweak the approximate result by changing it in the 48-th digit or
        // the smallest non-fractional digit, whichever is larger.
        var log2 = Math.ceil(Math.log(approx) / Math.LN2),
            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),

        // Decrease the approximation until it is smaller than the remainder.  Note
        // that if it is too large, the product overflows and is negative.
            approxRes = fromNumber(approx),
            approxRem = approxRes.mul(divisor);
        while (approxRem.isNegative() || approxRem.gt(rem)) {
            approx -= delta;
            approxRes = fromNumber(approx, this.unsigned);
            approxRem = approxRes.mul(divisor);
        }

        // We know the answer can't be zero... and actually, zero would cause
        // infinite recursion since we would make no progress.
        if (approxRes.isZero())
            approxRes = ONE;

        res = res.add(approxRes);
        rem = rem.sub(approxRem);
    }
    return res;
};

/**
 * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Quotient
 */
LongPrototype.div = LongPrototype.divide;

/**
 * Returns this Long modulo the specified.
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */
LongPrototype.modulo = function modulo(divisor) {
    if (!isLong(divisor))
        divisor = fromValue(divisor);

    // use wasm support if present
    if (wasm) {
        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(
            this.low,
            this.high,
            divisor.low,
            divisor.high
        );
        return fromBits(low, wasm.get_high(), this.unsigned);
    }

    return this.sub(this.div(divisor).mul(divisor));
};

/**
 * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */
LongPrototype.mod = LongPrototype.modulo;

/**
 * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */
LongPrototype.rem = LongPrototype.modulo;

/**
 * Returns the bitwise NOT of this Long.
 * @returns {!Long}
 */
LongPrototype.not = function not() {
    return fromBits(~this.low, ~this.high, this.unsigned);
};

/**
 * Returns the bitwise AND of this Long and the specified.
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */
LongPrototype.and = function and(other) {
    if (!isLong(other))
        other = fromValue(other);
    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);
};

/**
 * Returns the bitwise OR of this Long and the specified.
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */
LongPrototype.or = function or(other) {
    if (!isLong(other))
        other = fromValue(other);
    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);
};

/**
 * Returns the bitwise XOR of this Long and the given one.
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */
LongPrototype.xor = function xor(other) {
    if (!isLong(other))
        other = fromValue(other);
    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);
};

/**
 * Returns this Long with bits shifted to the left by the given amount.
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shiftLeft = function shiftLeft(numBits) {
    if (isLong(numBits))
        numBits = numBits.toInt();
    if ((numBits &= 63) === 0)
        return this;
    else if (numBits < 32)
        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);
    else
        return fromBits(0, this.low << (numBits - 32), this.unsigned);
};

/**
 * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shl = LongPrototype.shiftLeft;

/**
 * Returns this Long with bits arithmetically shifted to the right by the given amount.
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shiftRight = function shiftRight(numBits) {
    if (isLong(numBits))
        numBits = numBits.toInt();
    if ((numBits &= 63) === 0)
        return this;
    else if (numBits < 32)
        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);
    else
        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);
};

/**
 * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shr = LongPrototype.shiftRight;

/**
 * Returns this Long with bits logically shifted to the right by the given amount.
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {
    if (isLong(numBits))
        numBits = numBits.toInt();
    numBits &= 63;
    if (numBits === 0)
        return this;
    else {
        var high = this.high;
        if (numBits < 32) {
            var low = this.low;
            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);
        } else if (numBits === 32)
            return fromBits(high, 0, this.unsigned);
        else
            return fromBits(high >>> (numBits - 32), 0, this.unsigned);
    }
};

/**
 * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shru = LongPrototype.shiftRightUnsigned;

/**
 * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;

/**
 * Converts this Long to signed.
 * @returns {!Long} Signed long
 */
LongPrototype.toSigned = function toSigned() {
    if (!this.unsigned)
        return this;
    return fromBits(this.low, this.high, false);
};

/**
 * Converts this Long to unsigned.
 * @returns {!Long} Unsigned long
 */
LongPrototype.toUnsigned = function toUnsigned() {
    if (this.unsigned)
        return this;
    return fromBits(this.low, this.high, true);
};

/**
 * Converts this Long to its byte representation.
 * @param {boolean=} le Whether little or big endian, defaults to big endian
 * @returns {!Array.<number>} Byte representation
 */
LongPrototype.toBytes = function toBytes(le) {
    return le ? this.toBytesLE() : this.toBytesBE();
};

/**
 * Converts this Long to its little endian byte representation.
 * @returns {!Array.<number>} Little endian byte representation
 */
LongPrototype.toBytesLE = function toBytesLE() {
    var hi = this.high,
        lo = this.low;
    return [
        lo        & 0xff,
        lo >>>  8 & 0xff,
        lo >>> 16 & 0xff,
        lo >>> 24       ,
        hi        & 0xff,
        hi >>>  8 & 0xff,
        hi >>> 16 & 0xff,
        hi >>> 24
    ];
};

/**
 * Converts this Long to its big endian byte representation.
 * @returns {!Array.<number>} Big endian byte representation
 */
LongPrototype.toBytesBE = function toBytesBE() {
    var hi = this.high,
        lo = this.low;
    return [
        hi >>> 24       ,
        hi >>> 16 & 0xff,
        hi >>>  8 & 0xff,
        hi        & 0xff,
        lo >>> 24       ,
        lo >>> 16 & 0xff,
        lo >>>  8 & 0xff,
        lo        & 0xff
    ];
};

/**
 * Creates a Long from its byte representation.
 * @param {!Array.<number>} bytes Byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @param {boolean=} le Whether little or big endian, defaults to big endian
 * @returns {Long} The corresponding Long value
 */
Long.fromBytes = function fromBytes(bytes, unsigned, le) {
    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);
};

/**
 * Creates a Long from its little endian byte representation.
 * @param {!Array.<number>} bytes Little endian byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {Long} The corresponding Long value
 */
Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {
    return new Long(
        bytes[0]       |
        bytes[1] <<  8 |
        bytes[2] << 16 |
        bytes[3] << 24,
        bytes[4]       |
        bytes[5] <<  8 |
        bytes[6] << 16 |
        bytes[7] << 24,
        unsigned
    );
};

/**
 * Creates a Long from its big endian byte representation.
 * @param {!Array.<number>} bytes Big endian byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {Long} The corresponding Long value
 */
Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {
    return new Long(
        bytes[4] << 24 |
        bytes[5] << 16 |
        bytes[6] <<  8 |
        bytes[7],
        bytes[0] << 24 |
        bytes[1] << 16 |
        bytes[2] <<  8 |
        bytes[3],
        unsigned
    );
};


/***/ }),

/***/ "./node_modules/node-fetch/browser.js":
/*!********************************************!*\
  !*** ./node_modules/node-fetch/browser.js ***!
  \********************************************/
/***/ ((module, exports) => {

"use strict";


// ref: https://github.com/tc39/proposal-global
var getGlobal = function () {
	// the only reliable means to get the global object is
	// `Function('return this')()`
	// However, this causes CSP violations in Chrome apps.
	if (typeof self !== 'undefined') { return self; }
	if (typeof window !== 'undefined') { return window; }
	if (typeof global !== 'undefined') { return global; }
	throw new Error('unable to locate global object');
}

var global = getGlobal();

module.exports = exports = global.fetch;

// Needed for TypeScript and Webpack.
if (global.fetch) {
	exports["default"] = global.fetch.bind(global);
}

exports.Headers = global.Headers;
exports.Request = global.Request;
exports.Response = global.Response;

/***/ }),

/***/ "./node_modules/object-inspect/index.js":
/*!**********************************************!*\
  !*** ./node_modules/object-inspect/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var hasMap = typeof Map === 'function' && Map.prototype;
var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;
var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function' ? mapSizeDescriptor.get : null;
var mapForEach = hasMap && Map.prototype.forEach;
var hasSet = typeof Set === 'function' && Set.prototype;
var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;
var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function' ? setSizeDescriptor.get : null;
var setForEach = hasSet && Set.prototype.forEach;
var hasWeakMap = typeof WeakMap === 'function' && WeakMap.prototype;
var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
var hasWeakSet = typeof WeakSet === 'function' && WeakSet.prototype;
var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
var hasWeakRef = typeof WeakRef === 'function' && WeakRef.prototype;
var weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;
var booleanValueOf = Boolean.prototype.valueOf;
var objectToString = Object.prototype.toString;
var functionToString = Function.prototype.toString;
var $match = String.prototype.match;
var $slice = String.prototype.slice;
var $replace = String.prototype.replace;
var $toUpperCase = String.prototype.toUpperCase;
var $toLowerCase = String.prototype.toLowerCase;
var $test = RegExp.prototype.test;
var $concat = Array.prototype.concat;
var $join = Array.prototype.join;
var $arrSlice = Array.prototype.slice;
var $floor = Math.floor;
var bigIntValueOf = typeof BigInt === 'function' ? BigInt.prototype.valueOf : null;
var gOPS = Object.getOwnPropertySymbols;
var symToString = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? Symbol.prototype.toString : null;
var hasShammedSymbols = typeof Symbol === 'function' && typeof Symbol.iterator === 'object';
// ie, `has-tostringtag/shams
var toStringTag = typeof Symbol === 'function' && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols ? 'object' : 'symbol')
    ? Symbol.toStringTag
    : null;
var isEnumerable = Object.prototype.propertyIsEnumerable;

var gPO = (typeof Reflect === 'function' ? Reflect.getPrototypeOf : Object.getPrototypeOf) || (
    [].__proto__ === Array.prototype // eslint-disable-line no-proto
        ? function (O) {
            return O.__proto__; // eslint-disable-line no-proto
        }
        : null
);

function addNumericSeparator(num, str) {
    if (
        num === Infinity
        || num === -Infinity
        || num !== num
        || (num && num > -1000 && num < 1000)
        || $test.call(/e/, str)
    ) {
        return str;
    }
    var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;
    if (typeof num === 'number') {
        var int = num < 0 ? -$floor(-num) : $floor(num); // trunc(num)
        if (int !== num) {
            var intStr = String(int);
            var dec = $slice.call(str, intStr.length + 1);
            return $replace.call(intStr, sepRegex, '$&_') + '.' + $replace.call($replace.call(dec, /([0-9]{3})/g, '$&_'), /_$/, '');
        }
    }
    return $replace.call(str, sepRegex, '$&_');
}

var utilInspect = __webpack_require__(/*! ./util.inspect */ "?2128");
var inspectCustom = utilInspect.custom;
var inspectSymbol = isSymbol(inspectCustom) ? inspectCustom : null;

module.exports = function inspect_(obj, options, depth, seen) {
    var opts = options || {};

    if (has(opts, 'quoteStyle') && (opts.quoteStyle !== 'single' && opts.quoteStyle !== 'double')) {
        throw new TypeError('option "quoteStyle" must be "single" or "double"');
    }
    if (
        has(opts, 'maxStringLength') && (typeof opts.maxStringLength === 'number'
            ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity
            : opts.maxStringLength !== null
        )
    ) {
        throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
    }
    var customInspect = has(opts, 'customInspect') ? opts.customInspect : true;
    if (typeof customInspect !== 'boolean' && customInspect !== 'symbol') {
        throw new TypeError('option "customInspect", if provided, must be `true`, `false`, or `\'symbol\'`');
    }

    if (
        has(opts, 'indent')
        && opts.indent !== null
        && opts.indent !== '\t'
        && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)
    ) {
        throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');
    }
    if (has(opts, 'numericSeparator') && typeof opts.numericSeparator !== 'boolean') {
        throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');
    }
    var numericSeparator = opts.numericSeparator;

    if (typeof obj === 'undefined') {
        return 'undefined';
    }
    if (obj === null) {
        return 'null';
    }
    if (typeof obj === 'boolean') {
        return obj ? 'true' : 'false';
    }

    if (typeof obj === 'string') {
        return inspectString(obj, opts);
    }
    if (typeof obj === 'number') {
        if (obj === 0) {
            return Infinity / obj > 0 ? '0' : '-0';
        }
        var str = String(obj);
        return numericSeparator ? addNumericSeparator(obj, str) : str;
    }
    if (typeof obj === 'bigint') {
        var bigIntStr = String(obj) + 'n';
        return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;
    }

    var maxDepth = typeof opts.depth === 'undefined' ? 5 : opts.depth;
    if (typeof depth === 'undefined') { depth = 0; }
    if (depth >= maxDepth && maxDepth > 0 && typeof obj === 'object') {
        return isArray(obj) ? '[Array]' : '[Object]';
    }

    var indent = getIndent(opts, depth);

    if (typeof seen === 'undefined') {
        seen = [];
    } else if (indexOf(seen, obj) >= 0) {
        return '[Circular]';
    }

    function inspect(value, from, noIndent) {
        if (from) {
            seen = $arrSlice.call(seen);
            seen.push(from);
        }
        if (noIndent) {
            var newOpts = {
                depth: opts.depth
            };
            if (has(opts, 'quoteStyle')) {
                newOpts.quoteStyle = opts.quoteStyle;
            }
            return inspect_(value, newOpts, depth + 1, seen);
        }
        return inspect_(value, opts, depth + 1, seen);
    }

    if (typeof obj === 'function' && !isRegExp(obj)) { // in older engines, regexes are callable
        var name = nameOf(obj);
        var keys = arrObjKeys(obj, inspect);
        return '[Function' + (name ? ': ' + name : ' (anonymous)') + ']' + (keys.length > 0 ? ' { ' + $join.call(keys, ', ') + ' }' : '');
    }
    if (isSymbol(obj)) {
        var symString = hasShammedSymbols ? $replace.call(String(obj), /^(Symbol\(.*\))_[^)]*$/, '$1') : symToString.call(obj);
        return typeof obj === 'object' && !hasShammedSymbols ? markBoxed(symString) : symString;
    }
    if (isElement(obj)) {
        var s = '<' + $toLowerCase.call(String(obj.nodeName));
        var attrs = obj.attributes || [];
        for (var i = 0; i < attrs.length; i++) {
            s += ' ' + attrs[i].name + '=' + wrapQuotes(quote(attrs[i].value), 'double', opts);
        }
        s += '>';
        if (obj.childNodes && obj.childNodes.length) { s += '...'; }
        s += '</' + $toLowerCase.call(String(obj.nodeName)) + '>';
        return s;
    }
    if (isArray(obj)) {
        if (obj.length === 0) { return '[]'; }
        var xs = arrObjKeys(obj, inspect);
        if (indent && !singleLineValues(xs)) {
            return '[' + indentedJoin(xs, indent) + ']';
        }
        return '[ ' + $join.call(xs, ', ') + ' ]';
    }
    if (isError(obj)) {
        var parts = arrObjKeys(obj, inspect);
        if (!('cause' in Error.prototype) && 'cause' in obj && !isEnumerable.call(obj, 'cause')) {
            return '{ [' + String(obj) + '] ' + $join.call($concat.call('[cause]: ' + inspect(obj.cause), parts), ', ') + ' }';
        }
        if (parts.length === 0) { return '[' + String(obj) + ']'; }
        return '{ [' + String(obj) + '] ' + $join.call(parts, ', ') + ' }';
    }
    if (typeof obj === 'object' && customInspect) {
        if (inspectSymbol && typeof obj[inspectSymbol] === 'function' && utilInspect) {
            return utilInspect(obj, { depth: maxDepth - depth });
        } else if (customInspect !== 'symbol' && typeof obj.inspect === 'function') {
            return obj.inspect();
        }
    }
    if (isMap(obj)) {
        var mapParts = [];
        mapForEach.call(obj, function (value, key) {
            mapParts.push(inspect(key, obj, true) + ' => ' + inspect(value, obj));
        });
        return collectionOf('Map', mapSize.call(obj), mapParts, indent);
    }
    if (isSet(obj)) {
        var setParts = [];
        setForEach.call(obj, function (value) {
            setParts.push(inspect(value, obj));
        });
        return collectionOf('Set', setSize.call(obj), setParts, indent);
    }
    if (isWeakMap(obj)) {
        return weakCollectionOf('WeakMap');
    }
    if (isWeakSet(obj)) {
        return weakCollectionOf('WeakSet');
    }
    if (isWeakRef(obj)) {
        return weakCollectionOf('WeakRef');
    }
    if (isNumber(obj)) {
        return markBoxed(inspect(Number(obj)));
    }
    if (isBigInt(obj)) {
        return markBoxed(inspect(bigIntValueOf.call(obj)));
    }
    if (isBoolean(obj)) {
        return markBoxed(booleanValueOf.call(obj));
    }
    if (isString(obj)) {
        return markBoxed(inspect(String(obj)));
    }
    if (!isDate(obj) && !isRegExp(obj)) {
        var ys = arrObjKeys(obj, inspect);
        var isPlainObject = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;
        var protoTag = obj instanceof Object ? '' : 'null prototype';
        var stringTag = !isPlainObject && toStringTag && Object(obj) === obj && toStringTag in obj ? $slice.call(toStr(obj), 8, -1) : protoTag ? 'Object' : '';
        var constructorTag = isPlainObject || typeof obj.constructor !== 'function' ? '' : obj.constructor.name ? obj.constructor.name + ' ' : '';
        var tag = constructorTag + (stringTag || protoTag ? '[' + $join.call($concat.call([], stringTag || [], protoTag || []), ': ') + '] ' : '');
        if (ys.length === 0) { return tag + '{}'; }
        if (indent) {
            return tag + '{' + indentedJoin(ys, indent) + '}';
        }
        return tag + '{ ' + $join.call(ys, ', ') + ' }';
    }
    return String(obj);
};

function wrapQuotes(s, defaultStyle, opts) {
    var quoteChar = (opts.quoteStyle || defaultStyle) === 'double' ? '"' : "'";
    return quoteChar + s + quoteChar;
}

function quote(s) {
    return $replace.call(String(s), /"/g, '&quot;');
}

function isArray(obj) { return toStr(obj) === '[object Array]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
function isDate(obj) { return toStr(obj) === '[object Date]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
function isRegExp(obj) { return toStr(obj) === '[object RegExp]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
function isError(obj) { return toStr(obj) === '[object Error]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
function isString(obj) { return toStr(obj) === '[object String]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
function isNumber(obj) { return toStr(obj) === '[object Number]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
function isBoolean(obj) { return toStr(obj) === '[object Boolean]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }

// Symbol and BigInt do have Symbol.toStringTag by spec, so that can't be used to eliminate false positives
function isSymbol(obj) {
    if (hasShammedSymbols) {
        return obj && typeof obj === 'object' && obj instanceof Symbol;
    }
    if (typeof obj === 'symbol') {
        return true;
    }
    if (!obj || typeof obj !== 'object' || !symToString) {
        return false;
    }
    try {
        symToString.call(obj);
        return true;
    } catch (e) {}
    return false;
}

function isBigInt(obj) {
    if (!obj || typeof obj !== 'object' || !bigIntValueOf) {
        return false;
    }
    try {
        bigIntValueOf.call(obj);
        return true;
    } catch (e) {}
    return false;
}

var hasOwn = Object.prototype.hasOwnProperty || function (key) { return key in this; };
function has(obj, key) {
    return hasOwn.call(obj, key);
}

function toStr(obj) {
    return objectToString.call(obj);
}

function nameOf(f) {
    if (f.name) { return f.name; }
    var m = $match.call(functionToString.call(f), /^function\s*([\w$]+)/);
    if (m) { return m[1]; }
    return null;
}

function indexOf(xs, x) {
    if (xs.indexOf) { return xs.indexOf(x); }
    for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x) { return i; }
    }
    return -1;
}

function isMap(x) {
    if (!mapSize || !x || typeof x !== 'object') {
        return false;
    }
    try {
        mapSize.call(x);
        try {
            setSize.call(x);
        } catch (s) {
            return true;
        }
        return x instanceof Map; // core-js workaround, pre-v2.5.0
    } catch (e) {}
    return false;
}

function isWeakMap(x) {
    if (!weakMapHas || !x || typeof x !== 'object') {
        return false;
    }
    try {
        weakMapHas.call(x, weakMapHas);
        try {
            weakSetHas.call(x, weakSetHas);
        } catch (s) {
            return true;
        }
        return x instanceof WeakMap; // core-js workaround, pre-v2.5.0
    } catch (e) {}
    return false;
}

function isWeakRef(x) {
    if (!weakRefDeref || !x || typeof x !== 'object') {
        return false;
    }
    try {
        weakRefDeref.call(x);
        return true;
    } catch (e) {}
    return false;
}

function isSet(x) {
    if (!setSize || !x || typeof x !== 'object') {
        return false;
    }
    try {
        setSize.call(x);
        try {
            mapSize.call(x);
        } catch (m) {
            return true;
        }
        return x instanceof Set; // core-js workaround, pre-v2.5.0
    } catch (e) {}
    return false;
}

function isWeakSet(x) {
    if (!weakSetHas || !x || typeof x !== 'object') {
        return false;
    }
    try {
        weakSetHas.call(x, weakSetHas);
        try {
            weakMapHas.call(x, weakMapHas);
        } catch (s) {
            return true;
        }
        return x instanceof WeakSet; // core-js workaround, pre-v2.5.0
    } catch (e) {}
    return false;
}

function isElement(x) {
    if (!x || typeof x !== 'object') { return false; }
    if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {
        return true;
    }
    return typeof x.nodeName === 'string' && typeof x.getAttribute === 'function';
}

function inspectString(str, opts) {
    if (str.length > opts.maxStringLength) {
        var remaining = str.length - opts.maxStringLength;
        var trailer = '... ' + remaining + ' more character' + (remaining > 1 ? 's' : '');
        return inspectString($slice.call(str, 0, opts.maxStringLength), opts) + trailer;
    }
    // eslint-disable-next-line no-control-regex
    var s = $replace.call($replace.call(str, /(['\\])/g, '\\$1'), /[\x00-\x1f]/g, lowbyte);
    return wrapQuotes(s, 'single', opts);
}

function lowbyte(c) {
    var n = c.charCodeAt(0);
    var x = {
        8: 'b',
        9: 't',
        10: 'n',
        12: 'f',
        13: 'r'
    }[n];
    if (x) { return '\\' + x; }
    return '\\x' + (n < 0x10 ? '0' : '') + $toUpperCase.call(n.toString(16));
}

function markBoxed(str) {
    return 'Object(' + str + ')';
}

function weakCollectionOf(type) {
    return type + ' { ? }';
}

function collectionOf(type, size, entries, indent) {
    var joinedEntries = indent ? indentedJoin(entries, indent) : $join.call(entries, ', ');
    return type + ' (' + size + ') {' + joinedEntries + '}';
}

function singleLineValues(xs) {
    for (var i = 0; i < xs.length; i++) {
        if (indexOf(xs[i], '\n') >= 0) {
            return false;
        }
    }
    return true;
}

function getIndent(opts, depth) {
    var baseIndent;
    if (opts.indent === '\t') {
        baseIndent = '\t';
    } else if (typeof opts.indent === 'number' && opts.indent > 0) {
        baseIndent = $join.call(Array(opts.indent + 1), ' ');
    } else {
        return null;
    }
    return {
        base: baseIndent,
        prev: $join.call(Array(depth + 1), baseIndent)
    };
}

function indentedJoin(xs, indent) {
    if (xs.length === 0) { return ''; }
    var lineJoiner = '\n' + indent.prev + indent.base;
    return lineJoiner + $join.call(xs, ',' + lineJoiner) + '\n' + indent.prev;
}

function arrObjKeys(obj, inspect) {
    var isArr = isArray(obj);
    var xs = [];
    if (isArr) {
        xs.length = obj.length;
        for (var i = 0; i < obj.length; i++) {
            xs[i] = has(obj, i) ? inspect(obj[i], obj) : '';
        }
    }
    var syms = typeof gOPS === 'function' ? gOPS(obj) : [];
    var symMap;
    if (hasShammedSymbols) {
        symMap = {};
        for (var k = 0; k < syms.length; k++) {
            symMap['$' + syms[k]] = syms[k];
        }
    }

    for (var key in obj) { // eslint-disable-line no-restricted-syntax
        if (!has(obj, key)) { continue; } // eslint-disable-line no-restricted-syntax, no-continue
        if (isArr && String(Number(key)) === key && key < obj.length) { continue; } // eslint-disable-line no-restricted-syntax, no-continue
        if (hasShammedSymbols && symMap['$' + key] instanceof Symbol) {
            // this is to prevent shammed Symbols, which are stored as strings, from being included in the string key section
            continue; // eslint-disable-line no-restricted-syntax, no-continue
        } else if ($test.call(/[^\w$]/, key)) {
            xs.push(inspect(key, obj) + ': ' + inspect(obj[key], obj));
        } else {
            xs.push(key + ': ' + inspect(obj[key], obj));
        }
    }
    if (typeof gOPS === 'function') {
        for (var j = 0; j < syms.length; j++) {
            if (isEnumerable.call(obj, syms[j])) {
                xs.push('[' + inspect(syms[j]) + ']: ' + inspect(obj[syms[j]], obj));
            }
        }
    }
    return xs;
}


/***/ }),

/***/ "./node_modules/qs/lib/formats.js":
/*!****************************************!*\
  !*** ./node_modules/qs/lib/formats.js ***!
  \****************************************/
/***/ ((module) => {

"use strict";


var replace = String.prototype.replace;
var percentTwenties = /%20/g;

var Format = {
    RFC1738: 'RFC1738',
    RFC3986: 'RFC3986'
};

module.exports = {
    'default': Format.RFC3986,
    formatters: {
        RFC1738: function (value) {
            return replace.call(value, percentTwenties, '+');
        },
        RFC3986: function (value) {
            return String(value);
        }
    },
    RFC1738: Format.RFC1738,
    RFC3986: Format.RFC3986
};


/***/ }),

/***/ "./node_modules/qs/lib/index.js":
/*!**************************************!*\
  !*** ./node_modules/qs/lib/index.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var stringify = __webpack_require__(/*! ./stringify */ "./node_modules/qs/lib/stringify.js");
var parse = __webpack_require__(/*! ./parse */ "./node_modules/qs/lib/parse.js");
var formats = __webpack_require__(/*! ./formats */ "./node_modules/qs/lib/formats.js");

module.exports = {
    formats: formats,
    parse: parse,
    stringify: stringify
};


/***/ }),

/***/ "./node_modules/qs/lib/parse.js":
/*!**************************************!*\
  !*** ./node_modules/qs/lib/parse.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./utils */ "./node_modules/qs/lib/utils.js");

var has = Object.prototype.hasOwnProperty;
var isArray = Array.isArray;

var defaults = {
    allowDots: false,
    allowPrototypes: false,
    allowSparse: false,
    arrayLimit: 20,
    charset: 'utf-8',
    charsetSentinel: false,
    comma: false,
    decoder: utils.decode,
    delimiter: '&',
    depth: 5,
    ignoreQueryPrefix: false,
    interpretNumericEntities: false,
    parameterLimit: 1000,
    parseArrays: true,
    plainObjects: false,
    strictNullHandling: false
};

var interpretNumericEntities = function (str) {
    return str.replace(/&#(\d+);/g, function ($0, numberStr) {
        return String.fromCharCode(parseInt(numberStr, 10));
    });
};

var parseArrayValue = function (val, options) {
    if (val && typeof val === 'string' && options.comma && val.indexOf(',') > -1) {
        return val.split(',');
    }

    return val;
};

// This is what browsers will submit when the ✓ character occurs in an
// application/x-www-form-urlencoded body and the encoding of the page containing
// the form is iso-8859-1, or when the submitted form has an accept-charset
// attribute of iso-8859-1. Presumably also with other charsets that do not contain
// the ✓ character, such as us-ascii.
var isoSentinel = 'utf8=%26%2310003%3B'; // encodeURIComponent('&#10003;')

// These are the percent-encoded utf-8 octets representing a checkmark, indicating that the request actually is utf-8 encoded.
var charsetSentinel = 'utf8=%E2%9C%93'; // encodeURIComponent('✓')

var parseValues = function parseQueryStringValues(str, options) {
    var obj = {};
    var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, '') : str;
    var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;
    var parts = cleanStr.split(options.delimiter, limit);
    var skipIndex = -1; // Keep track of where the utf8 sentinel was found
    var i;

    var charset = options.charset;
    if (options.charsetSentinel) {
        for (i = 0; i < parts.length; ++i) {
            if (parts[i].indexOf('utf8=') === 0) {
                if (parts[i] === charsetSentinel) {
                    charset = 'utf-8';
                } else if (parts[i] === isoSentinel) {
                    charset = 'iso-8859-1';
                }
                skipIndex = i;
                i = parts.length; // The eslint settings do not allow break;
            }
        }
    }

    for (i = 0; i < parts.length; ++i) {
        if (i === skipIndex) {
            continue;
        }
        var part = parts[i];

        var bracketEqualsPos = part.indexOf(']=');
        var pos = bracketEqualsPos === -1 ? part.indexOf('=') : bracketEqualsPos + 1;

        var key, val;
        if (pos === -1) {
            key = options.decoder(part, defaults.decoder, charset, 'key');
            val = options.strictNullHandling ? null : '';
        } else {
            key = options.decoder(part.slice(0, pos), defaults.decoder, charset, 'key');
            val = utils.maybeMap(
                parseArrayValue(part.slice(pos + 1), options),
                function (encodedVal) {
                    return options.decoder(encodedVal, defaults.decoder, charset, 'value');
                }
            );
        }

        if (val && options.interpretNumericEntities && charset === 'iso-8859-1') {
            val = interpretNumericEntities(val);
        }

        if (part.indexOf('[]=') > -1) {
            val = isArray(val) ? [val] : val;
        }

        if (has.call(obj, key)) {
            obj[key] = utils.combine(obj[key], val);
        } else {
            obj[key] = val;
        }
    }

    return obj;
};

var parseObject = function (chain, val, options, valuesParsed) {
    var leaf = valuesParsed ? val : parseArrayValue(val, options);

    for (var i = chain.length - 1; i >= 0; --i) {
        var obj;
        var root = chain[i];

        if (root === '[]' && options.parseArrays) {
            obj = [].concat(leaf);
        } else {
            obj = options.plainObjects ? Object.create(null) : {};
            var cleanRoot = root.charAt(0) === '[' && root.charAt(root.length - 1) === ']' ? root.slice(1, -1) : root;
            var index = parseInt(cleanRoot, 10);
            if (!options.parseArrays && cleanRoot === '') {
                obj = { 0: leaf };
            } else if (
                !isNaN(index)
                && root !== cleanRoot
                && String(index) === cleanRoot
                && index >= 0
                && (options.parseArrays && index <= options.arrayLimit)
            ) {
                obj = [];
                obj[index] = leaf;
            } else if (cleanRoot !== '__proto__') {
                obj[cleanRoot] = leaf;
            }
        }

        leaf = obj;
    }

    return leaf;
};

var parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {
    if (!givenKey) {
        return;
    }

    // Transform dot notation to bracket notation
    var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, '[$1]') : givenKey;

    // The regex chunks

    var brackets = /(\[[^[\]]*])/;
    var child = /(\[[^[\]]*])/g;

    // Get the parent

    var segment = options.depth > 0 && brackets.exec(key);
    var parent = segment ? key.slice(0, segment.index) : key;

    // Stash the parent if it exists

    var keys = [];
    if (parent) {
        // If we aren't using plain objects, optionally prefix keys that would overwrite object prototype properties
        if (!options.plainObjects && has.call(Object.prototype, parent)) {
            if (!options.allowPrototypes) {
                return;
            }
        }

        keys.push(parent);
    }

    // Loop through children appending to the array until we hit depth

    var i = 0;
    while (options.depth > 0 && (segment = child.exec(key)) !== null && i < options.depth) {
        i += 1;
        if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {
            if (!options.allowPrototypes) {
                return;
            }
        }
        keys.push(segment[1]);
    }

    // If there's a remainder, just add whatever is left

    if (segment) {
        keys.push('[' + key.slice(segment.index) + ']');
    }

    return parseObject(keys, val, options, valuesParsed);
};

var normalizeParseOptions = function normalizeParseOptions(opts) {
    if (!opts) {
        return defaults;
    }

    if (opts.decoder !== null && opts.decoder !== undefined && typeof opts.decoder !== 'function') {
        throw new TypeError('Decoder has to be a function.');
    }

    if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {
        throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');
    }
    var charset = typeof opts.charset === 'undefined' ? defaults.charset : opts.charset;

    return {
        allowDots: typeof opts.allowDots === 'undefined' ? defaults.allowDots : !!opts.allowDots,
        allowPrototypes: typeof opts.allowPrototypes === 'boolean' ? opts.allowPrototypes : defaults.allowPrototypes,
        allowSparse: typeof opts.allowSparse === 'boolean' ? opts.allowSparse : defaults.allowSparse,
        arrayLimit: typeof opts.arrayLimit === 'number' ? opts.arrayLimit : defaults.arrayLimit,
        charset: charset,
        charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,
        comma: typeof opts.comma === 'boolean' ? opts.comma : defaults.comma,
        decoder: typeof opts.decoder === 'function' ? opts.decoder : defaults.decoder,
        delimiter: typeof opts.delimiter === 'string' || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,
        // eslint-disable-next-line no-implicit-coercion, no-extra-parens
        depth: (typeof opts.depth === 'number' || opts.depth === false) ? +opts.depth : defaults.depth,
        ignoreQueryPrefix: opts.ignoreQueryPrefix === true,
        interpretNumericEntities: typeof opts.interpretNumericEntities === 'boolean' ? opts.interpretNumericEntities : defaults.interpretNumericEntities,
        parameterLimit: typeof opts.parameterLimit === 'number' ? opts.parameterLimit : defaults.parameterLimit,
        parseArrays: opts.parseArrays !== false,
        plainObjects: typeof opts.plainObjects === 'boolean' ? opts.plainObjects : defaults.plainObjects,
        strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling
    };
};

module.exports = function (str, opts) {
    var options = normalizeParseOptions(opts);

    if (str === '' || str === null || typeof str === 'undefined') {
        return options.plainObjects ? Object.create(null) : {};
    }

    var tempObj = typeof str === 'string' ? parseValues(str, options) : str;
    var obj = options.plainObjects ? Object.create(null) : {};

    // Iterate over the keys and setup the new object

    var keys = Object.keys(tempObj);
    for (var i = 0; i < keys.length; ++i) {
        var key = keys[i];
        var newObj = parseKeys(key, tempObj[key], options, typeof str === 'string');
        obj = utils.merge(obj, newObj, options);
    }

    if (options.allowSparse === true) {
        return obj;
    }

    return utils.compact(obj);
};


/***/ }),

/***/ "./node_modules/qs/lib/stringify.js":
/*!******************************************!*\
  !*** ./node_modules/qs/lib/stringify.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var getSideChannel = __webpack_require__(/*! side-channel */ "./node_modules/side-channel/index.js");
var utils = __webpack_require__(/*! ./utils */ "./node_modules/qs/lib/utils.js");
var formats = __webpack_require__(/*! ./formats */ "./node_modules/qs/lib/formats.js");
var has = Object.prototype.hasOwnProperty;

var arrayPrefixGenerators = {
    brackets: function brackets(prefix) {
        return prefix + '[]';
    },
    comma: 'comma',
    indices: function indices(prefix, key) {
        return prefix + '[' + key + ']';
    },
    repeat: function repeat(prefix) {
        return prefix;
    }
};

var isArray = Array.isArray;
var split = String.prototype.split;
var push = Array.prototype.push;
var pushToArray = function (arr, valueOrArray) {
    push.apply(arr, isArray(valueOrArray) ? valueOrArray : [valueOrArray]);
};

var toISO = Date.prototype.toISOString;

var defaultFormat = formats['default'];
var defaults = {
    addQueryPrefix: false,
    allowDots: false,
    charset: 'utf-8',
    charsetSentinel: false,
    delimiter: '&',
    encode: true,
    encoder: utils.encode,
    encodeValuesOnly: false,
    format: defaultFormat,
    formatter: formats.formatters[defaultFormat],
    // deprecated
    indices: false,
    serializeDate: function serializeDate(date) {
        return toISO.call(date);
    },
    skipNulls: false,
    strictNullHandling: false
};

var isNonNullishPrimitive = function isNonNullishPrimitive(v) {
    return typeof v === 'string'
        || typeof v === 'number'
        || typeof v === 'boolean'
        || typeof v === 'symbol'
        || typeof v === 'bigint';
};

var sentinel = {};

var stringify = function stringify(
    object,
    prefix,
    generateArrayPrefix,
    commaRoundTrip,
    strictNullHandling,
    skipNulls,
    encoder,
    filter,
    sort,
    allowDots,
    serializeDate,
    format,
    formatter,
    encodeValuesOnly,
    charset,
    sideChannel
) {
    var obj = object;

    var tmpSc = sideChannel;
    var step = 0;
    var findFlag = false;
    while ((tmpSc = tmpSc.get(sentinel)) !== void undefined && !findFlag) {
        // Where object last appeared in the ref tree
        var pos = tmpSc.get(object);
        step += 1;
        if (typeof pos !== 'undefined') {
            if (pos === step) {
                throw new RangeError('Cyclic object value');
            } else {
                findFlag = true; // Break while
            }
        }
        if (typeof tmpSc.get(sentinel) === 'undefined') {
            step = 0;
        }
    }

    if (typeof filter === 'function') {
        obj = filter(prefix, obj);
    } else if (obj instanceof Date) {
        obj = serializeDate(obj);
    } else if (generateArrayPrefix === 'comma' && isArray(obj)) {
        obj = utils.maybeMap(obj, function (value) {
            if (value instanceof Date) {
                return serializeDate(value);
            }
            return value;
        });
    }

    if (obj === null) {
        if (strictNullHandling) {
            return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset, 'key', format) : prefix;
        }

        obj = '';
    }

    if (isNonNullishPrimitive(obj) || utils.isBuffer(obj)) {
        if (encoder) {
            var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset, 'key', format);
            if (generateArrayPrefix === 'comma' && encodeValuesOnly) {
                var valuesArray = split.call(String(obj), ',');
                var valuesJoined = '';
                for (var i = 0; i < valuesArray.length; ++i) {
                    valuesJoined += (i === 0 ? '' : ',') + formatter(encoder(valuesArray[i], defaults.encoder, charset, 'value', format));
                }
                return [formatter(keyValue) + (commaRoundTrip && isArray(obj) && valuesArray.length === 1 ? '[]' : '') + '=' + valuesJoined];
            }
            return [formatter(keyValue) + '=' + formatter(encoder(obj, defaults.encoder, charset, 'value', format))];
        }
        return [formatter(prefix) + '=' + formatter(String(obj))];
    }

    var values = [];

    if (typeof obj === 'undefined') {
        return values;
    }

    var objKeys;
    if (generateArrayPrefix === 'comma' && isArray(obj)) {
        // we need to join elements in
        objKeys = [{ value: obj.length > 0 ? obj.join(',') || null : void undefined }];
    } else if (isArray(filter)) {
        objKeys = filter;
    } else {
        var keys = Object.keys(obj);
        objKeys = sort ? keys.sort(sort) : keys;
    }

    var adjustedPrefix = commaRoundTrip && isArray(obj) && obj.length === 1 ? prefix + '[]' : prefix;

    for (var j = 0; j < objKeys.length; ++j) {
        var key = objKeys[j];
        var value = typeof key === 'object' && typeof key.value !== 'undefined' ? key.value : obj[key];

        if (skipNulls && value === null) {
            continue;
        }

        var keyPrefix = isArray(obj)
            ? typeof generateArrayPrefix === 'function' ? generateArrayPrefix(adjustedPrefix, key) : adjustedPrefix
            : adjustedPrefix + (allowDots ? '.' + key : '[' + key + ']');

        sideChannel.set(object, step);
        var valueSideChannel = getSideChannel();
        valueSideChannel.set(sentinel, sideChannel);
        pushToArray(values, stringify(
            value,
            keyPrefix,
            generateArrayPrefix,
            commaRoundTrip,
            strictNullHandling,
            skipNulls,
            encoder,
            filter,
            sort,
            allowDots,
            serializeDate,
            format,
            formatter,
            encodeValuesOnly,
            charset,
            valueSideChannel
        ));
    }

    return values;
};

var normalizeStringifyOptions = function normalizeStringifyOptions(opts) {
    if (!opts) {
        return defaults;
    }

    if (opts.encoder !== null && typeof opts.encoder !== 'undefined' && typeof opts.encoder !== 'function') {
        throw new TypeError('Encoder has to be a function.');
    }

    var charset = opts.charset || defaults.charset;
    if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {
        throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');
    }

    var format = formats['default'];
    if (typeof opts.format !== 'undefined') {
        if (!has.call(formats.formatters, opts.format)) {
            throw new TypeError('Unknown format option provided.');
        }
        format = opts.format;
    }
    var formatter = formats.formatters[format];

    var filter = defaults.filter;
    if (typeof opts.filter === 'function' || isArray(opts.filter)) {
        filter = opts.filter;
    }

    return {
        addQueryPrefix: typeof opts.addQueryPrefix === 'boolean' ? opts.addQueryPrefix : defaults.addQueryPrefix,
        allowDots: typeof opts.allowDots === 'undefined' ? defaults.allowDots : !!opts.allowDots,
        charset: charset,
        charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,
        delimiter: typeof opts.delimiter === 'undefined' ? defaults.delimiter : opts.delimiter,
        encode: typeof opts.encode === 'boolean' ? opts.encode : defaults.encode,
        encoder: typeof opts.encoder === 'function' ? opts.encoder : defaults.encoder,
        encodeValuesOnly: typeof opts.encodeValuesOnly === 'boolean' ? opts.encodeValuesOnly : defaults.encodeValuesOnly,
        filter: filter,
        format: format,
        formatter: formatter,
        serializeDate: typeof opts.serializeDate === 'function' ? opts.serializeDate : defaults.serializeDate,
        skipNulls: typeof opts.skipNulls === 'boolean' ? opts.skipNulls : defaults.skipNulls,
        sort: typeof opts.sort === 'function' ? opts.sort : null,
        strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling
    };
};

module.exports = function (object, opts) {
    var obj = object;
    var options = normalizeStringifyOptions(opts);

    var objKeys;
    var filter;

    if (typeof options.filter === 'function') {
        filter = options.filter;
        obj = filter('', obj);
    } else if (isArray(options.filter)) {
        filter = options.filter;
        objKeys = filter;
    }

    var keys = [];

    if (typeof obj !== 'object' || obj === null) {
        return '';
    }

    var arrayFormat;
    if (opts && opts.arrayFormat in arrayPrefixGenerators) {
        arrayFormat = opts.arrayFormat;
    } else if (opts && 'indices' in opts) {
        arrayFormat = opts.indices ? 'indices' : 'repeat';
    } else {
        arrayFormat = 'indices';
    }

    var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];
    if (opts && 'commaRoundTrip' in opts && typeof opts.commaRoundTrip !== 'boolean') {
        throw new TypeError('`commaRoundTrip` must be a boolean, or absent');
    }
    var commaRoundTrip = generateArrayPrefix === 'comma' && opts && opts.commaRoundTrip;

    if (!objKeys) {
        objKeys = Object.keys(obj);
    }

    if (options.sort) {
        objKeys.sort(options.sort);
    }

    var sideChannel = getSideChannel();
    for (var i = 0; i < objKeys.length; ++i) {
        var key = objKeys[i];

        if (options.skipNulls && obj[key] === null) {
            continue;
        }
        pushToArray(keys, stringify(
            obj[key],
            key,
            generateArrayPrefix,
            commaRoundTrip,
            options.strictNullHandling,
            options.skipNulls,
            options.encode ? options.encoder : null,
            options.filter,
            options.sort,
            options.allowDots,
            options.serializeDate,
            options.format,
            options.formatter,
            options.encodeValuesOnly,
            options.charset,
            sideChannel
        ));
    }

    var joined = keys.join(options.delimiter);
    var prefix = options.addQueryPrefix === true ? '?' : '';

    if (options.charsetSentinel) {
        if (options.charset === 'iso-8859-1') {
            // encodeURIComponent('&#10003;'), the "numeric entity" representation of a checkmark
            prefix += 'utf8=%26%2310003%3B&';
        } else {
            // encodeURIComponent('✓')
            prefix += 'utf8=%E2%9C%93&';
        }
    }

    return joined.length > 0 ? prefix + joined : '';
};


/***/ }),

/***/ "./node_modules/qs/lib/utils.js":
/*!**************************************!*\
  !*** ./node_modules/qs/lib/utils.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var formats = __webpack_require__(/*! ./formats */ "./node_modules/qs/lib/formats.js");

var has = Object.prototype.hasOwnProperty;
var isArray = Array.isArray;

var hexTable = (function () {
    var array = [];
    for (var i = 0; i < 256; ++i) {
        array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());
    }

    return array;
}());

var compactQueue = function compactQueue(queue) {
    while (queue.length > 1) {
        var item = queue.pop();
        var obj = item.obj[item.prop];

        if (isArray(obj)) {
            var compacted = [];

            for (var j = 0; j < obj.length; ++j) {
                if (typeof obj[j] !== 'undefined') {
                    compacted.push(obj[j]);
                }
            }

            item.obj[item.prop] = compacted;
        }
    }
};

var arrayToObject = function arrayToObject(source, options) {
    var obj = options && options.plainObjects ? Object.create(null) : {};
    for (var i = 0; i < source.length; ++i) {
        if (typeof source[i] !== 'undefined') {
            obj[i] = source[i];
        }
    }

    return obj;
};

var merge = function merge(target, source, options) {
    /* eslint no-param-reassign: 0 */
    if (!source) {
        return target;
    }

    if (typeof source !== 'object') {
        if (isArray(target)) {
            target.push(source);
        } else if (target && typeof target === 'object') {
            if ((options && (options.plainObjects || options.allowPrototypes)) || !has.call(Object.prototype, source)) {
                target[source] = true;
            }
        } else {
            return [target, source];
        }

        return target;
    }

    if (!target || typeof target !== 'object') {
        return [target].concat(source);
    }

    var mergeTarget = target;
    if (isArray(target) && !isArray(source)) {
        mergeTarget = arrayToObject(target, options);
    }

    if (isArray(target) && isArray(source)) {
        source.forEach(function (item, i) {
            if (has.call(target, i)) {
                var targetItem = target[i];
                if (targetItem && typeof targetItem === 'object' && item && typeof item === 'object') {
                    target[i] = merge(targetItem, item, options);
                } else {
                    target.push(item);
                }
            } else {
                target[i] = item;
            }
        });
        return target;
    }

    return Object.keys(source).reduce(function (acc, key) {
        var value = source[key];

        if (has.call(acc, key)) {
            acc[key] = merge(acc[key], value, options);
        } else {
            acc[key] = value;
        }
        return acc;
    }, mergeTarget);
};

var assign = function assignSingleSource(target, source) {
    return Object.keys(source).reduce(function (acc, key) {
        acc[key] = source[key];
        return acc;
    }, target);
};

var decode = function (str, decoder, charset) {
    var strWithoutPlus = str.replace(/\+/g, ' ');
    if (charset === 'iso-8859-1') {
        // unescape never throws, no try...catch needed:
        return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);
    }
    // utf-8
    try {
        return decodeURIComponent(strWithoutPlus);
    } catch (e) {
        return strWithoutPlus;
    }
};

var encode = function encode(str, defaultEncoder, charset, kind, format) {
    // This code was originally written by Brian White (mscdex) for the io.js core querystring library.
    // It has been adapted here for stricter adherence to RFC 3986
    if (str.length === 0) {
        return str;
    }

    var string = str;
    if (typeof str === 'symbol') {
        string = Symbol.prototype.toString.call(str);
    } else if (typeof str !== 'string') {
        string = String(str);
    }

    if (charset === 'iso-8859-1') {
        return escape(string).replace(/%u[0-9a-f]{4}/gi, function ($0) {
            return '%26%23' + parseInt($0.slice(2), 16) + '%3B';
        });
    }

    var out = '';
    for (var i = 0; i < string.length; ++i) {
        var c = string.charCodeAt(i);

        if (
            c === 0x2D // -
            || c === 0x2E // .
            || c === 0x5F // _
            || c === 0x7E // ~
            || (c >= 0x30 && c <= 0x39) // 0-9
            || (c >= 0x41 && c <= 0x5A) // a-z
            || (c >= 0x61 && c <= 0x7A) // A-Z
            || (format === formats.RFC1738 && (c === 0x28 || c === 0x29)) // ( )
        ) {
            out += string.charAt(i);
            continue;
        }

        if (c < 0x80) {
            out = out + hexTable[c];
            continue;
        }

        if (c < 0x800) {
            out = out + (hexTable[0xC0 | (c >> 6)] + hexTable[0x80 | (c & 0x3F)]);
            continue;
        }

        if (c < 0xD800 || c >= 0xE000) {
            out = out + (hexTable[0xE0 | (c >> 12)] + hexTable[0x80 | ((c >> 6) & 0x3F)] + hexTable[0x80 | (c & 0x3F)]);
            continue;
        }

        i += 1;
        c = 0x10000 + (((c & 0x3FF) << 10) | (string.charCodeAt(i) & 0x3FF));
        /* eslint operator-linebreak: [2, "before"] */
        out += hexTable[0xF0 | (c >> 18)]
            + hexTable[0x80 | ((c >> 12) & 0x3F)]
            + hexTable[0x80 | ((c >> 6) & 0x3F)]
            + hexTable[0x80 | (c & 0x3F)];
    }

    return out;
};

var compact = function compact(value) {
    var queue = [{ obj: { o: value }, prop: 'o' }];
    var refs = [];

    for (var i = 0; i < queue.length; ++i) {
        var item = queue[i];
        var obj = item.obj[item.prop];

        var keys = Object.keys(obj);
        for (var j = 0; j < keys.length; ++j) {
            var key = keys[j];
            var val = obj[key];
            if (typeof val === 'object' && val !== null && refs.indexOf(val) === -1) {
                queue.push({ obj: obj, prop: key });
                refs.push(val);
            }
        }
    }

    compactQueue(queue);

    return value;
};

var isRegExp = function isRegExp(obj) {
    return Object.prototype.toString.call(obj) === '[object RegExp]';
};

var isBuffer = function isBuffer(obj) {
    if (!obj || typeof obj !== 'object') {
        return false;
    }

    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
};

var combine = function combine(a, b) {
    return [].concat(a, b);
};

var maybeMap = function maybeMap(val, fn) {
    if (isArray(val)) {
        var mapped = [];
        for (var i = 0; i < val.length; i += 1) {
            mapped.push(fn(val[i]));
        }
        return mapped;
    }
    return fn(val);
};

module.exports = {
    arrayToObject: arrayToObject,
    assign: assign,
    combine: combine,
    compact: compact,
    decode: decode,
    encode: encode,
    isBuffer: isBuffer,
    isRegExp: isRegExp,
    maybeMap: maybeMap,
    merge: merge
};


/***/ }),

/***/ "./node_modules/side-channel/index.js":
/*!********************************************!*\
  !*** ./node_modules/side-channel/index.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var GetIntrinsic = __webpack_require__(/*! get-intrinsic */ "./node_modules/get-intrinsic/index.js");
var callBound = __webpack_require__(/*! call-bind/callBound */ "./node_modules/call-bind/callBound.js");
var inspect = __webpack_require__(/*! object-inspect */ "./node_modules/object-inspect/index.js");

var $TypeError = GetIntrinsic('%TypeError%');
var $WeakMap = GetIntrinsic('%WeakMap%', true);
var $Map = GetIntrinsic('%Map%', true);

var $weakMapGet = callBound('WeakMap.prototype.get', true);
var $weakMapSet = callBound('WeakMap.prototype.set', true);
var $weakMapHas = callBound('WeakMap.prototype.has', true);
var $mapGet = callBound('Map.prototype.get', true);
var $mapSet = callBound('Map.prototype.set', true);
var $mapHas = callBound('Map.prototype.has', true);

/*
 * This function traverses the list returning the node corresponding to the
 * given key.
 *
 * That node is also moved to the head of the list, so that if it's accessed
 * again we don't need to traverse the whole list. By doing so, all the recently
 * used nodes can be accessed relatively quickly.
 */
var listGetNode = function (list, key) { // eslint-disable-line consistent-return
	for (var prev = list, curr; (curr = prev.next) !== null; prev = curr) {
		if (curr.key === key) {
			prev.next = curr.next;
			curr.next = list.next;
			list.next = curr; // eslint-disable-line no-param-reassign
			return curr;
		}
	}
};

var listGet = function (objects, key) {
	var node = listGetNode(objects, key);
	return node && node.value;
};
var listSet = function (objects, key, value) {
	var node = listGetNode(objects, key);
	if (node) {
		node.value = value;
	} else {
		// Prepend the new node to the beginning of the list
		objects.next = { // eslint-disable-line no-param-reassign
			key: key,
			next: objects.next,
			value: value
		};
	}
};
var listHas = function (objects, key) {
	return !!listGetNode(objects, key);
};

module.exports = function getSideChannel() {
	var $wm;
	var $m;
	var $o;
	var channel = {
		assert: function (key) {
			if (!channel.has(key)) {
				throw new $TypeError('Side channel does not contain ' + inspect(key));
			}
		},
		get: function (key) { // eslint-disable-line consistent-return
			if ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {
				if ($wm) {
					return $weakMapGet($wm, key);
				}
			} else if ($Map) {
				if ($m) {
					return $mapGet($m, key);
				}
			} else {
				if ($o) { // eslint-disable-line no-lonely-if
					return listGet($o, key);
				}
			}
		},
		has: function (key) {
			if ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {
				if ($wm) {
					return $weakMapHas($wm, key);
				}
			} else if ($Map) {
				if ($m) {
					return $mapHas($m, key);
				}
			} else {
				if ($o) { // eslint-disable-line no-lonely-if
					return listHas($o, key);
				}
			}
			return false;
		},
		set: function (key, value) {
			if ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {
				if (!$wm) {
					$wm = new $WeakMap();
				}
				$weakMapSet($wm, key, value);
			} else if ($Map) {
				if (!$m) {
					$m = new $Map();
				}
				$mapSet($m, key, value);
			} else {
				if (!$o) {
					/*
					 * Initialize the linked list as an empty node, so that we don't have
					 * to special-case handling of the first node: we can always refer to
					 * it as (previous node).next, instead of something like (list).head
					 */
					$o = { key: {}, next: null };
				}
				listSet($o, key, value);
			}
		}
	};
	return channel;
};


/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NIL": () => (/* reexport safe */ _nil_js__WEBPACK_IMPORTED_MODULE_4__["default"]),
/* harmony export */   "parse": () => (/* reexport safe */ _parse_js__WEBPACK_IMPORTED_MODULE_8__["default"]),
/* harmony export */   "stringify": () => (/* reexport safe */ _stringify_js__WEBPACK_IMPORTED_MODULE_7__["default"]),
/* harmony export */   "v1": () => (/* reexport safe */ _v1_js__WEBPACK_IMPORTED_MODULE_0__["default"]),
/* harmony export */   "v3": () => (/* reexport safe */ _v3_js__WEBPACK_IMPORTED_MODULE_1__["default"]),
/* harmony export */   "v4": () => (/* reexport safe */ _v4_js__WEBPACK_IMPORTED_MODULE_2__["default"]),
/* harmony export */   "v5": () => (/* reexport safe */ _v5_js__WEBPACK_IMPORTED_MODULE_3__["default"]),
/* harmony export */   "validate": () => (/* reexport safe */ _validate_js__WEBPACK_IMPORTED_MODULE_6__["default"]),
/* harmony export */   "version": () => (/* reexport safe */ _version_js__WEBPACK_IMPORTED_MODULE_5__["default"])
/* harmony export */ });
/* harmony import */ var _v1_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./v1.js */ "./node_modules/uuid/dist/esm-browser/v1.js");
/* harmony import */ var _v3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./v3.js */ "./node_modules/uuid/dist/esm-browser/v3.js");
/* harmony import */ var _v4_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./v4.js */ "./node_modules/uuid/dist/esm-browser/v4.js");
/* harmony import */ var _v5_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./v5.js */ "./node_modules/uuid/dist/esm-browser/v5.js");
/* harmony import */ var _nil_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./nil.js */ "./node_modules/uuid/dist/esm-browser/nil.js");
/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./version.js */ "./node_modules/uuid/dist/esm-browser/version.js");
/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./validate.js */ "./node_modules/uuid/dist/esm-browser/validate.js");
/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./stringify.js */ "./node_modules/uuid/dist/esm-browser/stringify.js");
/* harmony import */ var _parse_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./parse.js */ "./node_modules/uuid/dist/esm-browser/parse.js");










/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/md5.js":
/*!***************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/md5.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/*
 * Browser-compatible JavaScript MD5
 *
 * Modification of JavaScript MD5
 * https://github.com/blueimp/JavaScript-MD5
 *
 * Copyright 2011, Sebastian Tschan
 * https://blueimp.net
 *
 * Licensed under the MIT license:
 * https://opensource.org/licenses/MIT
 *
 * Based on
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */
function md5(bytes) {
  if (typeof bytes === 'string') {
    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

    bytes = new Uint8Array(msg.length);

    for (var i = 0; i < msg.length; ++i) {
      bytes[i] = msg.charCodeAt(i);
    }
  }

  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
}
/*
 * Convert an array of little-endian words to an array of bytes
 */


function md5ToHexEncodedArray(input) {
  var output = [];
  var length32 = input.length * 32;
  var hexTab = '0123456789abcdef';

  for (var i = 0; i < length32; i += 8) {
    var x = input[i >> 5] >>> i % 32 & 0xff;
    var hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);
    output.push(hex);
  }

  return output;
}
/**
 * Calculate output length with padding and bit length
 */


function getOutputLength(inputLength8) {
  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
}
/*
 * Calculate the MD5 of an array of little-endian words, and a bit length.
 */


function wordsToMd5(x, len) {
  /* append padding */
  x[len >> 5] |= 0x80 << len % 32;
  x[getOutputLength(len) - 1] = len;
  var a = 1732584193;
  var b = -271733879;
  var c = -1732584194;
  var d = 271733878;

  for (var i = 0; i < x.length; i += 16) {
    var olda = a;
    var oldb = b;
    var oldc = c;
    var oldd = d;
    a = md5ff(a, b, c, d, x[i], 7, -680876936);
    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
    b = md5gg(b, c, d, a, x[i], 20, -373897302);
    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
    d = md5hh(d, a, b, c, x[i], 11, -358537222);
    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
    a = md5ii(a, b, c, d, x[i], 6, -198630844);
    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
    a = safeAdd(a, olda);
    b = safeAdd(b, oldb);
    c = safeAdd(c, oldc);
    d = safeAdd(d, oldd);
  }

  return [a, b, c, d];
}
/*
 * Convert an array bytes to an array of little-endian words
 * Characters >255 have their high-byte silently ignored.
 */


function bytesToWords(input) {
  if (input.length === 0) {
    return [];
  }

  var length8 = input.length * 8;
  var output = new Uint32Array(getOutputLength(length8));

  for (var i = 0; i < length8; i += 8) {
    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;
  }

  return output;
}
/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */


function safeAdd(x, y) {
  var lsw = (x & 0xffff) + (y & 0xffff);
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 0xffff;
}
/*
 * Bitwise rotate a 32-bit number to the left.
 */


function bitRotateLeft(num, cnt) {
  return num << cnt | num >>> 32 - cnt;
}
/*
 * These functions implement the four basic operations the algorithm uses.
 */


function md5cmn(q, a, b, x, s, t) {
  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
}

function md5ff(a, b, c, d, x, s, t) {
  return md5cmn(b & c | ~b & d, a, b, x, s, t);
}

function md5gg(a, b, c, d, x, s, t) {
  return md5cmn(b & d | c & ~d, a, b, x, s, t);
}

function md5hh(a, b, c, d, x, s, t) {
  return md5cmn(b ^ c ^ d, a, b, x, s, t);
}

function md5ii(a, b, c, d, x, s, t) {
  return md5cmn(c ^ (b | ~d), a, b, x, s, t);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (md5);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/nil.js":
/*!***************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/nil.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ('00000000-0000-0000-0000-000000000000');

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/parse.js":
/*!*****************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/parse.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ "./node_modules/uuid/dist/esm-browser/validate.js");


function parse(uuid) {
  if (!(0,_validate_js__WEBPACK_IMPORTED_MODULE_0__["default"])(uuid)) {
    throw TypeError('Invalid UUID');
  }

  var v;
  var arr = new Uint8Array(16); // Parse ########-....-....-....-............

  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 0xff;
  arr[2] = v >>> 8 & 0xff;
  arr[3] = v & 0xff; // Parse ........-####-....-....-............

  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 0xff; // Parse ........-....-####-....-............

  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 0xff; // Parse ........-....-....-####-............

  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 0xff; // Parse ........-....-....-....-############
  // (Use "/" to avoid 32-bit truncation when bit-shifting high-order bytes)

  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;
  arr[11] = v / 0x100000000 & 0xff;
  arr[12] = v >>> 24 & 0xff;
  arr[13] = v >>> 16 & 0xff;
  arr[14] = v >>> 8 & 0xff;
  arr[15] = v & 0xff;
  return arr;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (parse);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/sha1.js":
/*!****************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/sha1.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Adapted from Chris Veness' SHA1 code at
// http://www.movable-type.co.uk/scripts/sha1.html
function f(s, x, y, z) {
  switch (s) {
    case 0:
      return x & y ^ ~x & z;

    case 1:
      return x ^ y ^ z;

    case 2:
      return x & y ^ x & z ^ y & z;

    case 3:
      return x ^ y ^ z;
  }
}

function ROTL(x, n) {
  return x << n | x >>> 32 - n;
}

function sha1(bytes) {
  var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];
  var H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];

  if (typeof bytes === 'string') {
    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

    bytes = [];

    for (var i = 0; i < msg.length; ++i) {
      bytes.push(msg.charCodeAt(i));
    }
  } else if (!Array.isArray(bytes)) {
    // Convert Array-like to Array
    bytes = Array.prototype.slice.call(bytes);
  }

  bytes.push(0x80);
  var l = bytes.length / 4 + 2;
  var N = Math.ceil(l / 16);
  var M = new Array(N);

  for (var _i = 0; _i < N; ++_i) {
    var arr = new Uint32Array(16);

    for (var j = 0; j < 16; ++j) {
      arr[j] = bytes[_i * 64 + j * 4] << 24 | bytes[_i * 64 + j * 4 + 1] << 16 | bytes[_i * 64 + j * 4 + 2] << 8 | bytes[_i * 64 + j * 4 + 3];
    }

    M[_i] = arr;
  }

  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
  M[N - 1][14] = Math.floor(M[N - 1][14]);
  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;

  for (var _i2 = 0; _i2 < N; ++_i2) {
    var W = new Uint32Array(80);

    for (var t = 0; t < 16; ++t) {
      W[t] = M[_i2][t];
    }

    for (var _t = 16; _t < 80; ++_t) {
      W[_t] = ROTL(W[_t - 3] ^ W[_t - 8] ^ W[_t - 14] ^ W[_t - 16], 1);
    }

    var a = H[0];
    var b = H[1];
    var c = H[2];
    var d = H[3];
    var e = H[4];

    for (var _t2 = 0; _t2 < 80; ++_t2) {
      var s = Math.floor(_t2 / 20);
      var T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[_t2] >>> 0;
      e = d;
      d = c;
      c = ROTL(b, 30) >>> 0;
      b = a;
      a = T;
    }

    H[0] = H[0] + a >>> 0;
    H[1] = H[1] + b >>> 0;
    H[2] = H[2] + c >>> 0;
    H[3] = H[3] + d >>> 0;
    H[4] = H[4] + e >>> 0;
  }

  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (sha1);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/v1.js":
/*!**************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/v1.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _rng_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rng.js */ "./node_modules/uuid/dist/esm-browser/rng.js");
/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringify.js */ "./node_modules/uuid/dist/esm-browser/stringify.js");

 // **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html

var _nodeId;

var _clockseq; // Previous uuid creation time


var _lastMSecs = 0;
var _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details

function v1(options, buf, offset) {
  var i = buf && offset || 0;
  var b = buf || new Array(16);
  options = options || {};
  var node = options.node || _nodeId;
  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not
  // specified.  We do this lazily to minimize issues related to insufficient
  // system entropy.  See #189

  if (node == null || clockseq == null) {
    var seedBytes = options.random || (options.rng || _rng_js__WEBPACK_IMPORTED_MODULE_0__["default"])();

    if (node == null) {
      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }

    if (clockseq == null) {
      // Per 4.2.2, randomize (14 bit) clockseq
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
    }
  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,
  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.


  var msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock
  // cycle to simulate higher resolution clock

  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)

  var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression

  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
  // time interval


  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  } // Per 4.2.1.2 Throw error if too many uuids are requested


  if (nsecs >= 10000) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }

  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch

  msecs += 12219292800000; // `time_low`

  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff; // `time_mid`

  var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff; // `time_high_and_version`

  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version

  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)

  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`

  b[i++] = clockseq & 0xff; // `node`

  for (var n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }

  return buf || (0,_stringify_js__WEBPACK_IMPORTED_MODULE_1__["default"])(b);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v1);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/v3.js":
/*!**************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/v3.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _v35_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./v35.js */ "./node_modules/uuid/dist/esm-browser/v35.js");
/* harmony import */ var _md5_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./md5.js */ "./node_modules/uuid/dist/esm-browser/md5.js");


var v3 = (0,_v35_js__WEBPACK_IMPORTED_MODULE_0__["default"])('v3', 0x30, _md5_js__WEBPACK_IMPORTED_MODULE_1__["default"]);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v3);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/v35.js":
/*!***************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/v35.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DNS": () => (/* binding */ DNS),
/* harmony export */   "URL": () => (/* binding */ URL),
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringify.js */ "./node_modules/uuid/dist/esm-browser/stringify.js");
/* harmony import */ var _parse_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parse.js */ "./node_modules/uuid/dist/esm-browser/parse.js");



function stringToBytes(str) {
  str = unescape(encodeURIComponent(str)); // UTF8 escape

  var bytes = [];

  for (var i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }

  return bytes;
}

var DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
var URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(name, version, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    if (typeof value === 'string') {
      value = stringToBytes(value);
    }

    if (typeof namespace === 'string') {
      namespace = (0,_parse_js__WEBPACK_IMPORTED_MODULE_0__["default"])(namespace);
    }

    if (namespace.length !== 16) {
      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
    } // Compute hash of namespace and value, Per 4.3
    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =
    // hashfunc([...namespace, ... value])`


    var bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 0x0f | version;
    bytes[8] = bytes[8] & 0x3f | 0x80;

    if (buf) {
      offset = offset || 0;

      for (var i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }

      return buf;
    }

    return (0,_stringify_js__WEBPACK_IMPORTED_MODULE_1__["default"])(bytes);
  } // Function#name is not settable on some platforms (#270)


  try {
    generateUUID.name = name; // eslint-disable-next-line no-empty
  } catch (err) {} // For CommonJS default export support


  generateUUID.DNS = DNS;
  generateUUID.URL = URL;
  return generateUUID;
}

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/v5.js":
/*!**************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/v5.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _v35_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./v35.js */ "./node_modules/uuid/dist/esm-browser/v35.js");
/* harmony import */ var _sha1_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sha1.js */ "./node_modules/uuid/dist/esm-browser/sha1.js");


var v5 = (0,_v35_js__WEBPACK_IMPORTED_MODULE_0__["default"])('v5', 0x50, _sha1_js__WEBPACK_IMPORTED_MODULE_1__["default"]);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v5);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/version.js":
/*!*******************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/version.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ "./node_modules/uuid/dist/esm-browser/validate.js");


function version(uuid) {
  if (!(0,_validate_js__WEBPACK_IMPORTED_MODULE_0__["default"])(uuid)) {
    throw TypeError('Invalid UUID');
  }

  return parseInt(uuid.substr(14, 1), 16);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (version);

/***/ }),

/***/ "./node_modules/ws/browser.js":
/*!************************************!*\
  !*** ./node_modules/ws/browser.js ***!
  \************************************/
/***/ ((module) => {

"use strict";


module.exports = function () {
  throw new Error(
    'ws does not work in the browser. Browser clients must use the native ' +
      'WebSocket object'
  );
};


/***/ }),

/***/ "?2128":
/*!********************************!*\
  !*** ./util.inspect (ignored) ***!
  \********************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "./node_modules/zod/lib/index.mjs":
/*!****************************************!*\
  !*** ./node_modules/zod/lib/index.mjs ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DIRTY": () => (/* binding */ DIRTY),
/* harmony export */   "EMPTY_PATH": () => (/* binding */ EMPTY_PATH),
/* harmony export */   "INVALID": () => (/* binding */ INVALID),
/* harmony export */   "OK": () => (/* binding */ OK),
/* harmony export */   "ParseStatus": () => (/* binding */ ParseStatus),
/* harmony export */   "Schema": () => (/* binding */ ZodType),
/* harmony export */   "ZodAny": () => (/* binding */ ZodAny),
/* harmony export */   "ZodArray": () => (/* binding */ ZodArray),
/* harmony export */   "ZodBigInt": () => (/* binding */ ZodBigInt),
/* harmony export */   "ZodBoolean": () => (/* binding */ ZodBoolean),
/* harmony export */   "ZodDate": () => (/* binding */ ZodDate),
/* harmony export */   "ZodDefault": () => (/* binding */ ZodDefault),
/* harmony export */   "ZodDiscriminatedUnion": () => (/* binding */ ZodDiscriminatedUnion),
/* harmony export */   "ZodEffects": () => (/* binding */ ZodEffects),
/* harmony export */   "ZodEnum": () => (/* binding */ ZodEnum),
/* harmony export */   "ZodError": () => (/* binding */ ZodError),
/* harmony export */   "ZodFirstPartyTypeKind": () => (/* binding */ ZodFirstPartyTypeKind),
/* harmony export */   "ZodFunction": () => (/* binding */ ZodFunction),
/* harmony export */   "ZodIntersection": () => (/* binding */ ZodIntersection),
/* harmony export */   "ZodIssueCode": () => (/* binding */ ZodIssueCode),
/* harmony export */   "ZodLazy": () => (/* binding */ ZodLazy),
/* harmony export */   "ZodLiteral": () => (/* binding */ ZodLiteral),
/* harmony export */   "ZodMap": () => (/* binding */ ZodMap),
/* harmony export */   "ZodNaN": () => (/* binding */ ZodNaN),
/* harmony export */   "ZodNativeEnum": () => (/* binding */ ZodNativeEnum),
/* harmony export */   "ZodNever": () => (/* binding */ ZodNever),
/* harmony export */   "ZodNull": () => (/* binding */ ZodNull),
/* harmony export */   "ZodNullable": () => (/* binding */ ZodNullable),
/* harmony export */   "ZodNumber": () => (/* binding */ ZodNumber),
/* harmony export */   "ZodObject": () => (/* binding */ ZodObject),
/* harmony export */   "ZodOptional": () => (/* binding */ ZodOptional),
/* harmony export */   "ZodParsedType": () => (/* binding */ ZodParsedType),
/* harmony export */   "ZodPromise": () => (/* binding */ ZodPromise),
/* harmony export */   "ZodRecord": () => (/* binding */ ZodRecord),
/* harmony export */   "ZodSchema": () => (/* binding */ ZodType),
/* harmony export */   "ZodSet": () => (/* binding */ ZodSet),
/* harmony export */   "ZodString": () => (/* binding */ ZodString),
/* harmony export */   "ZodTransformer": () => (/* binding */ ZodEffects),
/* harmony export */   "ZodTuple": () => (/* binding */ ZodTuple),
/* harmony export */   "ZodType": () => (/* binding */ ZodType),
/* harmony export */   "ZodUndefined": () => (/* binding */ ZodUndefined),
/* harmony export */   "ZodUnion": () => (/* binding */ ZodUnion),
/* harmony export */   "ZodUnknown": () => (/* binding */ ZodUnknown),
/* harmony export */   "ZodVoid": () => (/* binding */ ZodVoid),
/* harmony export */   "addIssueToContext": () => (/* binding */ addIssueToContext),
/* harmony export */   "any": () => (/* binding */ anyType),
/* harmony export */   "array": () => (/* binding */ arrayType),
/* harmony export */   "bigint": () => (/* binding */ bigIntType),
/* harmony export */   "boolean": () => (/* binding */ booleanType),
/* harmony export */   "custom": () => (/* binding */ custom),
/* harmony export */   "date": () => (/* binding */ dateType),
/* harmony export */   "default": () => (/* binding */ mod),
/* harmony export */   "defaultErrorMap": () => (/* binding */ defaultErrorMap),
/* harmony export */   "discriminatedUnion": () => (/* binding */ discriminatedUnionType),
/* harmony export */   "effect": () => (/* binding */ effectsType),
/* harmony export */   "enum": () => (/* binding */ enumType),
/* harmony export */   "function": () => (/* binding */ functionType),
/* harmony export */   "getParsedType": () => (/* binding */ getParsedType),
/* harmony export */   "instanceof": () => (/* binding */ instanceOfType),
/* harmony export */   "intersection": () => (/* binding */ intersectionType),
/* harmony export */   "isAborted": () => (/* binding */ isAborted),
/* harmony export */   "isAsync": () => (/* binding */ isAsync),
/* harmony export */   "isDirty": () => (/* binding */ isDirty),
/* harmony export */   "isValid": () => (/* binding */ isValid),
/* harmony export */   "late": () => (/* binding */ late),
/* harmony export */   "lazy": () => (/* binding */ lazyType),
/* harmony export */   "literal": () => (/* binding */ literalType),
/* harmony export */   "makeIssue": () => (/* binding */ makeIssue),
/* harmony export */   "map": () => (/* binding */ mapType),
/* harmony export */   "nan": () => (/* binding */ nanType),
/* harmony export */   "nativeEnum": () => (/* binding */ nativeEnumType),
/* harmony export */   "never": () => (/* binding */ neverType),
/* harmony export */   "null": () => (/* binding */ nullType),
/* harmony export */   "nullable": () => (/* binding */ nullableType),
/* harmony export */   "number": () => (/* binding */ numberType),
/* harmony export */   "object": () => (/* binding */ objectType),
/* harmony export */   "objectUtil": () => (/* binding */ objectUtil),
/* harmony export */   "oboolean": () => (/* binding */ oboolean),
/* harmony export */   "onumber": () => (/* binding */ onumber),
/* harmony export */   "optional": () => (/* binding */ optionalType),
/* harmony export */   "ostring": () => (/* binding */ ostring),
/* harmony export */   "overrideErrorMap": () => (/* binding */ overrideErrorMap),
/* harmony export */   "preprocess": () => (/* binding */ preprocessType),
/* harmony export */   "promise": () => (/* binding */ promiseType),
/* harmony export */   "quotelessJson": () => (/* binding */ quotelessJson),
/* harmony export */   "record": () => (/* binding */ recordType),
/* harmony export */   "set": () => (/* binding */ setType),
/* harmony export */   "setErrorMap": () => (/* binding */ setErrorMap),
/* harmony export */   "strictObject": () => (/* binding */ strictObjectType),
/* harmony export */   "string": () => (/* binding */ stringType),
/* harmony export */   "transformer": () => (/* binding */ effectsType),
/* harmony export */   "tuple": () => (/* binding */ tupleType),
/* harmony export */   "undefined": () => (/* binding */ undefinedType),
/* harmony export */   "union": () => (/* binding */ unionType),
/* harmony export */   "unknown": () => (/* binding */ unknownType),
/* harmony export */   "void": () => (/* binding */ voidType),
/* harmony export */   "z": () => (/* binding */ mod)
/* harmony export */ });
var util;
(function (util) {
    function assertNever(_x) {
        throw new Error();
    }
    util.assertNever = assertNever;
    util.arrayToEnum = (items) => {
        const obj = {};
        for (const item of items) {
            obj[item] = item;
        }
        return obj;
    };
    util.getValidEnumValues = (obj) => {
        const validKeys = util.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== "number");
        const filtered = {};
        for (const k of validKeys) {
            filtered[k] = obj[k];
        }
        return util.objectValues(filtered);
    };
    util.objectValues = (obj) => {
        return util.objectKeys(obj).map(function (e) {
            return obj[e];
        });
    };
    util.objectKeys = typeof Object.keys === "function" // eslint-disable-line ban/ban
        ? (obj) => Object.keys(obj) // eslint-disable-line ban/ban
        : (object) => {
            const keys = [];
            for (const key in object) {
                if (Object.prototype.hasOwnProperty.call(object, key)) {
                    keys.push(key);
                }
            }
            return keys;
        };
    util.find = (arr, checker) => {
        for (const item of arr) {
            if (checker(item))
                return item;
        }
        return undefined;
    };
    util.isInteger = typeof Number.isInteger === "function"
        ? (val) => Number.isInteger(val) // eslint-disable-line ban/ban
        : (val) => typeof val === "number" && isFinite(val) && Math.floor(val) === val;
    function joinValues(array, separator = " | ") {
        return array
            .map((val) => (typeof val === "string" ? `'${val}'` : val))
            .join(separator);
    }
    util.joinValues = joinValues;
})(util || (util = {}));
const ZodParsedType = util.arrayToEnum([
    "string",
    "nan",
    "number",
    "integer",
    "float",
    "boolean",
    "date",
    "bigint",
    "symbol",
    "function",
    "undefined",
    "null",
    "array",
    "object",
    "unknown",
    "promise",
    "void",
    "never",
    "map",
    "set",
]);
const getParsedType = (data) => {
    const t = typeof data;
    switch (t) {
        case "undefined":
            return ZodParsedType.undefined;
        case "string":
            return ZodParsedType.string;
        case "number":
            return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;
        case "boolean":
            return ZodParsedType.boolean;
        case "function":
            return ZodParsedType.function;
        case "bigint":
            return ZodParsedType.bigint;
        case "object":
            if (Array.isArray(data)) {
                return ZodParsedType.array;
            }
            if (data === null) {
                return ZodParsedType.null;
            }
            if (data.then &&
                typeof data.then === "function" &&
                data.catch &&
                typeof data.catch === "function") {
                return ZodParsedType.promise;
            }
            if (typeof Map !== "undefined" && data instanceof Map) {
                return ZodParsedType.map;
            }
            if (typeof Set !== "undefined" && data instanceof Set) {
                return ZodParsedType.set;
            }
            if (typeof Date !== "undefined" && data instanceof Date) {
                return ZodParsedType.date;
            }
            return ZodParsedType.object;
        default:
            return ZodParsedType.unknown;
    }
};

const ZodIssueCode = util.arrayToEnum([
    "invalid_type",
    "invalid_literal",
    "custom",
    "invalid_union",
    "invalid_union_discriminator",
    "invalid_enum_value",
    "unrecognized_keys",
    "invalid_arguments",
    "invalid_return_type",
    "invalid_date",
    "invalid_string",
    "too_small",
    "too_big",
    "invalid_intersection_types",
    "not_multiple_of",
]);
const quotelessJson = (obj) => {
    const json = JSON.stringify(obj, null, 2);
    return json.replace(/"([^"]+)":/g, "$1:");
};
class ZodError extends Error {
    constructor(issues) {
        super();
        this.issues = [];
        this.addIssue = (sub) => {
            this.issues = [...this.issues, sub];
        };
        this.addIssues = (subs = []) => {
            this.issues = [...this.issues, ...subs];
        };
        const actualProto = new.target.prototype;
        if (Object.setPrototypeOf) {
            // eslint-disable-next-line ban/ban
            Object.setPrototypeOf(this, actualProto);
        }
        else {
            this.__proto__ = actualProto;
        }
        this.name = "ZodError";
        this.issues = issues;
    }
    get errors() {
        return this.issues;
    }
    format(_mapper) {
        const mapper = _mapper ||
            function (issue) {
                return issue.message;
            };
        const fieldErrors = { _errors: [] };
        const processError = (error) => {
            for (const issue of error.issues) {
                if (issue.code === "invalid_union") {
                    issue.unionErrors.map(processError);
                }
                else if (issue.code === "invalid_return_type") {
                    processError(issue.returnTypeError);
                }
                else if (issue.code === "invalid_arguments") {
                    processError(issue.argumentsError);
                }
                else if (issue.path.length === 0) {
                    fieldErrors._errors.push(mapper(issue));
                }
                else {
                    let curr = fieldErrors;
                    let i = 0;
                    while (i < issue.path.length) {
                        const el = issue.path[i];
                        const terminal = i === issue.path.length - 1;
                        if (!terminal) {
                            curr[el] = curr[el] || { _errors: [] };
                            // if (typeof el === "string") {
                            //   curr[el] = curr[el] || { _errors: [] };
                            // } else if (typeof el === "number") {
                            //   const errorArray: any = [];
                            //   errorArray._errors = [];
                            //   curr[el] = curr[el] || errorArray;
                            // }
                        }
                        else {
                            curr[el] = curr[el] || { _errors: [] };
                            curr[el]._errors.push(mapper(issue));
                        }
                        curr = curr[el];
                        i++;
                    }
                }
            }
        };
        processError(this);
        return fieldErrors;
    }
    toString() {
        return this.message;
    }
    get message() {
        return JSON.stringify(this.issues, null, 2);
    }
    get isEmpty() {
        return this.issues.length === 0;
    }
    flatten(mapper = (issue) => issue.message) {
        const fieldErrors = {};
        const formErrors = [];
        for (const sub of this.issues) {
            if (sub.path.length > 0) {
                fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
                fieldErrors[sub.path[0]].push(mapper(sub));
            }
            else {
                formErrors.push(mapper(sub));
            }
        }
        return { formErrors, fieldErrors };
    }
    get formErrors() {
        return this.flatten();
    }
}
ZodError.create = (issues) => {
    const error = new ZodError(issues);
    return error;
};
const defaultErrorMap = (issue, _ctx) => {
    let message;
    switch (issue.code) {
        case ZodIssueCode.invalid_type:
            if (issue.received === ZodParsedType.undefined) {
                message = "Required";
            }
            else {
                message = `Expected ${issue.expected}, received ${issue.received}`;
            }
            break;
        case ZodIssueCode.invalid_literal:
            message = `Invalid literal value, expected ${JSON.stringify(issue.expected)}`;
            break;
        case ZodIssueCode.unrecognized_keys:
            message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, ", ")}`;
            break;
        case ZodIssueCode.invalid_union:
            message = `Invalid input`;
            break;
        case ZodIssueCode.invalid_union_discriminator:
            message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;
            break;
        case ZodIssueCode.invalid_enum_value:
            message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;
            break;
        case ZodIssueCode.invalid_arguments:
            message = `Invalid function arguments`;
            break;
        case ZodIssueCode.invalid_return_type:
            message = `Invalid function return type`;
            break;
        case ZodIssueCode.invalid_date:
            message = `Invalid date`;
            break;
        case ZodIssueCode.invalid_string:
            if (issue.validation !== "regex")
                message = `Invalid ${issue.validation}`;
            else
                message = "Invalid";
            break;
        case ZodIssueCode.too_small:
            if (issue.type === "array")
                message = `Array must contain ${issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;
            else if (issue.type === "string")
                message = `String must contain ${issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;
            else if (issue.type === "number")
                message = `Number must be greater than ${issue.inclusive ? `or equal to ` : ``}${issue.minimum}`;
            else
                message = "Invalid input";
            break;
        case ZodIssueCode.too_big:
            if (issue.type === "array")
                message = `Array must contain ${issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;
            else if (issue.type === "string")
                message = `String must contain ${issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;
            else if (issue.type === "number")
                message = `Number must be less than ${issue.inclusive ? `or equal to ` : ``}${issue.maximum}`;
            else
                message = "Invalid input";
            break;
        case ZodIssueCode.custom:
            message = `Invalid input`;
            break;
        case ZodIssueCode.invalid_intersection_types:
            message = `Intersection results could not be merged`;
            break;
        case ZodIssueCode.not_multiple_of:
            message = `Number must be a multiple of ${issue.multipleOf}`;
            break;
        default:
            message = _ctx.defaultError;
            util.assertNever(issue);
    }
    return { message };
};
let overrideErrorMap = defaultErrorMap;
const setErrorMap = (map) => {
    overrideErrorMap = map;
};

const makeIssue = (params) => {
    const { data, path, errorMaps, issueData } = params;
    const fullPath = [...path, ...(issueData.path || [])];
    const fullIssue = {
        ...issueData,
        path: fullPath,
    };
    let errorMessage = "";
    const maps = errorMaps
        .filter((m) => !!m)
        .slice()
        .reverse();
    for (const map of maps) {
        errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;
    }
    return {
        ...issueData,
        path: fullPath,
        message: issueData.message || errorMessage,
    };
};
const EMPTY_PATH = [];
function addIssueToContext(ctx, issueData) {
    const issue = makeIssue({
        issueData: issueData,
        data: ctx.data,
        path: ctx.path,
        errorMaps: [
            ctx.common.contextualErrorMap,
            ctx.schemaErrorMap,
            overrideErrorMap,
            defaultErrorMap,
        ].filter((x) => !!x),
    });
    ctx.common.issues.push(issue);
}
class ParseStatus {
    constructor() {
        this.value = "valid";
    }
    dirty() {
        if (this.value === "valid")
            this.value = "dirty";
    }
    abort() {
        if (this.value !== "aborted")
            this.value = "aborted";
    }
    static mergeArray(status, results) {
        const arrayValue = [];
        for (const s of results) {
            if (s.status === "aborted")
                return INVALID;
            if (s.status === "dirty")
                status.dirty();
            arrayValue.push(s.value);
        }
        return { status: status.value, value: arrayValue };
    }
    static async mergeObjectAsync(status, pairs) {
        const syncPairs = [];
        for (const pair of pairs) {
            syncPairs.push({
                key: await pair.key,
                value: await pair.value,
            });
        }
        return ParseStatus.mergeObjectSync(status, syncPairs);
    }
    static mergeObjectSync(status, pairs) {
        const finalObject = {};
        for (const pair of pairs) {
            const { key, value } = pair;
            if (key.status === "aborted")
                return INVALID;
            if (value.status === "aborted")
                return INVALID;
            if (key.status === "dirty")
                status.dirty();
            if (value.status === "dirty")
                status.dirty();
            if (typeof value.value !== "undefined" || pair.alwaysSet) {
                finalObject[key.value] = value.value;
            }
        }
        return { status: status.value, value: finalObject };
    }
}
const INVALID = Object.freeze({
    status: "aborted",
});
const DIRTY = (value) => ({ status: "dirty", value });
const OK = (value) => ({ status: "valid", value });
const isAborted = (x) => x.status === "aborted";
const isDirty = (x) => x.status === "dirty";
const isValid = (x) => x.status === "valid";
const isAsync = (x) => typeof Promise !== undefined && x instanceof Promise;

var errorUtil;
(function (errorUtil) {
    errorUtil.errToObj = (message) => typeof message === "string" ? { message } : message || {};
    errorUtil.toString = (message) => typeof message === "string" ? message : message === null || message === void 0 ? void 0 : message.message;
})(errorUtil || (errorUtil = {}));

class ParseInputLazyPath {
    constructor(parent, value, path, key) {
        this.parent = parent;
        this.data = value;
        this._path = path;
        this._key = key;
    }
    get path() {
        return this._path.concat(this._key);
    }
}
const handleResult = (ctx, result) => {
    if (isValid(result)) {
        return { success: true, data: result.value };
    }
    else {
        if (!ctx.common.issues.length) {
            throw new Error("Validation failed but no issues detected.");
        }
        const error = new ZodError(ctx.common.issues);
        return { success: false, error };
    }
};
function processCreateParams(params) {
    if (!params)
        return {};
    const { errorMap, invalid_type_error, required_error, description } = params;
    if (errorMap && (invalid_type_error || required_error)) {
        throw new Error(`Can't use "invalid" or "required" in conjunction with custom error map.`);
    }
    if (errorMap)
        return { errorMap: errorMap, description };
    const customMap = (iss, ctx) => {
        if (iss.code !== "invalid_type")
            return { message: ctx.defaultError };
        if (typeof ctx.data === "undefined" && required_error)
            return { message: required_error };
        if (params.invalid_type_error)
            return { message: params.invalid_type_error };
        return { message: ctx.defaultError };
    };
    return { errorMap: customMap, description };
}
class ZodType {
    constructor(def) {
        /** Alias of safeParseAsync */
        this.spa = this.safeParseAsync;
        this.superRefine = this._refinement;
        this._def = def;
        this.parse = this.parse.bind(this);
        this.safeParse = this.safeParse.bind(this);
        this.parseAsync = this.parseAsync.bind(this);
        this.safeParseAsync = this.safeParseAsync.bind(this);
        this.spa = this.spa.bind(this);
        this.refine = this.refine.bind(this);
        this.refinement = this.refinement.bind(this);
        this.superRefine = this.superRefine.bind(this);
        this.optional = this.optional.bind(this);
        this.nullable = this.nullable.bind(this);
        this.nullish = this.nullish.bind(this);
        this.array = this.array.bind(this);
        this.promise = this.promise.bind(this);
        this.or = this.or.bind(this);
        this.and = this.and.bind(this);
        this.transform = this.transform.bind(this);
        this.default = this.default.bind(this);
        this.describe = this.describe.bind(this);
        this.isNullable = this.isNullable.bind(this);
        this.isOptional = this.isOptional.bind(this);
    }
    get description() {
        return this._def.description;
    }
    _getType(input) {
        return getParsedType(input.data);
    }
    _getOrReturnCtx(input, ctx) {
        return (ctx || {
            common: input.parent.common,
            data: input.data,
            parsedType: getParsedType(input.data),
            schemaErrorMap: this._def.errorMap,
            path: input.path,
            parent: input.parent,
        });
    }
    _processInputParams(input) {
        return {
            status: new ParseStatus(),
            ctx: {
                common: input.parent.common,
                data: input.data,
                parsedType: getParsedType(input.data),
                schemaErrorMap: this._def.errorMap,
                path: input.path,
                parent: input.parent,
            },
        };
    }
    _parseSync(input) {
        const result = this._parse(input);
        if (isAsync(result)) {
            throw new Error("Synchronous parse encountered promise.");
        }
        return result;
    }
    _parseAsync(input) {
        const result = this._parse(input);
        return Promise.resolve(result);
    }
    parse(data, params) {
        const result = this.safeParse(data, params);
        if (result.success)
            return result.data;
        throw result.error;
    }
    safeParse(data, params) {
        var _a;
        const ctx = {
            common: {
                issues: [],
                async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,
                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,
            },
            path: (params === null || params === void 0 ? void 0 : params.path) || [],
            schemaErrorMap: this._def.errorMap,
            parent: null,
            data,
            parsedType: getParsedType(data),
        };
        const result = this._parseSync({ data, path: ctx.path, parent: ctx });
        return handleResult(ctx, result);
    }
    async parseAsync(data, params) {
        const result = await this.safeParseAsync(data, params);
        if (result.success)
            return result.data;
        throw result.error;
    }
    async safeParseAsync(data, params) {
        const ctx = {
            common: {
                issues: [],
                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,
                async: true,
            },
            path: (params === null || params === void 0 ? void 0 : params.path) || [],
            schemaErrorMap: this._def.errorMap,
            parent: null,
            data,
            parsedType: getParsedType(data),
        };
        const maybeAsyncResult = this._parse({ data, path: [], parent: ctx });
        const result = await (isAsync(maybeAsyncResult)
            ? maybeAsyncResult
            : Promise.resolve(maybeAsyncResult));
        return handleResult(ctx, result);
    }
    refine(check, message) {
        const getIssueProperties = (val) => {
            if (typeof message === "string" || typeof message === "undefined") {
                return { message };
            }
            else if (typeof message === "function") {
                return message(val);
            }
            else {
                return message;
            }
        };
        return this._refinement((val, ctx) => {
            const result = check(val);
            const setError = () => ctx.addIssue({
                code: ZodIssueCode.custom,
                ...getIssueProperties(val),
            });
            if (typeof Promise !== "undefined" && result instanceof Promise) {
                return result.then((data) => {
                    if (!data) {
                        setError();
                        return false;
                    }
                    else {
                        return true;
                    }
                });
            }
            if (!result) {
                setError();
                return false;
            }
            else {
                return true;
            }
        });
    }
    refinement(check, refinementData) {
        return this._refinement((val, ctx) => {
            if (!check(val)) {
                ctx.addIssue(typeof refinementData === "function"
                    ? refinementData(val, ctx)
                    : refinementData);
                return false;
            }
            else {
                return true;
            }
        });
    }
    _refinement(refinement) {
        return new ZodEffects({
            schema: this,
            typeName: ZodFirstPartyTypeKind.ZodEffects,
            effect: { type: "refinement", refinement },
        });
    }
    optional() {
        return ZodOptional.create(this);
    }
    nullable() {
        return ZodNullable.create(this);
    }
    nullish() {
        return this.optional().nullable();
    }
    array() {
        return ZodArray.create(this);
    }
    promise() {
        return ZodPromise.create(this);
    }
    or(option) {
        return ZodUnion.create([this, option]);
    }
    and(incoming) {
        return ZodIntersection.create(this, incoming);
    }
    transform(transform) {
        return new ZodEffects({
            schema: this,
            typeName: ZodFirstPartyTypeKind.ZodEffects,
            effect: { type: "transform", transform },
        });
    }
    default(def) {
        const defaultValueFunc = typeof def === "function" ? def : () => def;
        return new ZodDefault({
            innerType: this,
            defaultValue: defaultValueFunc,
            typeName: ZodFirstPartyTypeKind.ZodDefault,
        });
    }
    describe(description) {
        const This = this.constructor;
        return new This({
            ...this._def,
            description,
        });
    }
    isOptional() {
        return this.safeParse(undefined).success;
    }
    isNullable() {
        return this.safeParse(null).success;
    }
}
const cuidRegex = /^c[^\s-]{8,}$/i;
const uuidRegex = /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;
// from https://stackoverflow.com/a/46181/1550155
// old version: too slow, didn't support unicode
// const emailRegex = /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i;
// eslint-disable-next-line
const emailRegex = /^(([^<>()[\]\.,;:\s@\"]+(\.[^<>()[\]\.,;:\s@\"]+)*)|(\".+\"))@(([^<>()[\]\.,;:\s@\"]+\.)+[^<>()[\]\.,;:\s@\"]{2,})$/i;
class ZodString extends ZodType {
    constructor() {
        super(...arguments);
        this._regex = (regex, validation, message) => this.refinement((data) => regex.test(data), {
            validation,
            code: ZodIssueCode.invalid_string,
            ...errorUtil.errToObj(message),
        });
        /**
         * @deprecated Use z.string().min(1) instead.
         * @see {@link ZodString.min}
         */
        this.nonempty = (message) => this.min(1, errorUtil.errToObj(message));
        this.trim = () => new ZodString({
            ...this._def,
            checks: [...this._def.checks, { kind: "trim" }],
        });
    }
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.string) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.string,
                received: ctx.parsedType,
            }
            //
            );
            return INVALID;
        }
        const status = new ParseStatus();
        let ctx = undefined;
        for (const check of this._def.checks) {
            if (check.kind === "min") {
                if (input.data.length < check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_small,
                        minimum: check.value,
                        type: "string",
                        inclusive: true,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "max") {
                if (input.data.length > check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_big,
                        maximum: check.value,
                        type: "string",
                        inclusive: true,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "email") {
                if (!emailRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "email",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "uuid") {
                if (!uuidRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "uuid",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "cuid") {
                if (!cuidRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "cuid",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "url") {
                try {
                    new URL(input.data);
                }
                catch (_a) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "url",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "regex") {
                check.regex.lastIndex = 0;
                const testResult = check.regex.test(input.data);
                if (!testResult) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "regex",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "trim") {
                input.data = input.data.trim();
            }
            else {
                util.assertNever(check);
            }
        }
        return { status: status.value, value: input.data };
    }
    _addCheck(check) {
        return new ZodString({
            ...this._def,
            checks: [...this._def.checks, check],
        });
    }
    email(message) {
        return this._addCheck({ kind: "email", ...errorUtil.errToObj(message) });
    }
    url(message) {
        return this._addCheck({ kind: "url", ...errorUtil.errToObj(message) });
    }
    uuid(message) {
        return this._addCheck({ kind: "uuid", ...errorUtil.errToObj(message) });
    }
    cuid(message) {
        return this._addCheck({ kind: "cuid", ...errorUtil.errToObj(message) });
    }
    regex(regex, message) {
        return this._addCheck({
            kind: "regex",
            regex: regex,
            ...errorUtil.errToObj(message),
        });
    }
    min(minLength, message) {
        return this._addCheck({
            kind: "min",
            value: minLength,
            ...errorUtil.errToObj(message),
        });
    }
    max(maxLength, message) {
        return this._addCheck({
            kind: "max",
            value: maxLength,
            ...errorUtil.errToObj(message),
        });
    }
    length(len, message) {
        return this.min(len, message).max(len, message);
    }
    get isEmail() {
        return !!this._def.checks.find((ch) => ch.kind === "email");
    }
    get isURL() {
        return !!this._def.checks.find((ch) => ch.kind === "url");
    }
    get isUUID() {
        return !!this._def.checks.find((ch) => ch.kind === "uuid");
    }
    get isCUID() {
        return !!this._def.checks.find((ch) => ch.kind === "cuid");
    }
    get minLength() {
        let min = -Infinity;
        this._def.checks.map((ch) => {
            if (ch.kind === "min") {
                if (min === null || ch.value > min) {
                    min = ch.value;
                }
            }
        });
        return min;
    }
    get maxLength() {
        let max = null;
        this._def.checks.map((ch) => {
            if (ch.kind === "max") {
                if (max === null || ch.value < max) {
                    max = ch.value;
                }
            }
        });
        return max;
    }
}
ZodString.create = (params) => {
    return new ZodString({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodString,
        ...processCreateParams(params),
    });
};
// https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/31711034#31711034
function floatSafeRemainder(val, step) {
    const valDecCount = (val.toString().split(".")[1] || "").length;
    const stepDecCount = (step.toString().split(".")[1] || "").length;
    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
    const valInt = parseInt(val.toFixed(decCount).replace(".", ""));
    const stepInt = parseInt(step.toFixed(decCount).replace(".", ""));
    return (valInt % stepInt) / Math.pow(10, decCount);
}
class ZodNumber extends ZodType {
    constructor() {
        super(...arguments);
        this.min = this.gte;
        this.max = this.lte;
        this.step = this.multipleOf;
    }
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.number) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.number,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        let ctx = undefined;
        const status = new ParseStatus();
        for (const check of this._def.checks) {
            if (check.kind === "int") {
                if (!util.isInteger(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.invalid_type,
                        expected: "integer",
                        received: "float",
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "min") {
                const tooSmall = check.inclusive
                    ? input.data < check.value
                    : input.data <= check.value;
                if (tooSmall) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_small,
                        minimum: check.value,
                        type: "number",
                        inclusive: check.inclusive,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "max") {
                const tooBig = check.inclusive
                    ? input.data > check.value
                    : input.data >= check.value;
                if (tooBig) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_big,
                        maximum: check.value,
                        type: "number",
                        inclusive: check.inclusive,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "multipleOf") {
                if (floatSafeRemainder(input.data, check.value) !== 0) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.not_multiple_of,
                        multipleOf: check.value,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else {
                util.assertNever(check);
            }
        }
        return { status: status.value, value: input.data };
    }
    gte(value, message) {
        return this.setLimit("min", value, true, errorUtil.toString(message));
    }
    gt(value, message) {
        return this.setLimit("min", value, false, errorUtil.toString(message));
    }
    lte(value, message) {
        return this.setLimit("max", value, true, errorUtil.toString(message));
    }
    lt(value, message) {
        return this.setLimit("max", value, false, errorUtil.toString(message));
    }
    setLimit(kind, value, inclusive, message) {
        return new ZodNumber({
            ...this._def,
            checks: [
                ...this._def.checks,
                {
                    kind,
                    value,
                    inclusive,
                    message: errorUtil.toString(message),
                },
            ],
        });
    }
    _addCheck(check) {
        return new ZodNumber({
            ...this._def,
            checks: [...this._def.checks, check],
        });
    }
    int(message) {
        return this._addCheck({
            kind: "int",
            message: errorUtil.toString(message),
        });
    }
    positive(message) {
        return this._addCheck({
            kind: "min",
            value: 0,
            inclusive: false,
            message: errorUtil.toString(message),
        });
    }
    negative(message) {
        return this._addCheck({
            kind: "max",
            value: 0,
            inclusive: false,
            message: errorUtil.toString(message),
        });
    }
    nonpositive(message) {
        return this._addCheck({
            kind: "max",
            value: 0,
            inclusive: true,
            message: errorUtil.toString(message),
        });
    }
    nonnegative(message) {
        return this._addCheck({
            kind: "min",
            value: 0,
            inclusive: true,
            message: errorUtil.toString(message),
        });
    }
    multipleOf(value, message) {
        return this._addCheck({
            kind: "multipleOf",
            value: value,
            message: errorUtil.toString(message),
        });
    }
    get minValue() {
        let min = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "min") {
                if (min === null || ch.value > min)
                    min = ch.value;
            }
        }
        return min;
    }
    get maxValue() {
        let max = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "max") {
                if (max === null || ch.value < max)
                    max = ch.value;
            }
        }
        return max;
    }
    get isInt() {
        return !!this._def.checks.find((ch) => ch.kind === "int");
    }
}
ZodNumber.create = (params) => {
    return new ZodNumber({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodNumber,
        ...processCreateParams(params),
    });
};
class ZodBigInt extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.bigint) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.bigint,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        return OK(input.data);
    }
}
ZodBigInt.create = (params) => {
    return new ZodBigInt({
        typeName: ZodFirstPartyTypeKind.ZodBigInt,
        ...processCreateParams(params),
    });
};
class ZodBoolean extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.boolean) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.boolean,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        return OK(input.data);
    }
}
ZodBoolean.create = (params) => {
    return new ZodBoolean({
        typeName: ZodFirstPartyTypeKind.ZodBoolean,
        ...processCreateParams(params),
    });
};
class ZodDate extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.date) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.date,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        if (isNaN(input.data.getTime())) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_date,
            });
            return INVALID;
        }
        return {
            status: "valid",
            value: new Date(input.data.getTime()),
        };
    }
}
ZodDate.create = (params) => {
    return new ZodDate({
        typeName: ZodFirstPartyTypeKind.ZodDate,
        ...processCreateParams(params),
    });
};
class ZodUndefined extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.undefined) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.undefined,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        return OK(input.data);
    }
}
ZodUndefined.create = (params) => {
    return new ZodUndefined({
        typeName: ZodFirstPartyTypeKind.ZodUndefined,
        ...processCreateParams(params),
    });
};
class ZodNull extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.null) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.null,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        return OK(input.data);
    }
}
ZodNull.create = (params) => {
    return new ZodNull({
        typeName: ZodFirstPartyTypeKind.ZodNull,
        ...processCreateParams(params),
    });
};
class ZodAny extends ZodType {
    constructor() {
        super(...arguments);
        // to prevent instances of other classes from extending ZodAny. this causes issues with catchall in ZodObject.
        this._any = true;
    }
    _parse(input) {
        return OK(input.data);
    }
}
ZodAny.create = (params) => {
    return new ZodAny({
        typeName: ZodFirstPartyTypeKind.ZodAny,
        ...processCreateParams(params),
    });
};
class ZodUnknown extends ZodType {
    constructor() {
        super(...arguments);
        // required
        this._unknown = true;
    }
    _parse(input) {
        return OK(input.data);
    }
}
ZodUnknown.create = (params) => {
    return new ZodUnknown({
        typeName: ZodFirstPartyTypeKind.ZodUnknown,
        ...processCreateParams(params),
    });
};
class ZodNever extends ZodType {
    _parse(input) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.never,
            received: ctx.parsedType,
        });
        return INVALID;
    }
}
ZodNever.create = (params) => {
    return new ZodNever({
        typeName: ZodFirstPartyTypeKind.ZodNever,
        ...processCreateParams(params),
    });
};
class ZodVoid extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.undefined) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.void,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        return OK(input.data);
    }
}
ZodVoid.create = (params) => {
    return new ZodVoid({
        typeName: ZodFirstPartyTypeKind.ZodVoid,
        ...processCreateParams(params),
    });
};
class ZodArray extends ZodType {
    _parse(input) {
        const { ctx, status } = this._processInputParams(input);
        const def = this._def;
        if (ctx.parsedType !== ZodParsedType.array) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.array,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        if (def.minLength !== null) {
            if (ctx.data.length < def.minLength.value) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.too_small,
                    minimum: def.minLength.value,
                    type: "array",
                    inclusive: true,
                    message: def.minLength.message,
                });
                status.dirty();
            }
        }
        if (def.maxLength !== null) {
            if (ctx.data.length > def.maxLength.value) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.too_big,
                    maximum: def.maxLength.value,
                    type: "array",
                    inclusive: true,
                    message: def.maxLength.message,
                });
                status.dirty();
            }
        }
        if (ctx.common.async) {
            return Promise.all(ctx.data.map((item, i) => {
                return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));
            })).then((result) => {
                return ParseStatus.mergeArray(status, result);
            });
        }
        const result = ctx.data.map((item, i) => {
            return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));
        });
        return ParseStatus.mergeArray(status, result);
    }
    get element() {
        return this._def.type;
    }
    min(minLength, message) {
        return new ZodArray({
            ...this._def,
            minLength: { value: minLength, message: errorUtil.toString(message) },
        });
    }
    max(maxLength, message) {
        return new ZodArray({
            ...this._def,
            maxLength: { value: maxLength, message: errorUtil.toString(message) },
        });
    }
    length(len, message) {
        return this.min(len, message).max(len, message);
    }
    nonempty(message) {
        return this.min(1, message);
    }
}
ZodArray.create = (schema, params) => {
    return new ZodArray({
        type: schema,
        minLength: null,
        maxLength: null,
        typeName: ZodFirstPartyTypeKind.ZodArray,
        ...processCreateParams(params),
    });
};
/////////////////////////////////////////
/////////////////////////////////////////
//////////                     //////////
//////////      ZodObject      //////////
//////////                     //////////
/////////////////////////////////////////
/////////////////////////////////////////
var objectUtil;
(function (objectUtil) {
    objectUtil.mergeShapes = (first, second) => {
        return {
            ...first,
            ...second,
        };
    };
})(objectUtil || (objectUtil = {}));
const AugmentFactory = (def) => (augmentation) => {
    return new ZodObject({
        ...def,
        shape: () => ({
            ...def.shape(),
            ...augmentation,
        }),
    });
};
function deepPartialify(schema) {
    if (schema instanceof ZodObject) {
        const newShape = {};
        for (const key in schema.shape) {
            const fieldSchema = schema.shape[key];
            newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));
        }
        return new ZodObject({
            ...schema._def,
            shape: () => newShape,
        });
    }
    else if (schema instanceof ZodArray) {
        return ZodArray.create(deepPartialify(schema.element));
    }
    else if (schema instanceof ZodOptional) {
        return ZodOptional.create(deepPartialify(schema.unwrap()));
    }
    else if (schema instanceof ZodNullable) {
        return ZodNullable.create(deepPartialify(schema.unwrap()));
    }
    else if (schema instanceof ZodTuple) {
        return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));
    }
    else {
        return schema;
    }
}
class ZodObject extends ZodType {
    constructor() {
        super(...arguments);
        this._cached = null;
        /**
         * @deprecated In most cases, this is no longer needed - unknown properties are now silently stripped.
         * If you want to pass through unknown properties, use `.passthrough()` instead.
         */
        this.nonstrict = this.passthrough;
        this.augment = AugmentFactory(this._def);
        this.extend = AugmentFactory(this._def);
    }
    _getCached() {
        if (this._cached !== null)
            return this._cached;
        const shape = this._def.shape();
        const keys = util.objectKeys(shape);
        return (this._cached = { shape, keys });
    }
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.object) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.object,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        const { status, ctx } = this._processInputParams(input);
        const { shape, keys: shapeKeys } = this._getCached();
        const extraKeys = [];
        for (const key in ctx.data) {
            if (!shapeKeys.includes(key)) {
                extraKeys.push(key);
            }
        }
        const pairs = [];
        for (const key of shapeKeys) {
            const keyValidator = shape[key];
            const value = ctx.data[key];
            pairs.push({
                key: { status: "valid", value: key },
                value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
                alwaysSet: key in ctx.data,
            });
        }
        if (this._def.catchall instanceof ZodNever) {
            const unknownKeys = this._def.unknownKeys;
            if (unknownKeys === "passthrough") {
                for (const key of extraKeys) {
                    pairs.push({
                        key: { status: "valid", value: key },
                        value: { status: "valid", value: ctx.data[key] },
                    });
                }
            }
            else if (unknownKeys === "strict") {
                if (extraKeys.length > 0) {
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.unrecognized_keys,
                        keys: extraKeys,
                    });
                    status.dirty();
                }
            }
            else if (unknownKeys === "strip") ;
            else {
                throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
            }
        }
        else {
            // run catchall validation
            const catchall = this._def.catchall;
            for (const key of extraKeys) {
                const value = ctx.data[key];
                pairs.push({
                    key: { status: "valid", value: key },
                    value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key) //, ctx.child(key), value, getParsedType(value)
                    ),
                    alwaysSet: key in ctx.data,
                });
            }
        }
        if (ctx.common.async) {
            return Promise.resolve()
                .then(async () => {
                const syncPairs = [];
                for (const pair of pairs) {
                    const key = await pair.key;
                    syncPairs.push({
                        key,
                        value: await pair.value,
                        alwaysSet: pair.alwaysSet,
                    });
                }
                return syncPairs;
            })
                .then((syncPairs) => {
                return ParseStatus.mergeObjectSync(status, syncPairs);
            });
        }
        else {
            return ParseStatus.mergeObjectSync(status, pairs);
        }
    }
    get shape() {
        return this._def.shape();
    }
    strict(message) {
        errorUtil.errToObj;
        return new ZodObject({
            ...this._def,
            unknownKeys: "strict",
            ...(message !== undefined
                ? {
                    errorMap: (issue, ctx) => {
                        var _a, _b, _c, _d;
                        const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;
                        if (issue.code === "unrecognized_keys")
                            return {
                                message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError,
                            };
                        return {
                            message: defaultError,
                        };
                    },
                }
                : {}),
        });
    }
    strip() {
        return new ZodObject({
            ...this._def,
            unknownKeys: "strip",
        });
    }
    passthrough() {
        return new ZodObject({
            ...this._def,
            unknownKeys: "passthrough",
        });
    }
    setKey(key, schema) {
        return this.augment({ [key]: schema });
    }
    /**
     * Prior to zod@1.0.12 there was a bug in the
     * inferred type of merged objects. Please
     * upgrade if you are experiencing issues.
     */
    merge(merging) {
        // const mergedShape = objectUtil.mergeShapes(
        //   this._def.shape(),
        //   merging._def.shape()
        // );
        const merged = new ZodObject({
            unknownKeys: merging._def.unknownKeys,
            catchall: merging._def.catchall,
            shape: () => objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
            typeName: ZodFirstPartyTypeKind.ZodObject,
        });
        return merged;
    }
    catchall(index) {
        return new ZodObject({
            ...this._def,
            catchall: index,
        });
    }
    pick(mask) {
        const shape = {};
        util.objectKeys(mask).map((key) => {
            // only add to shape if key corresponds to an element of the current shape
            if (this.shape[key])
                shape[key] = this.shape[key];
        });
        return new ZodObject({
            ...this._def,
            shape: () => shape,
        });
    }
    omit(mask) {
        const shape = {};
        util.objectKeys(this.shape).map((key) => {
            if (util.objectKeys(mask).indexOf(key) === -1) {
                shape[key] = this.shape[key];
            }
        });
        return new ZodObject({
            ...this._def,
            shape: () => shape,
        });
    }
    deepPartial() {
        return deepPartialify(this);
    }
    partial(mask) {
        const newShape = {};
        if (mask) {
            util.objectKeys(this.shape).map((key) => {
                if (util.objectKeys(mask).indexOf(key) === -1) {
                    newShape[key] = this.shape[key];
                }
                else {
                    newShape[key] = this.shape[key].optional();
                }
            });
            return new ZodObject({
                ...this._def,
                shape: () => newShape,
            });
        }
        else {
            for (const key in this.shape) {
                const fieldSchema = this.shape[key];
                newShape[key] = fieldSchema.optional();
            }
        }
        return new ZodObject({
            ...this._def,
            shape: () => newShape,
        });
    }
    required() {
        const newShape = {};
        for (const key in this.shape) {
            const fieldSchema = this.shape[key];
            let newField = fieldSchema;
            while (newField instanceof ZodOptional) {
                newField = newField._def.innerType;
            }
            newShape[key] = newField;
        }
        return new ZodObject({
            ...this._def,
            shape: () => newShape,
        });
    }
}
ZodObject.create = (shape, params) => {
    return new ZodObject({
        shape: () => shape,
        unknownKeys: "strip",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params),
    });
};
ZodObject.strictCreate = (shape, params) => {
    return new ZodObject({
        shape: () => shape,
        unknownKeys: "strict",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params),
    });
};
ZodObject.lazycreate = (shape, params) => {
    return new ZodObject({
        shape,
        unknownKeys: "strip",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params),
    });
};
class ZodUnion extends ZodType {
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        const options = this._def.options;
        function handleResults(results) {
            // return first issue-free validation if it exists
            for (const result of results) {
                if (result.result.status === "valid") {
                    return result.result;
                }
            }
            for (const result of results) {
                if (result.result.status === "dirty") {
                    // add issues from dirty option
                    ctx.common.issues.push(...result.ctx.common.issues);
                    return result.result;
                }
            }
            // return invalid
            const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_union,
                unionErrors,
            });
            return INVALID;
        }
        if (ctx.common.async) {
            return Promise.all(options.map(async (option) => {
                const childCtx = {
                    ...ctx,
                    common: {
                        ...ctx.common,
                        issues: [],
                    },
                    parent: null,
                };
                return {
                    result: await option._parseAsync({
                        data: ctx.data,
                        path: ctx.path,
                        parent: childCtx,
                    }),
                    ctx: childCtx,
                };
            })).then(handleResults);
        }
        else {
            let dirty = undefined;
            const issues = [];
            for (const option of options) {
                const childCtx = {
                    ...ctx,
                    common: {
                        ...ctx.common,
                        issues: [],
                    },
                    parent: null,
                };
                const result = option._parseSync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: childCtx,
                });
                if (result.status === "valid") {
                    return result;
                }
                else if (result.status === "dirty" && !dirty) {
                    dirty = { result, ctx: childCtx };
                }
                if (childCtx.common.issues.length) {
                    issues.push(childCtx.common.issues);
                }
            }
            if (dirty) {
                ctx.common.issues.push(...dirty.ctx.common.issues);
                return dirty.result;
            }
            const unionErrors = issues.map((issues) => new ZodError(issues));
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_union,
                unionErrors,
            });
            return INVALID;
        }
    }
    get options() {
        return this._def.options;
    }
}
ZodUnion.create = (types, params) => {
    return new ZodUnion({
        options: types,
        typeName: ZodFirstPartyTypeKind.ZodUnion,
        ...processCreateParams(params),
    });
};
class ZodDiscriminatedUnion extends ZodType {
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.object) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.object,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        const discriminator = this.discriminator;
        const discriminatorValue = ctx.data[discriminator];
        const option = this.options.get(discriminatorValue);
        if (!option) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_union_discriminator,
                options: this.validDiscriminatorValues,
                path: [discriminator],
            });
            return INVALID;
        }
        if (ctx.common.async) {
            return option._parseAsync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx,
            });
        }
        else {
            return option._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx,
            });
        }
    }
    get discriminator() {
        return this._def.discriminator;
    }
    get validDiscriminatorValues() {
        return Array.from(this.options.keys());
    }
    get options() {
        return this._def.options;
    }
    /**
     * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
     * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
     * have a different value for each object in the union.
     * @param discriminator the name of the discriminator property
     * @param types an array of object schemas
     * @param params
     */
    static create(discriminator, types, params) {
        // Get all the valid discriminator values
        const options = new Map();
        try {
            types.forEach((type) => {
                const discriminatorValue = type.shape[discriminator].value;
                options.set(discriminatorValue, type);
            });
        }
        catch (e) {
            throw new Error("The discriminator value could not be extracted from all the provided schemas");
        }
        // Assert that all the discriminator values are unique
        if (options.size !== types.length) {
            throw new Error("Some of the discriminator values are not unique");
        }
        return new ZodDiscriminatedUnion({
            typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
            discriminator,
            options,
            ...processCreateParams(params),
        });
    }
}
function mergeValues(a, b) {
    const aType = getParsedType(a);
    const bType = getParsedType(b);
    if (a === b) {
        return { valid: true, data: a };
    }
    else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {
        const bKeys = util.objectKeys(b);
        const sharedKeys = util
            .objectKeys(a)
            .filter((key) => bKeys.indexOf(key) !== -1);
        const newObj = { ...a, ...b };
        for (const key of sharedKeys) {
            const sharedValue = mergeValues(a[key], b[key]);
            if (!sharedValue.valid) {
                return { valid: false };
            }
            newObj[key] = sharedValue.data;
        }
        return { valid: true, data: newObj };
    }
    else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {
        if (a.length !== b.length) {
            return { valid: false };
        }
        const newArray = [];
        for (let index = 0; index < a.length; index++) {
            const itemA = a[index];
            const itemB = b[index];
            const sharedValue = mergeValues(itemA, itemB);
            if (!sharedValue.valid) {
                return { valid: false };
            }
            newArray.push(sharedValue.data);
        }
        return { valid: true, data: newArray };
    }
    else if (aType === ZodParsedType.date &&
        bType === ZodParsedType.date &&
        +a === +b) {
        return { valid: true, data: a };
    }
    else {
        return { valid: false };
    }
}
class ZodIntersection extends ZodType {
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        const handleParsed = (parsedLeft, parsedRight) => {
            if (isAborted(parsedLeft) || isAborted(parsedRight)) {
                return INVALID;
            }
            const merged = mergeValues(parsedLeft.value, parsedRight.value);
            if (!merged.valid) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.invalid_intersection_types,
                });
                return INVALID;
            }
            if (isDirty(parsedLeft) || isDirty(parsedRight)) {
                status.dirty();
            }
            return { status: status.value, value: merged.data };
        };
        if (ctx.common.async) {
            return Promise.all([
                this._def.left._parseAsync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx,
                }),
                this._def.right._parseAsync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx,
                }),
            ]).then(([left, right]) => handleParsed(left, right));
        }
        else {
            return handleParsed(this._def.left._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx,
            }), this._def.right._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx,
            }));
        }
    }
}
ZodIntersection.create = (left, right, params) => {
    return new ZodIntersection({
        left: left,
        right: right,
        typeName: ZodFirstPartyTypeKind.ZodIntersection,
        ...processCreateParams(params),
    });
};
class ZodTuple extends ZodType {
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.array) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.array,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        if (ctx.data.length < this._def.items.length) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.too_small,
                minimum: this._def.items.length,
                inclusive: true,
                type: "array",
            });
            return INVALID;
        }
        const rest = this._def.rest;
        if (!rest && ctx.data.length > this._def.items.length) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.too_big,
                maximum: this._def.items.length,
                inclusive: true,
                type: "array",
            });
            status.dirty();
        }
        const items = ctx.data
            .map((item, itemIndex) => {
            const schema = this._def.items[itemIndex] || this._def.rest;
            if (!schema)
                return null;
            return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));
        })
            .filter((x) => !!x); // filter nulls
        if (ctx.common.async) {
            return Promise.all(items).then((results) => {
                return ParseStatus.mergeArray(status, results);
            });
        }
        else {
            return ParseStatus.mergeArray(status, items);
        }
    }
    get items() {
        return this._def.items;
    }
    rest(rest) {
        return new ZodTuple({
            ...this._def,
            rest,
        });
    }
}
ZodTuple.create = (schemas, params) => {
    return new ZodTuple({
        items: schemas,
        typeName: ZodFirstPartyTypeKind.ZodTuple,
        rest: null,
        ...processCreateParams(params),
    });
};
class ZodRecord extends ZodType {
    get keySchema() {
        return this._def.keyType;
    }
    get valueSchema() {
        return this._def.valueType;
    }
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.object) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.object,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        const pairs = [];
        const keyType = this._def.keyType;
        const valueType = this._def.valueType;
        for (const key in ctx.data) {
            pairs.push({
                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),
                value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),
            });
        }
        if (ctx.common.async) {
            return ParseStatus.mergeObjectAsync(status, pairs);
        }
        else {
            return ParseStatus.mergeObjectSync(status, pairs);
        }
    }
    get element() {
        return this._def.valueType;
    }
    static create(first, second, third) {
        if (second instanceof ZodType) {
            return new ZodRecord({
                keyType: first,
                valueType: second,
                typeName: ZodFirstPartyTypeKind.ZodRecord,
                ...processCreateParams(third),
            });
        }
        return new ZodRecord({
            keyType: ZodString.create(),
            valueType: first,
            typeName: ZodFirstPartyTypeKind.ZodRecord,
            ...processCreateParams(second),
        });
    }
}
class ZodMap extends ZodType {
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.map) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.map,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        const keyType = this._def.keyType;
        const valueType = this._def.valueType;
        const pairs = [...ctx.data.entries()].map(([key, value], index) => {
            return {
                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, "key"])),
                value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, "value"])),
            };
        });
        if (ctx.common.async) {
            const finalMap = new Map();
            return Promise.resolve().then(async () => {
                for (const pair of pairs) {
                    const key = await pair.key;
                    const value = await pair.value;
                    if (key.status === "aborted" || value.status === "aborted") {
                        return INVALID;
                    }
                    if (key.status === "dirty" || value.status === "dirty") {
                        status.dirty();
                    }
                    finalMap.set(key.value, value.value);
                }
                return { status: status.value, value: finalMap };
            });
        }
        else {
            const finalMap = new Map();
            for (const pair of pairs) {
                const key = pair.key;
                const value = pair.value;
                if (key.status === "aborted" || value.status === "aborted") {
                    return INVALID;
                }
                if (key.status === "dirty" || value.status === "dirty") {
                    status.dirty();
                }
                finalMap.set(key.value, value.value);
            }
            return { status: status.value, value: finalMap };
        }
    }
}
ZodMap.create = (keyType, valueType, params) => {
    return new ZodMap({
        valueType,
        keyType,
        typeName: ZodFirstPartyTypeKind.ZodMap,
        ...processCreateParams(params),
    });
};
class ZodSet extends ZodType {
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.set) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.set,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        const def = this._def;
        if (def.minSize !== null) {
            if (ctx.data.size < def.minSize.value) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.too_small,
                    minimum: def.minSize.value,
                    type: "set",
                    inclusive: true,
                    message: def.minSize.message,
                });
                status.dirty();
            }
        }
        if (def.maxSize !== null) {
            if (ctx.data.size > def.maxSize.value) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.too_big,
                    maximum: def.maxSize.value,
                    type: "set",
                    inclusive: true,
                    message: def.maxSize.message,
                });
                status.dirty();
            }
        }
        const valueType = this._def.valueType;
        function finalizeSet(elements) {
            const parsedSet = new Set();
            for (const element of elements) {
                if (element.status === "aborted")
                    return INVALID;
                if (element.status === "dirty")
                    status.dirty();
                parsedSet.add(element.value);
            }
            return { status: status.value, value: parsedSet };
        }
        const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));
        if (ctx.common.async) {
            return Promise.all(elements).then((elements) => finalizeSet(elements));
        }
        else {
            return finalizeSet(elements);
        }
    }
    min(minSize, message) {
        return new ZodSet({
            ...this._def,
            minSize: { value: minSize, message: errorUtil.toString(message) },
        });
    }
    max(maxSize, message) {
        return new ZodSet({
            ...this._def,
            maxSize: { value: maxSize, message: errorUtil.toString(message) },
        });
    }
    size(size, message) {
        return this.min(size, message).max(size, message);
    }
    nonempty(message) {
        return this.min(1, message);
    }
}
ZodSet.create = (valueType, params) => {
    return new ZodSet({
        valueType,
        minSize: null,
        maxSize: null,
        typeName: ZodFirstPartyTypeKind.ZodSet,
        ...processCreateParams(params),
    });
};
class ZodFunction extends ZodType {
    constructor() {
        super(...arguments);
        this.validate = this.implement;
    }
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.function) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.function,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        function makeArgsIssue(args, error) {
            return makeIssue({
                data: args,
                path: ctx.path,
                errorMaps: [
                    ctx.common.contextualErrorMap,
                    ctx.schemaErrorMap,
                    overrideErrorMap,
                    defaultErrorMap,
                ].filter((x) => !!x),
                issueData: {
                    code: ZodIssueCode.invalid_arguments,
                    argumentsError: error,
                },
            });
        }
        function makeReturnsIssue(returns, error) {
            return makeIssue({
                data: returns,
                path: ctx.path,
                errorMaps: [
                    ctx.common.contextualErrorMap,
                    ctx.schemaErrorMap,
                    overrideErrorMap,
                    defaultErrorMap,
                ].filter((x) => !!x),
                issueData: {
                    code: ZodIssueCode.invalid_return_type,
                    returnTypeError: error,
                },
            });
        }
        const params = { errorMap: ctx.common.contextualErrorMap };
        const fn = ctx.data;
        if (this._def.returns instanceof ZodPromise) {
            return OK(async (...args) => {
                const error = new ZodError([]);
                const parsedArgs = await this._def.args
                    .parseAsync(args, params)
                    .catch((e) => {
                    error.addIssue(makeArgsIssue(args, e));
                    throw error;
                });
                const result = await fn(...parsedArgs);
                const parsedReturns = await this._def.returns._def.type
                    .parseAsync(result, params)
                    .catch((e) => {
                    error.addIssue(makeReturnsIssue(result, e));
                    throw error;
                });
                return parsedReturns;
            });
        }
        else {
            return OK((...args) => {
                const parsedArgs = this._def.args.safeParse(args, params);
                if (!parsedArgs.success) {
                    throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);
                }
                const result = fn(...parsedArgs.data);
                const parsedReturns = this._def.returns.safeParse(result, params);
                if (!parsedReturns.success) {
                    throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);
                }
                return parsedReturns.data;
            });
        }
    }
    parameters() {
        return this._def.args;
    }
    returnType() {
        return this._def.returns;
    }
    args(...items) {
        return new ZodFunction({
            ...this._def,
            args: ZodTuple.create(items).rest(ZodUnknown.create()),
        });
    }
    returns(returnType) {
        return new ZodFunction({
            ...this._def,
            returns: returnType,
        });
    }
    implement(func) {
        const validatedFunc = this.parse(func);
        return validatedFunc;
    }
    strictImplement(func) {
        const validatedFunc = this.parse(func);
        return validatedFunc;
    }
}
ZodFunction.create = (args, returns, params) => {
    return new ZodFunction({
        args: (args
            ? args.rest(ZodUnknown.create())
            : ZodTuple.create([]).rest(ZodUnknown.create())),
        returns: returns || ZodUnknown.create(),
        typeName: ZodFirstPartyTypeKind.ZodFunction,
        ...processCreateParams(params),
    });
};
class ZodLazy extends ZodType {
    get schema() {
        return this._def.getter();
    }
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        const lazySchema = this._def.getter();
        return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });
    }
}
ZodLazy.create = (getter, params) => {
    return new ZodLazy({
        getter: getter,
        typeName: ZodFirstPartyTypeKind.ZodLazy,
        ...processCreateParams(params),
    });
};
class ZodLiteral extends ZodType {
    _parse(input) {
        if (input.data !== this._def.value) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_literal,
                expected: this._def.value,
            });
            return INVALID;
        }
        return { status: "valid", value: input.data };
    }
    get value() {
        return this._def.value;
    }
}
ZodLiteral.create = (value, params) => {
    return new ZodLiteral({
        value: value,
        typeName: ZodFirstPartyTypeKind.ZodLiteral,
        ...processCreateParams(params),
    });
};
function createZodEnum(values, params) {
    return new ZodEnum({
        values: values,
        typeName: ZodFirstPartyTypeKind.ZodEnum,
        ...processCreateParams(params),
    });
}
class ZodEnum extends ZodType {
    _parse(input) {
        if (typeof input.data !== "string") {
            const ctx = this._getOrReturnCtx(input);
            const expectedValues = this._def.values;
            addIssueToContext(ctx, {
                expected: util.joinValues(expectedValues),
                received: ctx.parsedType,
                code: ZodIssueCode.invalid_type,
            });
            return INVALID;
        }
        if (this._def.values.indexOf(input.data) === -1) {
            const ctx = this._getOrReturnCtx(input);
            const expectedValues = this._def.values;
            addIssueToContext(ctx, {
                received: ctx.data,
                code: ZodIssueCode.invalid_enum_value,
                options: expectedValues,
            });
            return INVALID;
        }
        return OK(input.data);
    }
    get options() {
        return this._def.values;
    }
    get enum() {
        const enumValues = {};
        for (const val of this._def.values) {
            enumValues[val] = val;
        }
        return enumValues;
    }
    get Values() {
        const enumValues = {};
        for (const val of this._def.values) {
            enumValues[val] = val;
        }
        return enumValues;
    }
    get Enum() {
        const enumValues = {};
        for (const val of this._def.values) {
            enumValues[val] = val;
        }
        return enumValues;
    }
}
ZodEnum.create = createZodEnum;
class ZodNativeEnum extends ZodType {
    _parse(input) {
        const nativeEnumValues = util.getValidEnumValues(this._def.values);
        const ctx = this._getOrReturnCtx(input);
        if (ctx.parsedType !== ZodParsedType.string &&
            ctx.parsedType !== ZodParsedType.number) {
            const expectedValues = util.objectValues(nativeEnumValues);
            addIssueToContext(ctx, {
                expected: util.joinValues(expectedValues),
                received: ctx.parsedType,
                code: ZodIssueCode.invalid_type,
            });
            return INVALID;
        }
        if (nativeEnumValues.indexOf(input.data) === -1) {
            const expectedValues = util.objectValues(nativeEnumValues);
            addIssueToContext(ctx, {
                received: ctx.data,
                code: ZodIssueCode.invalid_enum_value,
                options: expectedValues,
            });
            return INVALID;
        }
        return OK(input.data);
    }
    get enum() {
        return this._def.values;
    }
}
ZodNativeEnum.create = (values, params) => {
    return new ZodNativeEnum({
        values: values,
        typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
        ...processCreateParams(params),
    });
};
class ZodPromise extends ZodType {
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.promise &&
            ctx.common.async === false) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.promise,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        const promisified = ctx.parsedType === ZodParsedType.promise
            ? ctx.data
            : Promise.resolve(ctx.data);
        return OK(promisified.then((data) => {
            return this._def.type.parseAsync(data, {
                path: ctx.path,
                errorMap: ctx.common.contextualErrorMap,
            });
        }));
    }
}
ZodPromise.create = (schema, params) => {
    return new ZodPromise({
        type: schema,
        typeName: ZodFirstPartyTypeKind.ZodPromise,
        ...processCreateParams(params),
    });
};
class ZodEffects extends ZodType {
    innerType() {
        return this._def.schema;
    }
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        const effect = this._def.effect || null;
        if (effect.type === "preprocess") {
            const processed = effect.transform(ctx.data);
            if (ctx.common.async) {
                return Promise.resolve(processed).then((processed) => {
                    return this._def.schema._parseAsync({
                        data: processed,
                        path: ctx.path,
                        parent: ctx,
                    });
                });
            }
            else {
                return this._def.schema._parseSync({
                    data: processed,
                    path: ctx.path,
                    parent: ctx,
                });
            }
        }
        const checkCtx = {
            addIssue: (arg) => {
                addIssueToContext(ctx, arg);
                if (arg.fatal) {
                    status.abort();
                }
                else {
                    status.dirty();
                }
            },
            get path() {
                return ctx.path;
            },
        };
        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
        if (effect.type === "refinement") {
            const executeRefinement = (acc
            // effect: RefinementEffect<any>
            ) => {
                const result = effect.refinement(acc, checkCtx);
                if (ctx.common.async) {
                    return Promise.resolve(result);
                }
                if (result instanceof Promise) {
                    throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
                }
                return acc;
            };
            if (ctx.common.async === false) {
                const inner = this._def.schema._parseSync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx,
                });
                if (inner.status === "aborted")
                    return INVALID;
                if (inner.status === "dirty")
                    status.dirty();
                // return value is ignored
                executeRefinement(inner.value);
                return { status: status.value, value: inner.value };
            }
            else {
                return this._def.schema
                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })
                    .then((inner) => {
                    if (inner.status === "aborted")
                        return INVALID;
                    if (inner.status === "dirty")
                        status.dirty();
                    return executeRefinement(inner.value).then(() => {
                        return { status: status.value, value: inner.value };
                    });
                });
            }
        }
        if (effect.type === "transform") {
            if (ctx.common.async === false) {
                const base = this._def.schema._parseSync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx,
                });
                // if (base.status === "aborted") return INVALID;
                // if (base.status === "dirty") {
                //   return { status: "dirty", value: base.value };
                // }
                if (!isValid(base))
                    return base;
                const result = effect.transform(base.value, checkCtx);
                if (result instanceof Promise) {
                    throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
                }
                return { status: status.value, value: result };
            }
            else {
                return this._def.schema
                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })
                    .then((base) => {
                    if (!isValid(base))
                        return base;
                    // if (base.status === "aborted") return INVALID;
                    // if (base.status === "dirty") {
                    //   return { status: "dirty", value: base.value };
                    // }
                    return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({ status: status.value, value: result }));
                });
            }
        }
        util.assertNever(effect);
    }
}
ZodEffects.create = (schema, effect, params) => {
    return new ZodEffects({
        schema,
        typeName: ZodFirstPartyTypeKind.ZodEffects,
        effect,
        ...processCreateParams(params),
    });
};
ZodEffects.createWithPreprocess = (preprocess, schema, params) => {
    return new ZodEffects({
        schema,
        effect: { type: "preprocess", transform: preprocess },
        typeName: ZodFirstPartyTypeKind.ZodEffects,
        ...processCreateParams(params),
    });
};
class ZodOptional extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType === ZodParsedType.undefined) {
            return OK(undefined);
        }
        return this._def.innerType._parse(input);
    }
    unwrap() {
        return this._def.innerType;
    }
}
ZodOptional.create = (type, params) => {
    return new ZodOptional({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodOptional,
        ...processCreateParams(params),
    });
};
class ZodNullable extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType === ZodParsedType.null) {
            return OK(null);
        }
        return this._def.innerType._parse(input);
    }
    unwrap() {
        return this._def.innerType;
    }
}
ZodNullable.create = (type, params) => {
    return new ZodNullable({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodNullable,
        ...processCreateParams(params),
    });
};
class ZodDefault extends ZodType {
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        let data = ctx.data;
        if (ctx.parsedType === ZodParsedType.undefined) {
            data = this._def.defaultValue();
        }
        return this._def.innerType._parse({
            data,
            path: ctx.path,
            parent: ctx,
        });
    }
    removeDefault() {
        return this._def.innerType;
    }
}
ZodDefault.create = (type, params) => {
    return new ZodOptional({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodOptional,
        ...processCreateParams(params),
    });
};
class ZodNaN extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.nan) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.nan,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        return { status: "valid", value: input.data };
    }
}
ZodNaN.create = (params) => {
    return new ZodNaN({
        typeName: ZodFirstPartyTypeKind.ZodNaN,
        ...processCreateParams(params),
    });
};
const custom = (check, params = {}, fatal) => {
    if (check)
        return ZodAny.create().superRefine((data, ctx) => {
            if (!check(data)) {
                const p = typeof params === "function" ? params(data) : params;
                const p2 = typeof p === "string" ? { message: p } : p;
                ctx.addIssue({ code: "custom", ...p2, fatal });
            }
        });
    return ZodAny.create();
};
const late = {
    object: ZodObject.lazycreate,
};
var ZodFirstPartyTypeKind;
(function (ZodFirstPartyTypeKind) {
    ZodFirstPartyTypeKind["ZodString"] = "ZodString";
    ZodFirstPartyTypeKind["ZodNumber"] = "ZodNumber";
    ZodFirstPartyTypeKind["ZodNaN"] = "ZodNaN";
    ZodFirstPartyTypeKind["ZodBigInt"] = "ZodBigInt";
    ZodFirstPartyTypeKind["ZodBoolean"] = "ZodBoolean";
    ZodFirstPartyTypeKind["ZodDate"] = "ZodDate";
    ZodFirstPartyTypeKind["ZodUndefined"] = "ZodUndefined";
    ZodFirstPartyTypeKind["ZodNull"] = "ZodNull";
    ZodFirstPartyTypeKind["ZodAny"] = "ZodAny";
    ZodFirstPartyTypeKind["ZodUnknown"] = "ZodUnknown";
    ZodFirstPartyTypeKind["ZodNever"] = "ZodNever";
    ZodFirstPartyTypeKind["ZodVoid"] = "ZodVoid";
    ZodFirstPartyTypeKind["ZodArray"] = "ZodArray";
    ZodFirstPartyTypeKind["ZodObject"] = "ZodObject";
    ZodFirstPartyTypeKind["ZodUnion"] = "ZodUnion";
    ZodFirstPartyTypeKind["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
    ZodFirstPartyTypeKind["ZodIntersection"] = "ZodIntersection";
    ZodFirstPartyTypeKind["ZodTuple"] = "ZodTuple";
    ZodFirstPartyTypeKind["ZodRecord"] = "ZodRecord";
    ZodFirstPartyTypeKind["ZodMap"] = "ZodMap";
    ZodFirstPartyTypeKind["ZodSet"] = "ZodSet";
    ZodFirstPartyTypeKind["ZodFunction"] = "ZodFunction";
    ZodFirstPartyTypeKind["ZodLazy"] = "ZodLazy";
    ZodFirstPartyTypeKind["ZodLiteral"] = "ZodLiteral";
    ZodFirstPartyTypeKind["ZodEnum"] = "ZodEnum";
    ZodFirstPartyTypeKind["ZodEffects"] = "ZodEffects";
    ZodFirstPartyTypeKind["ZodNativeEnum"] = "ZodNativeEnum";
    ZodFirstPartyTypeKind["ZodOptional"] = "ZodOptional";
    ZodFirstPartyTypeKind["ZodNullable"] = "ZodNullable";
    ZodFirstPartyTypeKind["ZodDefault"] = "ZodDefault";
    ZodFirstPartyTypeKind["ZodPromise"] = "ZodPromise";
})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));
const instanceOfType = (cls, params = {
    message: `Input not instance of ${cls.name}`,
}) => custom((data) => data instanceof cls, params, true);
const stringType = ZodString.create;
const numberType = ZodNumber.create;
const nanType = ZodNaN.create;
const bigIntType = ZodBigInt.create;
const booleanType = ZodBoolean.create;
const dateType = ZodDate.create;
const undefinedType = ZodUndefined.create;
const nullType = ZodNull.create;
const anyType = ZodAny.create;
const unknownType = ZodUnknown.create;
const neverType = ZodNever.create;
const voidType = ZodVoid.create;
const arrayType = ZodArray.create;
const objectType = ZodObject.create;
const strictObjectType = ZodObject.strictCreate;
const unionType = ZodUnion.create;
const discriminatedUnionType = ZodDiscriminatedUnion.create;
const intersectionType = ZodIntersection.create;
const tupleType = ZodTuple.create;
const recordType = ZodRecord.create;
const mapType = ZodMap.create;
const setType = ZodSet.create;
const functionType = ZodFunction.create;
const lazyType = ZodLazy.create;
const literalType = ZodLiteral.create;
const enumType = ZodEnum.create;
const nativeEnumType = ZodNativeEnum.create;
const promiseType = ZodPromise.create;
const effectsType = ZodEffects.create;
const optionalType = ZodOptional.create;
const nullableType = ZodNullable.create;
const preprocessType = ZodEffects.createWithPreprocess;
const ostring = () => stringType().optional();
const onumber = () => numberType().optional();
const oboolean = () => booleanType().optional();

var mod = /*#__PURE__*/Object.freeze({
    __proto__: null,
    getParsedType: getParsedType,
    ZodParsedType: ZodParsedType,
    makeIssue: makeIssue,
    EMPTY_PATH: EMPTY_PATH,
    addIssueToContext: addIssueToContext,
    ParseStatus: ParseStatus,
    INVALID: INVALID,
    DIRTY: DIRTY,
    OK: OK,
    isAborted: isAborted,
    isDirty: isDirty,
    isValid: isValid,
    isAsync: isAsync,
    ZodType: ZodType,
    ZodString: ZodString,
    ZodNumber: ZodNumber,
    ZodBigInt: ZodBigInt,
    ZodBoolean: ZodBoolean,
    ZodDate: ZodDate,
    ZodUndefined: ZodUndefined,
    ZodNull: ZodNull,
    ZodAny: ZodAny,
    ZodUnknown: ZodUnknown,
    ZodNever: ZodNever,
    ZodVoid: ZodVoid,
    ZodArray: ZodArray,
    get objectUtil () { return objectUtil; },
    ZodObject: ZodObject,
    ZodUnion: ZodUnion,
    ZodDiscriminatedUnion: ZodDiscriminatedUnion,
    ZodIntersection: ZodIntersection,
    ZodTuple: ZodTuple,
    ZodRecord: ZodRecord,
    ZodMap: ZodMap,
    ZodSet: ZodSet,
    ZodFunction: ZodFunction,
    ZodLazy: ZodLazy,
    ZodLiteral: ZodLiteral,
    ZodEnum: ZodEnum,
    ZodNativeEnum: ZodNativeEnum,
    ZodPromise: ZodPromise,
    ZodEffects: ZodEffects,
    ZodTransformer: ZodEffects,
    ZodOptional: ZodOptional,
    ZodNullable: ZodNullable,
    ZodDefault: ZodDefault,
    ZodNaN: ZodNaN,
    custom: custom,
    Schema: ZodType,
    ZodSchema: ZodType,
    late: late,
    get ZodFirstPartyTypeKind () { return ZodFirstPartyTypeKind; },
    any: anyType,
    array: arrayType,
    bigint: bigIntType,
    boolean: booleanType,
    date: dateType,
    discriminatedUnion: discriminatedUnionType,
    effect: effectsType,
    'enum': enumType,
    'function': functionType,
    'instanceof': instanceOfType,
    intersection: intersectionType,
    lazy: lazyType,
    literal: literalType,
    map: mapType,
    nan: nanType,
    nativeEnum: nativeEnumType,
    never: neverType,
    'null': nullType,
    nullable: nullableType,
    number: numberType,
    object: objectType,
    oboolean: oboolean,
    onumber: onumber,
    optional: optionalType,
    ostring: ostring,
    preprocess: preprocessType,
    promise: promiseType,
    record: recordType,
    set: setType,
    strictObject: strictObjectType,
    string: stringType,
    transformer: effectsType,
    tuple: tupleType,
    'undefined': undefinedType,
    union: unionType,
    unknown: unknownType,
    'void': voidType,
    ZodIssueCode: ZodIssueCode,
    quotelessJson: quotelessJson,
    ZodError: ZodError,
    defaultErrorMap: defaultErrorMap,
    get overrideErrorMap () { return overrideErrorMap; },
    setErrorMap: setErrorMap
});




/***/ }),

/***/ "./node_modules/axios/package.json":
/*!*****************************************!*\
  !*** ./node_modules/axios/package.json ***!
  \*****************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"name":"axios","version":"0.21.4","description":"Promise based HTTP client for the browser and node.js","main":"index.js","scripts":{"test":"grunt test","start":"node ./sandbox/server.js","build":"NODE_ENV=production grunt build","preversion":"npm test","version":"npm run build && grunt version && git add -A dist && git add CHANGELOG.md bower.json package.json","postversion":"git push && git push --tags","examples":"node ./examples/server.js","coveralls":"cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js","fix":"eslint --fix lib/**/*.js"},"repository":{"type":"git","url":"https://github.com/axios/axios.git"},"keywords":["xhr","http","ajax","promise","node"],"author":"Matt Zabriskie","license":"MIT","bugs":{"url":"https://github.com/axios/axios/issues"},"homepage":"https://axios-http.com","devDependencies":{"coveralls":"^3.0.0","es6-promise":"^4.2.4","grunt":"^1.3.0","grunt-banner":"^0.6.0","grunt-cli":"^1.2.0","grunt-contrib-clean":"^1.1.0","grunt-contrib-watch":"^1.0.0","grunt-eslint":"^23.0.0","grunt-karma":"^4.0.0","grunt-mocha-test":"^0.13.3","grunt-ts":"^6.0.0-beta.19","grunt-webpack":"^4.0.2","istanbul-instrumenter-loader":"^1.0.0","jasmine-core":"^2.4.1","karma":"^6.3.2","karma-chrome-launcher":"^3.1.0","karma-firefox-launcher":"^2.1.0","karma-jasmine":"^1.1.1","karma-jasmine-ajax":"^0.1.13","karma-safari-launcher":"^1.0.0","karma-sauce-launcher":"^4.3.6","karma-sinon":"^1.0.5","karma-sourcemap-loader":"^0.3.8","karma-webpack":"^4.0.2","load-grunt-tasks":"^3.5.2","minimist":"^1.2.0","mocha":"^8.2.1","sinon":"^4.5.0","terser-webpack-plugin":"^4.2.3","typescript":"^4.0.5","url-search-params":"^0.10.0","webpack":"^4.44.2","webpack-dev-server":"^3.11.0"},"browser":{"./lib/adapters/http.js":"./lib/adapters/xhr.js"},"jsdelivr":"dist/axios.min.js","unpkg":"dist/axios.min.js","typings":"./index.d.ts","dependencies":{"follow-redirects":"^1.14.0"},"bundlesize":[{"path":"./dist/axios.min.js","threshold":"5kB"}]}');

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,